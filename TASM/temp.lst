0001   0000             #define TI83 
0002   0000             ;-------------------------------------------------------------------------
0003   0000             ;Slots - by M1nzfrischer
0004   0000             ;
0005   0000             ;
0006   0000             ;       (C)2025
0007   0000             ;
0008   0000             ;-------------------------------------------------------------------------
0009   0000             ;
0010   0000             ;
0011   0000             ;TODO:
0012   0000             ;9/21:
0013   0000             ; [ ] simulate 1 million plus spins via the same rng algo and print results - 
0014   0000             ;     insights needed:
0015   0000             ;       [ ] how often will the player go broke under normal circumstances?
0016   0000             ;       [ ] do high value symbols and bonuses put the player ahead of the bleed curve?
0017   0000             ;       [ ] does the player win/lose too often?  
0018   0000             ;       [ ] are low probability events beyond the possibility of a standard buy-in?
0019   0000             
0020   0000             ;2/16:
0021   0000             ;can save a full animated spin into slot_fin_state
0022   0000             ;  [ ]get 2nd spin forward working
0023   0000             ;  [ ]re-impl win check & anim
0024   0000             ;[ ] create a more general to-draw function, that draws, not just board state, but
0025   0000             ;       [ ] can draw from an array of coordinates that map to 
0026   0000             ;        drawCol 1 2 3 4 5 xx  ;1 draws winBox, 0 skips
0027   0000             ;            [ ] 0 1 0 1 0 00  ;row 1
0028   0000             ;                1 0 1 0 1 00  
0029   0000             ;                0 1 0 1 0 00
0030   0000             ;
0031   0000             ;[ ] how much does 100% largeIonSprite affect performance?
0032   0000             ;
0033   0000             ;[ ] re-seed the RNG with variable contents of calc (userVars etc)
0034   0000             ;[ ] remove fastCopy and replace with ionFastCopy(if fastCopy isn't modified).  Modified?  N                  
0035   0000             ;[ ] add	a,(64/2)-(32/2) ;self modification division to solve symbol ratio performance()
0036   0000             ;[ ] all lines marked with ##, FIX for 16byte accuracy.(when L > $FF, requiring full HL addr.)
0037   0000             ;[ ] self mod HL, BC, Offset macro?
0038   0000             ;[ ] make sure IY usage isn't destorying system VARs.
0039   0000             ;[ ] make sure all memory wipes are accurate (win_anim_array & win_states_)
0040   0000             ;[ ] log symbol also in slot_win_states?     (symbol, line#, inArow) (x, y) too? so anim_wins is easier.
0041   0000             ;[ ] how to clear stack & exit cleanly?
0042   0000             ;[ ] FIREBALLS? 
0043   0000             ;[ ] spin with the winner, win with the spinner
0044   0000             ;[ ] draw line through winning payline being animated | or win box?
0045   0000             ;[ ] turn off split screen modes to ensure lines draw correctly always
0046   0000             ;[ ] merge ANDSrite, XORSprite & ORSprite into same routine - should take a parameter
0047   0000             ;[ ]* move all clearable memory on-top of eachother, so we can LDIR them all in 1 command.
0048   0000             ;[ ]* getSysInfo system command to retrieve real calculator's unique product code, etc.
0049   0000             
0050   0000             ;//////////////////test commands\\\\\\\\\\\\\\\\\\\\
0051   0000             ; ei \ halt
0052   0000             ;Pause:
0053   0000             ;  DI                  ; disable interrupts
0054   0000             ;  LD  A, 01           ; bit 3 = lcd status
0055   0000             ;  OUT ($03), A        ; bit 0 = ON-interrupt status
0056   0000             ;  EI                  ; enable interrupts
0057   0000             ;  HALT                ; wait for ON (that's the only interrupt)
0058   0000             ;  RET
0059   0000             
0064   0000                .list                ;  \
0065   0000~            #ifdef TI83P            ;   \
0066   0000~               .org  progstart-2    ;    | Standard Ion
0067   0000~               .db   $BB,$6D        ;   /  Program Header
0068   0000             #else                   ;  /
0069   9327                .org  progstart      ; /
0070   9327             #endif                  ;/
0071   9327 C9             ret                  ; use xor a if libraries are not used
0072   9328 30 16          jr    nc,start       ; jump to the start
0073   932A                                     ; of the program
0074   932A 7A 73 6C 6F    .db   "zslots by m1nzfrisher",0
0074   932E 74 73 20 62 
0074   9332 79 20 6D 31 
0074   9336 6E 7A 66 72 
0074   933A 69 73 68 65 
0074   933E 72 00 
0075   9340             COORD   .equ    8A3Ah
0076   9340             
0077   9340             #define debug
0078   9340             
0079   9340             
0080   9340             START:         
0081   9340             
0082   9340 ED 73 25 AB                LD    (startSP), SP                 ;save the originating stack pointer for debugging & clean exits
0083   9344                            ;SET   textWrite, (IY+sgrflags)      ;set flag to write text to grbuffer, not screen.
0084   9344 FD CB 05 DE                SET   textInverse, (IY+textFlags)   ;invert text
0085   9348 FD CB 08 C6                SET   preClrForMode, (IY+newDispF) ;preclear space for text
0086   934C                           ; SET   0, (IY + 60)                  ;IY+60=plotflags3, b0=bufferOnly
0087   934C 21 00 00    Begin:         LD   HL,$0000
0088   934F 22 3A 8A                   LD   (COORD),HL
0089   9352 21 C0 B1                   ld hl, bg_anim_3
0090   9355 22 B2 AD                   ld (nft_anim_p), hl 
0091   9358                            ;turn flags off
0092   9358                           ; call printQRCode
0093   9358 CD 6F A3                   CALL updateBet
0094   935B             
0095   935B             ;turn off interrupts
0096   935B F3                         di
0097   935C             
0098   935C             ;Set the calc to the highest speed
0099   935C                            ;in a,(2)
0100   935C                            ;rla
0101   935C                            ;sbc a,a
0102   935C                            ;out (20h),a 
0103   935C             backFromBonus:
0104   935C CD 5B 51                   bcall(_GrBufClr)                    ;clear graph buffer(plotSScreen)
0105   935F 21 4B B6                   ld hl, qr_data_string
0106   9362 CD 67 93                   call PutS
0107   9365 76                         halt 
0108   9366 76                         halt
0109   9367             
0110   9367             
0111   9367             
0112   9367             PutS:
0113   9367 C5                  PUSH BC
0114   9368 F5                  PUSH AF
0115   9369 3A 7A BB            LD A,(winBtm)
0116   936C 47                  LD B,A ; B = bottom line of window
0117   936D             PutS10:
0118   936D 7E                  LD A,(HL) ; get a character of string name
0119   936E 23                  INC HL
0120   936F B7                  OR A ; end of string?
0121   9370 37                  SCF ; indicate entire string was
0122   9371                     ; displayed
0123   9371 28 09               JR Z, PutS20 ; yes --->
0124   9373 CD 05 47            bcall(_putC) ; display one character of string
0125   9376             ;
0126   9376 3A 0C 80            LD A,(curRow) ; check cursor position
0127   9379 B8                  CP B ; off end of window?
0128   937A 38 F1               JR C,PutS10 ; no, display rest of string
0129   937C             PutS20:
0130   937C C1                  POP BC ; restore A (but not F)
0131   937D 78                  LD A,B
0132   937E C1                  POP BC   ;restore bc
0133   937F C9                  RET
0134   9380             
0135   9380             
0136   9380             render_random_board:
0137   9380 3E 00                      ld a, 0
0138   9382 32 52 82                   ld (penCol), a
0139   9385 32 53 82                   ld (penRow), a 
0140   9388 06 0C                      ld b, 12
0141   938A             rrb_new_row               
0142   938A C5                          push bc 
0143   938B 06 1E                       ld b, 30
0144   938D                                     
0145   938D                            
0146   938D             rrb_lp:
0147   938D C5                                   push bc  
0148   938E CD 0A 9F                            call rng8toA
0149   9391 FE 80                               cp $80
0150   9393 D4 B0 93                            call nc, makeA0
0151   9396 CD 7D 47                            bcall(_VPutMap) 
0152   9399                                   
0153   9399 C1                              pop bc 
0154   939A 10 F1                           djnz rrb_lp
0155   939C 3A 53 82                        ld a, (penRow)
0156   939F C6 06                           add a, 6
0157   93A1 32 53 82                        ld (penRow), a 
0158   93A4 3E 00                           ld a, 0 
0159   93A6 32 52 82                        ld (penCol), a 
0160   93A9 C1                          pop bc 
0161   93AA 10 DE                     djnz rrb_new_row
0162   93AC C3 80 93                    jp render_random_board
0163   93AF 76                          halt
0164   93B0             makeA0:
0165   93B0 3E 14                       ld a, 14h
0166   93B2 C9                          ret
0167   93B3             
0168   93B3             
0169   93B3             
0170   93B3             
0171   93B3 C3 36 94                   jp spin                  ;first game, no animation of spinning
0172   93B6             ;make sure there's enough money
0173   93B6             prep_spin:       
0174   93B6             ; generate an RNG to determine if this is an NFT eligible spin
0175   93B6 CD BB A4                   call resetNFTflags
0176   93B9 CD 0A 9F                   call rng8toA
0177   93BC FE 62                      cp $62
0178   93BE CC F2 9F                   call z, setNFTeligibleSpin
0179   93C1             
0180   93C1 2A A9 AD                   ld HL, (new_money)
0181   93C4 22 A7 AD                   LD (money), HL           
0182   93C7 3E 00                      ld A, 0
0183   93C9 32 AB AD                   ld (cur_win_total), A
0184   93CC 32 AC AD                   ld (cur_win_total+1), A
0185   93CF 3C                         inc a
0186   93D0 32 AD AD                   ld (cflags), a 
0187   93D3             
0188   93D3             
0189   93D3             ;[ ] if in the middle of a current spin
0190   93D3             ;[ ] immediately stop reels & save to fin_state
0191   93D3             ;[ ] then check wins
0192   93D3                     ;if 1, animate until next enter is pressed
0193   93D3                     ;if 0, isWaiting = 1, spinning =0
0194   93D3 3A 1C AB                   ld a, (bt_flags)
0195   93D6                            ;counting and waiting = false
0196   93D6 E6 F3                      and %11110011
0197   93D8                            ;spinning is flipped
0198   93D8 EE 02                      xor %10
0199   93DA F6 80                      or  $80        ;turn on clearTop
0200   93DC 32 1C AB                   ld (bt_flags), a
0201   93DF E6 02                      and %10          
0202   93E1 CA 74 96                   jp z, stopSpin
0203   93E4             
0204   93E4                         
0205   93E4             
0206   93E4             update_display:
0207   93E4                            
0208   93E4 21 58 B1                   ld hl, bg_anim_run1
0209   93E7 22 B0 AD                   ld (run_anim_p), hl
0210   93EA             
0211   93EA             
0212   93EA 21 06 38                   LD HL, _NUM_XY_MONEY
0213   93ED 22 52 82                   LD (PenCol), HL   
0214   93F0 2A A7 AD                   LD HL, (money)     ;HL is now new money +1$  
0215   93F3 CD 7C 4A                   bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
0216   93F6 CD C2 41    	           bcall(_op2toop1)            ;OP2 to OP1   
0217   93F9 CD D4 51    	           bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
0218   93FC             
0219   93FC CD C7 96                   call resetBoardMask
0220   93FF             
0221   93FF 3A 1C AB                   ld a, (bt_flags)
0222   9402 CB A7                      res isWin, a
0223   9404             
0224   9404 2A A7 AD                   ld HL, (money)
0225   9407 ED 5B 23 AB                ld DE, (_totalBet)
0226   940B ED 52                      SBC HL, DE
0227   940D D8                         ret c
0228   940E 22 A7 AD                   ld (money), HL
0229   9411 22 A9 AD                   LD (new_money), HL     
0230   9414                            ;all is refreshed, check if SPIN cancelled a bonus win animation
0231   9414 CB 6F                      bit isBonus, a
0232   9416 32 1C AB                   ld (bt_flags), a
0233   9419 C2 F6 97                   jp nz, begin_BONUS
0234   941C             
0235   941C 21 28 B2                   LD   HL,win_anim_array		            ;wipe animation array, for next spin
0236   941F 11 29 B2                   LD   DE,win_anim_array+1
0237   9422 36 00                      LD   (HL),$00
0238   9424 01 18 00                   LD   BC, 24
0239   9427 ED B0                      LDIR
0240   9429             
0241   9429 21 78 B2                   LD   HL,slot_win_states		            ;zero out the mem
0242   942C 11 79 B2                   LD   DE,slot_win_states+1
0243   942F 36 0F                      LD   (HL),$0F
0244   9431 01 35 00                   LD   BC, 53
0245   9434 ED B0                      LDIR
0246   9436             
0247   9436             
0248   9436             spin: 
0249   9436                            ;LD   HL, slot_cur_reel_state         ;set our pointer to beginning of board state
0250   9436                            ;LD   (data_p+8), HL                    ;hl = value@data.p
0251   9436                 
0252   9436 21 28 B2                   LD   HL,win_anim_array  		        ;zero out the mem
0253   9439 11 29 B2                   LD   DE,win_anim_array+1
0254   943C 36 00                      LD   (HL),$00
0255   943E 01 18 00                   LD   BC, 24
0256   9441 ED B0                      LDIR
0257   9443             
0258   9443 21 E5 B2                   LD   HL,bonus_loc 		        ;zero out the mem
0259   9446 11 E6 B2                   LD   DE,bonus_loc+1
0260   9449 36 FF                      LD   (HL),$FF
0261   944B 01 0E 00                   LD   BC, 14
0262   944E ED B0                      LDIR
0263   9450             
0264   9450 21 78 B2                   ld HL, slot_win_states    
0265   9453 22 BC AD                   ld (data_p+6), HL          ;data_p6 will hold offset for storing data INTO slot_win_states 
0266   9456                    
0267   9456                            ;call draw_layer_machine                   ;machine
0268   9456 CD 70 A1                   call draw_mask_layer
0269   9459 CD 8C 9F                   call draw_layer_fillbg_top                ;black out                 
0270   945C CD 9C 4B                   bcall(_GrBufCpy)                  ;buffer(plotSScreen) to display
0271   945F                   
0272   945F             
0273   945F             
0274   945F                            ; show me the money!!------------------------
0275   945F 21 01 38                   LD     HL, _TEXT_XY_CREDIT               
0276   9462 22 52 82                   LD     (PenCol), HL              ; PenCol comes before PenRow- 
0277   9465                           ; LD     HL, symbols+coin+_name
0278   9465             
0279   9465                            ;LD hl, $0003
0280   9465                            ;LD de, 1000
0281   9465                            ;call mult
0282   9465                            ;ld DE, (money)
0283   9465                            ;add HL, DE
0284   9465 21 92 AB                   LD HL, money_string
0285   9468 CD 81 47                   bcall(_VPutS)
0286   946B             
0287   946B             
0288   946B 2A A7 AD                   LD HL, (money)
0289   946E CD 7C 4A                   bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
0290   9471 CD C2 41    	           bcall(_op2toop1)            ;OP2 to OP1   
0291   9474 CD D4 51    	           bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
0292   9477             
0293   9477 CD 8F A3                   call draw_rmenu             
0294   947A             
0295   947A CD D4 9E                   call genStore_15_rng
0296   947D                 
0297   947D 3A 1C AB                   ld a, (bt_flags)
0298   9480 FE 00                      cp isFirstGame
0299   9482 20 00                      jr nz, skip_chk_win
0300   9484                     
0301   9484                            ;LD a, $34
0302   9484                            ;LD (aO), a                   ;update offset into coordinates data for Save_state
0303   9484                            ;LD HL, (slot_saved_reel_state)
0304   9484                            ;call chk_win_prep
0305   9484             
0306   9484             ;have to press spin to get here
0307   9484             ;may also be cancelling isSpinning animation of previous reel
0308   9484             ;Purpose: drop old board 2 full iterations (20 pixels) so there is a smooth transition
0309   9484             ;         into the new board state
0310   9484             
0311   9484             ;arrays should terminate with $FF
0312   9484             ;-load sprite array offset array into data_p pointer
0313   9484             
0314   9484             skip_chk_win:   
0315   9484                      
0316   9484 CB 87                       RES isFirstGame, a 
0317   9486 32 1C AB                    ld (bt_flags), a          
0318   9489 21 0E B2                    ld HL, slot_cur_reel_state
0319   948C 22 BE AD                    ld (data_p+8), HL
0320   948F                             ;ld HL, win_anim_array
0321   948F 3E 1A                       ld a, $1A               
0322   9491 32 1B AB                    LD (aO), a
0323   9494 C3 9F 94                    jp draw_prep
0324   9497                             ;ld (WIN_ARRAY_OFF), A      ;0 if anim, $10 if cur_state 
0325   9497             from_main:      
0326   9497             
0327   9497 3A 1C AB                    ld a, (bt_flags)
0328   949A CB 5F                       bit isWaiting, a
0329   949C C2 D1 95                    jp nz, MAIN_LOOP_PREP
0330   949F             draw_prep:      
0331   949F             
0332   949F             skip_Auto_Stop:  
0333   949F                             
0334   949F                             ;call draw_layer_machine
0335   949F                  
0336   949F 3A 1C AB                    ld a, (bt_flags)
0337   94A2 CB 67                       bit isWin, a
0338   94A4 CC FA A3                    call z, draw_top_layers              
0339   94A7 CD A3 A2                    call draw_sarr_at_xarr_yarr
0340   94AA             
0341   94AA 3A 1C AB                    ld a, (bt_flags)
0342   94AD CB 7F                       bit clearTop, a
0343   94AF C4 8C 9F                    call nz, draw_layer_fillbg_top           
0344   94B2                             ;call draw_layer_fillbg_top   
0345   94B2             
0346   94B2 21 01 38                    LD HL, _TEXT_XY_CREDIT
0347   94B5 22 52 82                    LD (PenCol), HL        
0348   94B8 21 92 AB                    LD HL, money_string
0349   94BB CD 81 47                    bcall(_VPutS)
0350   94BE 21 06 38                    LD HL, _NUM_XY_MONEY               
0351   94C1 22 52 82                    LD (PenCol), HL              ; PenCol comes before PenRow- 
0352   94C4 2A A7 AD                    LD HL, (money)
0353   94C7 CD 7C 4A                    bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
0354   94CA CD C2 41    	            bcall(_op2toop1)            ;OP2 to OP1   
0355   94CD CD D4 51    	            bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
0356   94D0 CD B6 91                    call ionFastCopy
0357   94D3             
0358   94D3 3A 1C AB                    ld a, (bt_flags)
0359   94D6 CB 4F                       bit isSpinning, a
0360   94D8             
0361   94D8 C4 F0 95                    call nz, advance_Spin_Anim
0362   94DB             
0363   94DB                             ;if 
0364   94DB 3A 1C AB                    ld a, (bt_flags)
0365   94DE CB 67                       bit isWin, a
0366   94E0 CA D1 95                    jp z, MAIN_LOOP_PREP
0367   94E3 CB 4F                       bit isSpinning, a
0368   94E5 C2 D1 95                    jp nz, MAIN_LOOP_PREP            
0369   94E8             
0370   94E8             ;sudo:
0371   94E8             ;WINIMATE()
0372   94E8             ;if k>1, JP TIMERLOOP_: (whatever is on screen stays for 9 cicles max)
0373   94E8             ;L1: 
0374   94E8             ;    clear bottomLeft
0375   94E8             ;    disp P6  
0376   94E8             ;    p6++
0377   94E8             ;    k = 1   
0378   94E8             ;     
0379   94E8             ;TIMERLOOP_:
0380   94E8             ;for (; k<=10, k++)                 ;wait 10
0381   94E8             ;    skip to MoneyCounting
0382   94E8             ;display next or total? 
0383   94E8             ;if (p6[i+1]!=0),                   ;more data to display
0384   94E8             ;    update p6?(if not updated)
0385   94E8             ;    jp L1                          ;10 more with new data
0386   94E8             
0387   94E8             ;ELSE:  (no more data to display, jump to total, wait 10, reset)
0388   94E8             ;     clear bottomLeft
0389   94E8             ;     disp total
0390   94E8             ;     k = 2                     ;will run 9 iterations
0391   94E8             ;     p6 = slot_win_states       ;reset p6
0392   94E8             ;     fall
0393   94E8             ;sudo:
0394   94E8             ;WINIMATE()
0395   94E8             ;if k>1, JP TIMERLOOP_: (whatever is on screen stays for 9 cicles max)
0396   94E8             ;L1: 
0397   94E8             ;    clear bottomLeft
0398   94E8             ;    disp P6  
0399   94E8             ;    p6++
0400   94E8             ;    k = 1   
0401   94E8             ;     
0402   94E8             ;TIMERLOOP_:
0403   94E8             ;for (; k<=10, k++)                 ;wait 10
0404   94E8             ;    skip to MoneyCounting
0405   94E8             ;display next or total? 
0406   94E8             ;if (p6[i+1]!=0),                   ;more data to display
0407   94E8             ;    update p6?(if not updated)
0408   94E8             ;    jp L1                          ;10 more with new data
0409   94E8             
0410   94E8             ;ELSE:  (no more data to display, jump to total, wait 10, reset)
0411   94E8             ;     clear bottomLeft
0412   94E8             ;     disp total
0413   94E8             ;     k = 2                     ;will run 9 iterations
0414   94E8             ;     p6 = slot_win_states       ;reset p6
0415   94E8             ;     fall
0416   94E8             draw_flash_wins:           
0417   94E8                            ;ld a, (bt_flags2)
0418   94E8                            ;and %1
0419   94E8                            ;jr z, notFromBonus
0420   94E8                            ;halt
0421   94E8                            ;halt
0422   94E8             
0423   94E8             
0424   94E8             notFromBonus:
0425   94E8             
0426   94E8                            ;data_p6 holds the start of the win array here. never empty at i=0
0427   94E8 3A 1C AB                   LD a, (bt_flags)
0428   94EB CB BF                      RES clearTop, a
0429   94ED 32 1C AB                   ld (bt_flags), a
0430   94F0             
0431   94F0 3A AD AD                   LD a, (cflags)
0432   94F3 FE 01                      cp $01               ;cant check against 0
0433   94F5 C2 87 95                   jp nz, timerloop_
0434   94F8                            
0435   94F8             
0436   94F8                            ;draw first winning text
0437   94F8 21 20 0E                   LD HL, _TEXT_XY_TOPBC             ;bottom of top(needs to be centered) text
0438   94FB 22 52 82                   LD (PenCol), HL
0439   94FE 21 95 AB                   LD HL, top_win_str1
0440   9501 CD 81 47                   bcall(_vPutS)
0441   9504 CD B6 91                   call IONFastCopy             
0442   9507             dfL1:         
0443   9507 CD A3 9F                   call draw_layer_fillbg_low
0444   950A 21 25 38                   LD HL, _TEXT_XY_WINSTR       ;bottom left align pen
0445   950D 22 52 82                   LD (PenCol), HL
0446   9510 21 85 AD                   LD HL, bot_win_clear
0447   9513 CD 81 47                   bcall(_vputS)
0448   9516 21 25 38                   LD HL, _TEXT_XY_WINSTR       ;bottom left align pen
0449   9519 22 52 82                   LD (PenCol), HL
0450   951C             
0451   951C                     ;display p6
0452   951C             
0453   951C 2A BC AD                   LD HL, (data_p+6)
0454   951F 23                         inc hl
0455   9520 22 BC AD                   ld (data_p+6), HL
0456   9523 7E                         LD A, (HL)            
0457   9524             
0458   9524 CD 74 4A                   bcall(_setxxop1)            ;place A into OP1
0459   9527 CD D4 51    	           bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)          
0460   952A                                                        ;x in a row                          
0461   952A 21 61 AD                   LD HL, bot_win_str1
0462   952D CD 81 47                   bcall(_vputS)               ;"3 x "
0463   9530                            
0464   9530 2A BC AD                   LD HL, (data_p+6)
0465   9533 23                         inc HL
0466   9534 7E                         LD A, (HL)               ;symID
0467   9535 23                         inc HL                   ;1st byte of total
0468   9536 22 BC AD                   LD (data_p+6), HL
0469   9539 21 36 AE                   LD HL, slot_sprites
0470   953C 87                         ADD A, A                    ;E contains 1-8 result of the rng symbol
0471   953D 87                         ADD A, A                    ;(1-8)*8 = sprite offset
0472   953E 87                         ADD A, A 
0473   953F 21 36 AE                   ld HL, slot_sprites
0474   9542 22 C0 AD                   ld (P_), HL
0475   9545 CD E9 A3                   call jumpAfromP_
0476   9548 3A 53 82                   LD A, (penRow)
0477   954B 6F                         LD L, A
0478   954C 3A 52 82                   LD A, (penCol)
0479   954F CD AB 9E                   call XORSPR
0480   9552 3A 52 82                   LD A, (penCol)
0481   9555 C6 0A                      ADD A, $0A
0482   9557 32 52 82                   LD (penCol), A
0483   955A                             ;cur line win total
0484   955A 3E 3D                      LD A, '='
0485   955C CD 7D 47                   bcall(_VPutMap)            
0486   955F 3E 20                      LD A, ' '
0487   9561 CD 7D 47                   bcall(_VPutMap)            
0488   9564 3E 24                      LD A, '$'
0489   9566 CD 7D 47                   bcall(_VPutMap)          
0490   9569             
0491   9569 2A BC AD                   LD HL, (data_p+6)            ;translate total into printable HL  
0492   956C 7E                         LD A, (HL)                   ;1st byte                                                                          
0493   956D 23                         INC HL                       ;----
0494   956E 46                         LD B, (HL)                   ;2nd byte
0495   956F 23                         inc HL 
0496   9570 22 BC AD                   LD (data_p+6), HL            ;update p6 next win or 0F
0497   9573 6F                         LD L, A                      ;
0498   9574 78                         LD A, B                      ;
0499   9575 67                         LD H, A                      ; 
0500   9576             
0501   9576             
0502   9576 CD 7C 4A                   bcall(_setxxxxop2)           ;puts 16bit(xxxx) HL into OP2
0503   9579 CD C2 41    	           bcall(_op2toop1)             ;OP2 to OP1   
0504   957C CD D4 51    	           bcall(_dispop1a)             ;write OP1 to screen, at (PenCol, PenRow)
0505   957F             
0506   957F             
0507   957F CD B6 91                   call IONFastCopy
0508   9582             
0509   9582                     ;k = 1
0510   9582                     ;p6 is pointed to next win item.
0511   9582 3E 01                     ld a, 1
0512   9584 32 AD AD                  ld (cflags), a
0513   9587             timerloop_:    
0514   9587 3C                        inc a
0515   9588 32 AD AD                  ld (cflags), a
0516   958B FE 40                     cp $40                ;timer betwixt data total displays
0517   958D 38 2F                     jr c, NoResetWinText
0518   958F                             ;1st win displayed. waited 10 cycles.  what are the states?
0519   958F                                 ;-1st win displayed correctly on screen "3 x K = $45
0520   958F                                 ;-p6 points to slot_win_states[0]
0521   958F                          
0522   958F             
0523   958F                           ;--waited 10 - next win or total
0524   958F 2A BC AD                  LD HL, (data_p+6)
0525   9592 7E                        LD A, (HL)
0526   9593 FE 0F                     cp $0f                ;nz = more wins exist, jump back to dfL1
0527   9595 C2 07 95                  jp nz, dfL1
0528   9598             ;             ELSE:  (no more data to display, jump to total, wait 10, reset)
0529   9598             dispTotal:      
0530   9598                     ;display total
0531   9598             
0532   9598                           ;call draw_layer_fillbg_low
0533   9598 21 25 38                  LD HL, _TEXT_XY_WINSTR       ;bottom left align pen
0534   959B 22 52 82                  LD (PenCol), HL
0535   959E 21 65 AD                  LD HL, bot_win_str2
0536   95A1 CD 81 47                  bcall(_vputS)
0537   95A4                     
0538   95A4 2A AB AD                  LD HL, (cur_win_total)
0539   95A7 CD 7C 4A                  bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
0540   95AA CD C2 41    	          bcall(_op2toop1)            ;OP2 to OP1   
0541   95AD CD D4 51    	          bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
0542   95B0 CD B6 91                  call IONFastCopy            
0543   95B3                     ;k = 2
0544   95B3 3E 02                     ld a, $02
0545   95B5 32 AD AD                  ld (cflags), a
0546   95B8                     ;p6 = slot_win_state
0547   95B8 21 78 B2                  ld HL, slot_win_states
0548   95BB 22 BC AD                  ld (data_p+6), HL
0549   95BE             
0550   95BE             NoResetWinText:              
0551   95BE 21 28 B2                   LD HL, win_anim_array
0552   95C1 22 BE AD                   LD (data_p+8), HL
0553   95C4                            ;PUSH HL
0554   95C4 3E 00                      LD A, $00
0555   95C6 32 1B AB                   LD (aO), A 
0556   95C9                            ;CALL DELAY
0557   95C9             
0558   95C9                            ;chk_win turned counting on immediately.  Keep counting until 'MoneyCounted:; is reached
0559   95C9 3A 1C AB                   ld a, (bt_flags)    
0560   95CC E6 04                      and %100         ;isCounting?
0561   95CE C4 AF 9D                   CALL nz, _count_up
0562   95D1                            ;POP HL
0563   95D1                            ;enter with these lines to skip rng and debug custom board from state.
0564   95D1             
0565   95D1                            ;ld hl, slot_onscreen_state
0566   95D1                            ;ld (data_p), hl
0567   95D1                            ;jr draw_COL
0568   95D1             
0569   95D1             MAIN_LOOP_PREP: 
0570   95D1 CD 14 40                    bcall(_getCSC)         ;A = KEY | CSC does not wait for keyPress | returns 0 on nokey pressed|AF/HL die 
0571   95D4                           
0572   95D4             MAIN_LOOP:     
0573   95D4             
0574   95D4             
0575   95D4             	          ;check if [CLEAR] is being pressed
0576   95D4                            ; in a,(1)
0577   95D4                            ; and 40h
0578   95D4                            ; ret z
0579   95D4 FE 0F                       cp $0f
0580   95D6 CC 11 AB                    call z, smart_exit
0581   95D9                            ; in a,(1)
0582   95D9 FE 0C                       cp 0Ch
0583   95DB CC F7 A2                    CALL z,_incMult  
0584   95DE                            ; in a,(1)
0585   95DE FE 0B                       cp 0Bh
0586   95E0 CC 41 A3                    CALL z,_decLines
0587   95E3                            ; in a,(1)
0588   95E3 FE 0A                       cp 0Ah
0589   95E5 CC 1C A3                    CALL z,_incLines
0590   95E8                            ; in a,(1)
0591   95E8                            ; and 10h
0592   95E8 FE 31                       cp 31h
0593   95EA CA B6 93                    jp z, prep_spin              
0594   95ED                             ;check if [ENTER] is being pressed
0595   95ED              
0596   95ED                             
0597   95ED C3 97 94                    jp from_main
0598   95F0             ;advancing old symbols down off of the board, animating, dropping new symbols in
0599   95F0             ;---symbols are generally turned OFF at this point
0600   95F0             ;---HL = pointer to array to be drawn.
0601   95F0             advance_Spin_Anim:
0602   95F0             
0603   95F0             
0604   95F0 3A 31 AB                   ld a, (reelTimer)
0605   95F3 FE 03                      cp _GAMESPEED_
0606   95F5 28 4E                      jr z, copyFrozenReelToFinal
0607   95F7                            
0608   95F7 3A 2F AB                   ld a, (spinAnimCount)
0609   95FA FE 06                      cp $06
0610   95FC 30 06                      JR nc, pushBottomRowToTop
0611   95FE C6 06                      add a, 6
0612   9600                            
0613   9600 32 2F AB                   ld (spinAnimCount), a 
0614   9603 C9                         ret
0615   9604             pushBottomRowToTop:
0616   9604             
0617   9604 3E 00                       ld a, 0
0618   9606 32 2F AB                    LD (spinAnimCount), a
0619   9609 3A 31 AB                    ld a, (reelTimer)
0620   960C 3C                          inc a
0621   960D 32 31 AB                    ld (reelTimer), a
0622   9610             
0623   9610                             ;we want to shift, draw, then save -> mandate autostop
0624   9610 CD DC 96                    call rotate_5x5
0625   9613                             ;put bottom
0626   9613              
0627   9613 3A 31 AB                    ld a, (reelTimer)
0628   9616 FE 0E                       cp $0E           ;how many spins before reel autostops
0629   9618 C0                          ret nz
0630   9619                             ;a reel has autostopped
0631   9619 3E 01       skipNextShift:  ld a, 1
0632   961B 3A 30 AB                    ld a, (spinningReelNo)
0633   961E 3C                          inc a
0634   961F 47                          ld b, a
0635   9620 32 30 AB                    ld (spinningReelNo), a
0636   9623 FE 05                       cp $05
0637   9625 D2 A6 96                    jp nc, quitSpinning_checkWin
0638   9628 3E 00                       ld a, 0
0639   962A 32 31 AB                    ld (reelTimer), a              
0640   962D             
0641   962D CD 66 96                    call mpl
0642   9630 DD 22 BE AD                 LD (data_p+8), IX       ;get draw pointer to new offset mem.addr.
0643   9634                             ;LD HL, (data_p+8)
0644   9634                             ;LD (data_p), HL
0645   9634             
0646   9634                             ;ANDsprite Xcoord gets shifted right 16bits
0647   9634                             ;so that only spinning reels get spun
0648   9634             
0649   9634 3A 32 AB                    LD a, (maskXYWH)
0650   9637 C6 10                       add a, $10
0651   9639 32 32 AB                    LD (maskXYWH), a
0652   963C 3A 34 AB                    LD a, (maskXYWH+2)
0653   963F D6 10                       sub 16
0654   9641 32 34 AB                    ld (maskXYWH+2), a
0655   9644 C9                          ret
0656   9645             
0657   9645             ;HL+(5b)->IX->(data_p+8)
0658   9645             ;preconditions:
0659   9645             ;   b=multiplier
0660   9645             ;   a=0
0661   9645                                    
0662   9645             
0663   9645             copyFrozenReelToFinal:
0664   9645 3A 30 AB                    ld a, (spinningReelNo)
0665   9648 3C                          inc a
0666   9649 47                          ld b, a
0667   964A 3E 00                       ld a, 0
0668   964C CD 68 96                    call mpb       
0669   964F DD 22 C0 AD                 LD (P_), IX     
0670   9653 2A C0 AD                    LD HL, (P_)
0671   9656             
0672   9656 01 34 00                    LD BC, $0034
0673   9659 ED 42                       SBC HL, BC
0674   965B EB                          EX  DE, HL
0675   965C 2A C0 AD                    LD HL, (P_)
0676   965F 01 05 00                    LD BC, 5
0677   9662 ED B0                       LDIR                 
0678   9664                
0679   9664 18 B3                       jr skipNextShift
0680   9666             
0681   9666 C6 05       mpl:            add a, 5
0682   9668             mpb:            
0683   9668 10 FC                       DJNZ mpl
0684   966A             
0685   966A                             ;[ ] need to move the locked column into a staging area ()
0686   966A 21 0E B2                    ld   HL, slot_cur_reel_state
0687   966D 22 C0 AD                    ld   (P_), HL
0688   9670 CD E9 A3                    call jumpAfromP_
0689   9673 C9                          ret
0690   9674             
0691   9674             stopSpin:       
0692   9674                             ;save rest of board over to fin_state
0693   9674                             ;wherever datap+8 is, copy rest
0694   9674                             ;it will draw the rest when we turn isSpinning off
0695   9674 21 28 B2                    LD HL, slot_cur_reel_state+26
0696   9677 ED 5B BE AD                 LD DE, (data_p+8)
0697   967B ED 52                       SBC HL, DE
0698   967D 7D                          ld A, L
0699   967E 2A BE AD                    LD HL, (data_p+8)
0700   9681 01 34 00                    LD BC, $0034
0701   9684 ED 42                       SBC HL, BC
0702   9686 EB                          EX DE, HL
0703   9687 2A BE AD                    LD HL, (data_p+8)
0704   968A 06 00                       ld B, 00h
0705   968C 4F                          ld C, A
0706   968D ED B0                       LDIR
0707   968F 21 DA B1                    LD HL, slot_fin_reel_state
0708   9692 22 BE AD                    LD (data_p+8), HL
0709   9695             
0710   9695                             ;call resetBoardMask         ;spin cancelled, clear board & redraw
0711   9695 CD 70 A1                    call draw_mask_layer
0712   9698 CD B6 91                    call IONfastCopy
0713   969B 3E 4E                       ld a, $4E
0714   969D 32 1B AB                    ld (aO), a     ;offset to draw fin_state x,y's
0715   96A0                             ;call draw_sarr_at_xarr_yarr
0716   96A0                             ;call IONfastCopy
0717   96A0             
0718   96A0 CD A6 96                    call quitSpinning_checkWin
0719   96A3             
0720   96A3 C3 9F 94                    jp draw_prep
0721   96A6             
0722   96A6             
0723   96A6             quitSpinning_checkWin:
0724   96A6             ;isFirstGame:    .EQU     0
0725   96A6             ;isSpinning:     .EQU     1
0726   96A6             ;isCounting:     .EQU     2
0727   96A6             ;isWaiting:      .EQU     3
0728   96A6             ;isWin:          .EQU     4
0729   96A6 3E 00                       ld a, 0
0730   96A8                             ;ld (spinningReelNo), a
0731   96A8 32 31 AB                    ld (reelTimer), a
0732   96AB 32 2F AB                    ld (spinAnimCount), a
0733   96AE             
0734   96AE CD 41 97                    call chk_win_prep          ;the only place checkWin is invoked.  Only way to set isWin
0735   96B1             
0736   96B1 3A 1C AB                    ld a, (bt_flags)
0737   96B4 CB 8F                       res isSpinning, a
0738   96B6 CB 67                       bit isWin, a
0739   96B8 32 1C AB                    ld (bt_flags), a
0740   96BB C0                          ret nz
0741   96BC F6 08                       or %1000                    ;isWaiting = true if no win
0742   96BE 32 1C AB                    ld (bt_flags), a
0743   96C1 3A 30 AB                    ld a, (spinningReelNo)
0744   96C4 FE 00                       cp 0
0745   96C6 C8                          ret z
0746   96C7             
0747   96C7             resetBoardMask:
0748   96C7 3E 00                       ld a, $00
0749   96C9 32 32 AB                    ld (maskXYWH), a
0750   96CC 3E 16                       ld a, $16
0751   96CE 32 33 AB                    ld (maskXYWH+1), a
0752   96D1 3E 50                       ld a, $50
0753   96D3 32 34 AB                    ld (maskXYWH+2), a
0754   96D6 3E 20                       ld a, $20
0755   96D8 32 35 AB                    ld (maskXYWH+3), a
0756   96DB             
0757   96DB             
0758   96DB C9                          ret
0759   96DC             
0760   96DC             ;take bottom 1 rows, move to top
0761   96DC             ;shift top 3 rows down 2.
0762   96DC             rotate_5x5:     
0763   96DC 21 22 B2                    LD HL, slot_cur_reel_state+20
0764   96DF 11 08 B2                    LD DE, slot_saved_reel_state+20
0765   96E2 01 05 00                    LD BC, 5
0766   96E5 ED B0                       LDIR
0767   96E7 21 25 B2                    LD HL, slot_cur_reel_state+23
0768   96EA 11 26 B2                    LD DE, slot_cur_reel_state+24
0769   96ED 01 18 00                    LD BC, 24
0770   96F0 ED B8                       LDDR
0771   96F2 21 08 B2                    LD HL, slot_saved_reel_state+20
0772   96F5 11 0E B2                    LD DE, slot_cur_reel_state
0773   96F8 01 05 00                    LD BC, 5
0774   96FB ED B0                       LDIR   
0775   96FD C9                          ret
0776   96FE             
0777   96FE             SINGLE_BET:
0778   96FE C9                         RET
0779   96FF             DOUBLE_BET:
0780   96FF C9                         RET
0781   9700             
0782   9700             SPIN_ENTER:
0783   9700                            ;initialize x
0784   9700 21 3A 8A                   LD  HL, COORD
0785   9703 3E 0C                      LD  A, 12
0786   9705 32 3A 8A                   LD (COORD), a
0787   9708             
0788   9708             SPIN_RESET:
0789   9708             
0790   9708             REEL1:
0791   9708 21 3B 8A                   LD HL, COORD+1
0792   970B 3E 17                      LD A, 23
0793   970D 77                         LD (HL), A
0794   970E DD 21 36 AE                LD IX,slot_sprites
0795   9712             
0796   9712             SPIN_LOOP:      
0797   9712                            ;prep registers for display
0798   9712 21 3A 8A                   LD   HL,COORD
0799   9715 7E                         LD   A,(HL)
0800   9716 23                         INC  HL
0801   9717 6E                         LD   L,(HL)
0802   9718 06 08                      ld   B, 8                ;Large Sprite height
0803   971A 0E 01                      ld   C, 1                ;Large Sprite width
0804   971C CD AB 9E                   CALL XORSPR               
0805   971F             
0806   971F                            ;lets go vertical
0807   971F 21 3A 8A                   LD HL, COORD
0808   9722 3E 10                      LD A, 16
0809   9724 86                         ADD A, (HL)
0810   9725 32 3A 8A                   LD (COORD), A
0811   9728 FE 5C                      CP 92
0812   972A CC 3B 97                   CALL Z, SPIN_RESET_X
0813   972D             
0814   972D 21 3B 8A                   LD HL, COORD+1
0815   9730 34                         INC (HL)
0816   9731 3A 3B 8A                   LD A, (COORD+1)
0817   9734 FE 35                      CP 53
0818   9736 CC 08 97                   CALL Z, SPIN_RESET
0819   9739             
0820   9739 18 D7                      JR SPIN_LOOP
0821   973B             
0822   973B             SPIN_RESET_X:
0823   973B             
0824   973B 3E 0C                      LD a, 0Ch
0825   973D 32 3A 8A                   LD (COORD), a
0826   9740 C9                         RET
0827   9741             
0828   9741             ;checks win conditions against board condition for payable circumstance
0829   9741             ;payrules[9lines][5rules]:          Each rule contains a cur_reel_state offset per payline
0830   9741             ;cur_reel_state:                    current board spun into
0831   9741             ;slot_cur_reel_state:  
0832   9741             ;           1     2    3               5....                       A    B                             ;term 
0833   9741             ;    .db    $02, $03, $04, $02, $03,   $04, $02, $03, $04, $02,    $03, $04, $02, $03, $08,    $0F
0834   9741             ;
0835   9741             ;pay_rules:   
0836   9741             ;    .db    $02, $05, $08, $0B, $0E              ;pay line 1
0837   9741             ;    .db    $01, $04, $07, $0A, $0D              ;         2-3
0838   9741             ;
0839   9741             chk_win_prep:  
0840   9741 3E 00                      ld a, 0
0841   9743 32 3A 8A                   ld (COORD), a    ;y axis of 2D array
0842   9746             CHK_WIN:   
0843   9746             ;19EC2        
0844   9746             
0845   9746 21 AF B2                   LD HL, pay_rules
0846   9749                            ;jump to next row of pay rules    
0847   9749             
0848   9749 47                         LD B, A
0849   974A FE 00                      cp 0            ;check if on the first line *A=slot_win_states[0], first win line#
0850   974C CA 55 97                   jp z, skip_m
0851   974F 3E 00                      ld a, 0          
0852   9751             mtpl:          
0853   9751 C6 06                      add a, 6
0854   9753 10 FC                      djnz mtpl       
0855   9755             skip_m:
0856   9755 21 AF B2                   LD HL, pay_rules
0857   9758 22 C0 AD                   LD (P_), HL
0858   975B CD E9 A3                   call jumpAfromP_
0859   975E DD 22 B6 AD                LD (data_p), IX
0860   9762 0E 00                      LD C, 0
0861   9764             chk_loop:     
0862   9764             ;19EFA
0863   9764 DD 7E 00                   LD A,  (IX)                      ;offset aka (rule[i])   
0864   9767 3D                         DEC A                            ;offsets need to be zero index,
0865   9768 21 DA B1                   LD HL, slot_chk_win_state       
0866   976B 22 C0 AD                   LD (P_), HL  
0867   976E CD E9 A3                   call jumpAfromP_     
0868   9771 DD 7E 00                   LD A, (IX)            ;A holds first reel symbol to compare**correct
0869   9774 FE 09                      cp $09                ;if bonus symbol, skip
0870   9776 28 22                      jr z, bon_skip
0871   9778                                      
0872   9778             chk_loop2:
0873   9778             ;19EE7     
0874   9778 2A B6 AD                   ld hl, (data_p)  
0875   977B 23                         INC hl                ;point to next pay rule  
0876   977C 22 B6 AD                   ld (data_p), hl   
0877   977F 47                         LD B, A               ;move A temporarily for use in jumpA routine          
0878   9780 7E                         LD  A, (HL)           ;next offset
0879   9781 3D                         DEC A                 ;offsets need to be zero index,    
0880   9782 21 DA B1                   LD HL, slot_chk_win_state
0881   9785 22 C0 AD                   LD (P_), HL 
0882   9788 CD E9 A3                   CALL jumpAfromP_
0883   978B             ;19F03    
0884   978B DD 5E 00                   LD E, (IX)   ;2nd reel to compare
0885   978E 0C                         INC C
0886   978F 78                         LD A, B      ;get 1st compare symbol back into A, for comparison with E              
0887   9790 BB                         cp E         
0888   9791 28 E5                      jr z, chk_loop2
0889   9793                                     
0890   9793                            ;a no match condition has been reached.  
0891   9793 47                         ld B, A                          ;b = symbolID for saving in win_log
0892   9794 79                         ld a, c
0893   9795 FE 03                      cp 3                             ;was a win booked before matches ended?
0894   9797 D4 C6 9C                   call nc, win_log                 ;deal with win & return to find new wins
0895   979A                           
0896   979A 21 3A 8A    bon_skip:      ld HL, COORD                     ;COORD=(statvars)18A3A
0897   979D 7E                         ld a, (HL)  
0898   979E 3C                         INC A                            ;go to next set of pay_rules (Ycolumn)
0899   979F 32 3A 8A                   ld (COORD), A
0900   97A2 57                         ld d, a
0901   97A3 3A 21 AB                   ld a, (_lines)
0902   97A6 47                         ld b, a
0903   97A7 7A                         ld a, d
0904   97A8 B8                         cp b                             ;no. of paylines
0905   97A9 38 9B                      jr c, CHK_WIN
0906   97AB                            ;all normal wins are logged   
0907   97AB CD B8 97                   call checkForBonus
0908   97AE 21 78 B2                   ld HL, slot_win_states        
0909   97B1 7E                         ld a, (HL)
0910   97B2 FE 0F                      cp $0F
0911   97B4 C4 1A 9D                   call nz, classify_wins
0912   97B7             
0913   97B7 C9                         ret
0914   97B8             
0915   97B8             ;checks full board for a bonus condition
0916   97B8             checkForBonus:
0917   97B8                            ;ld a, (bonusCount)
0918   97B8 0E 00                      ld c, 0
0919   97BA 16 01                      ld d, 1              ;counter to identify board position
0920   97BC DD 21 E5 B2                ld IX, bonus_loc     ;pay_rules[A]
0921   97C0 21 DA B1                   ld HL, slot_fin_reel_state
0922   97C3             
0923   97C3                            
0924   97C3 06 03       bonC_lop_i:    ld b, 3              ;
0925   97C5 14                         inc d
0926   97C6 14                         inc d
0927   97C7 23                         inc HL
0928   97C8 23                         inc HL
0929   97C9 7E          bonC_lop_j:     ld a, (HL)
0930   97CA FE 09                       cp 09h       
0931   97CC C2 D5 97                    jp nz, noB
0932   97CF 0C                          inc c 
0933   97D0 DD 72 00                    ld (IX), d
0934   97D3 DD 23                       inc IX             
0935   97D5 23          noB:            inc HL
0936   97D6 14                          inc d
0937   97D7 10 F0                       djnz bonC_lop_j
0938   97D9 7E                         ld a, (HL)
0939   97DA FE 0F                      cp 0fh 
0940   97DC 28 02                      jr z, bonC_end
0941   97DE 18 E3                      jr bonC_lop_i 
0942   97E0 79          bonC_end:      ld a, c
0943   97E1 FE 04                      cp $04                   ;[ ]change to 4 bonus symbols on release copy
0944   97E3 30 01                      jr nc, thereIsABonus
0945   97E5 C9                         ret
0946   97E6             
0947   97E6                            ;THERE IS A BONUS
0948   97E6 3A 1C AB    thereIsABonus: ld a, (bt_flags)
0949   97E9 F6 20                      or %100000
0950   97EB 32 1C AB                   ld (bt_flags), a
0951   97EE 3E 09                      ld a, 09h        ;line number for bonus (payrule 10-1 for index)
0952   97F0 06 09                      ld b, 09h        ;symID
0953   97F2 CD CA 9C                   call win_log_bonus     ;log the bonus win
0954   97F5 C9                         ret
0955   97F6             
0956   97F6             begin_BONUS:
0957   97F6                 ;save visable board to curstate for board redraw when bonus is over
0958   97F6 21 DA B1        ld hl, slot_fin_reel_state
0959   97F9 11 0E B2        ld de, slot_cur_reel_state
0960   97FC 01 19 00        ld bc, 25
0961   97FF ED B0           ldir
0962   9801             
0963   9801 3E 03           ld A, 3
0964   9803 32 8C AB        ld (heartCount), A
0965   9806             
0966   9806 CD A3 9F        call draw_layer_fillbg_low
0967   9809             bonus_start_waiting:   
0968   9809 CD 8C 9F        call draw_layer_fillbg_top
0969   980C CD B6 91        call IONFastCopy
0970   980F CD BE 9F        call draw_top_animation
0971   9812                 ;draw bonus in top_lower
0972   9812                 ;bottom says, "press ^ to begin"
0973   9812 21 20 0E        ld HL, _TEXT_XY_TOPBC
0974   9815 22 52 82        LD (PenCol), HL
0975   9818 21 C8 AB        LD HL, top_win_BON
0976   981B CD 81 47        bcall(_VputS)
0977   981E CD B6 91        call IONFastCopy
0978   9821             
0979   9821 21 06 38        ld HL, _NUM_XY_MONEY
0980   9824 22 52 82        LD (PenCol), HL
0981   9827 21 5C AC        LD HL, text_bot_expl1
0982   982A CD 81 47        bcall(_VputS)
0983   982D CD B6 91        call IONFastCopy
0984   9830             
0985   9830 3E FD           LD a,%11111101
0986   9832 D3 01           out (1),a
0987   9834             
0988   9834                 ;check if [^] is being pressed
0989   9834 DB 01           in a,(1)
0990   9836 E6 20           and 20h
0991   9838 CA 3D 98        jp z, _BONUS
0992   983B 18 CC           jr bonus_start_waiting
0993   983D             _BONUS:
0994   983D CD 70 A1        call draw_mask_layer
0995   9840                 ;call draw_layer_machine
0996   9840 CD 2E A0        call draw_layer_bonus_bg
0997   9843             _BON_GK:    
0998   9843 21 4F 21                    LD HL, _NUM_XY_BO6
0999   9846 7D                          LD A, L
1000   9847 3D                          DEC A
1001   9848 3D                          DEC A
1002   9849 3D                          DEC A
1003   984A 6C                          LD L, H
1004   984B 2C                          INC L
1005   984C 2C                          INC L
1006   984D 06 08                       LD B, 8
1007   984F 0E 03                       ld c, 3
1008   9851 DD 21 AE AF                 LD IX, bonus_enemy1
1009   9855 CD AD 91                    call ionPutSprite
1010   9858 CD B6 91                    call ionFastCopy
1011   985B 21 4F 21                    LD HL, _NUM_XY_BO6
1012   985E 7D                          LD A, L
1013   985F 3C                          inc a
1014   9860 3C                          inc a
1015   9861 3C                          inc a
1016   9862 3C                          inc a
1017   9863             
1018   9863 6C                          LD L, H
1019   9864 2C                          inc l
1020   9865             
1021   9865 06 04                       LD B, 4
1022   9867 0E 03                       ld c, 3
1023   9869 DD 21 AA AF                 LD IX,  misc_sprites_arrow
1024   986D CD AD 91                    call ionPutSprite
1025   9870 CD B6 91                    call ionFastCopy
1026   9873                            
1027   9873             
1028   9873             
1029   9873             
1030   9873 CD 14 40        bcall(_getCSC)         ;A = KEY | CSC does not wait for keyPress | returns 0 on nokey pressed|AF/HL die 
1031   9876 FE 13           cp $13
1032   9878 CA 7D 98        jp z, _BONUS_COUNTDOWN
1033   987B 18 C6           jr _BON_GK
1034   987D             
1035   987D             _BONUS_COUNTDOWN:
1036   987D CD 5B 51        bcall(_GrBufClr)
1037   9880                 ;call draw_layer_machine
1038   9880                 ;call draw_mask_layer
1039   9880 CD FA A3        call draw_top_layers
1040   9883                 ;call draw_layer_machine
1041   9883                 ;call draw_layer_fillall
1042   9883 CD B3 A0        call bon_redraw 
1043   9886                 
1044   9886             ;---------------draw lower lefthand enemy sprite, with initial BOP count = 0
1045   9886 21 06 38        ld hl, _NUM_XY_MONEY
1046   9889 7D              ld a, l
1047   988A 6C              ld l, h
1048   988B 06 08           ld b, 8
1049   988D DD 21 AE AF     ld ix, bonus_enemy1
1050   9891 CD AD 91        call ionPutSprite
1051   9894 21 12 39        ld hl, _NUM_XY_BOPCNT
1052   9897 2D              dec l
1053   9898 2D              dec l
1054   9899 22 52 82        ld (penCol), hl
1055   989C 3E 3A           ld A, ':'
1056   989E CD 7D 47        bcall(_VputMap)
1057   98A1 3E 30           ld A, '0'
1058   98A3 CD 7D 47        bcall(_VputMap)
1059   98A6             
1060   98A6             ;---------------draw lower righthand bonus lvl - intial value 1
1061   98A6 21 41 39        ld HL, _TEXT_XY_BONLVL 
1062   98A9 22 52 82        LD (PenCol), HL
1063   98AC 21 B7 AC        LD HL, text_bot_bon_lvl
1064   98AF CD 81 47        bcall(_VputS)
1065   98B2             
1066   98B2 21 4F 39        ld hl, _NUM_XY_BONLVL
1067   98B5 22 52 82        ld (penCol), hl
1068   98B8 3E 31           ld A, '1'
1069   98BA CD 7D 47        bcall(_VputMap)
1070   98BD             
1071   98BD                 ;call draw_layer_fillall
1072   98BD CD B6 91        call IONFastCopy
1073   98C0 CD C9 9E        call delay
1074   98C3 18 07           jr _BONUS_LOAD_ENEMY
1075   98C5             
1076   98C5             _BONUS_ENEMY_SCHEDULER:
1077   98C5                     ;flip coin
1078   98C5                     ; if true, rng1-9
1079   98C5                     ;   spot taken? skip
1080   98C5                     ;   not taken? place enemy on location (frame 1)
1081   98C5 CD 0A 9F        call rng8toA
1082   98C8 FE 91           cp 91h
1083   98CA 30 3C           jr nc, _bonLPrep
1084   98CC             _BONUS_LOAD_ENEMY:
1085   98CC CD 0A 9F        call rng8toA
1086   98CF FE 1C           cp $1C
1087   98D1 38 04           jr c, rngAis8
1088   98D3 E6 07           AND  7
1089   98D5 18 02           jr rngAno8
1090   98D7             rngAis8:        
1091   98D7 3E 08           ld A, 8
1092   98D9             rngAno8:  
1093   98D9 47              ld b, a
1094   98DA 21 52 AB        ld hl, bonusBoard
1095   98DD 22 C0 AD        ld (P_), hl
1096   98E0 CD E9 A3        call jumpAfromP_
1097   98E3 DD 7E 00        ld a, (IX)
1098   98E6 F6 00           or %0
1099   98E8 C2 08 99        jp nz, _bonLPrep  ;enemy already in location
1100   98EB 3A 8E AB        ld a, (bonusLvl)
1101   98EE F6 00           or %0
1102   98F0 CA 00 99        jp z, lvl1enemy
1103   98F3 CD 0A 9F        call rng8toA
1104   98F6 47              ld b, a
1105   98F7                 ;cp 99h
1106   98F7                 ;jr nc, lvl1enemy
1107   98F7                 ;zxc
1108   98F7 3A 8E AB        ld a, (bonusLvl)
1109   98FA             
1110   98FA A0              and b 
1111   98FB DD 77 14        ld (IX+20), a                ;spike baddy
1112   98FE 18 04           jr allEnemyPrep
1113   9900             lvl1enemy:
1114   9900 DD 36 14 00     ld (IX+20), $00   ;enemy type = 0, lvl1 enemy   
1115   9904             allEnemyPrep:    
1116   9904 DD 36 00 01     ld (IX), 01h      ;no enemy in location, place new enemy @ frame1
1117   9908             _bonLPrep:
1118   9908 21 52 AB        ld hl, bonusBoard
1119   990B E5              push hl
1120   990C             ;loop through all 9 board spots(hl), 
1121   990C             ;   is sprite done?
1122   990C             ;       animate a miss && -1 heart
1123   990C             ;       ret
1124   990C             ;   is sprite at peek? ret for (enemyTimer)
1125   990C             ;   not at peek?
1126   990C             ;       mask whole position from upperLeft to LowerRight
1127   990C             ;       draw sprite at current frame, in correct adjusted yPos
1128   990C             ;       frame++
1129   990C             ;------------SWATS--------------------------
1130   990C             ;   zero out swatted, missed, & expired positions
1131   990C             
1132   990C             ;  requires a pushed bonusBoard pointer in hl
1133   990C             _BONUS_LOOP:
1134   990C E1              pop hl          ;bonusBoard Pointer
1135   990D 7E              ld a, (hl)
1136   990E FE F0           cp $F0
1137   9910 CA C5 98        jp z, _BONUS_ENEMY_SCHEDULER        ;reached end of BoardChecks, re-cycle
1138   9913 F6 00           or %0
1139   9915 20 04           jr nz, _drawBonusFrame
1140   9917                 ;empty position, inc & skip
1141   9917 23              inc hl
1142   9918 E5              push hl
1143   9919 18 F1           jr _BONUS_LOOP
1144   991B             
1145   991B             ;hl contains pointer to frame number of current enemy
1146   991B             ;get xy by: 
1147   991B             ;   (hl - bonusBoard) -> A
1148   991B             ;   call bonusPosAtoXYinHL
1149   991B             
1150   991B             _drawBonusFrame:
1151   991B             ;has the baddie gone fully underground?
1152   991B E5              push hl                 ;board location, holds frame#raw, for incrementing frameNo
1153   991C 7E                  ld a, (hl)              ;rawFrameNo
1154   991D 3D                  dec a                   ;1st frame = 0 position in frame map (1)
1155   991E             
1156   991E 11 52 AB            ld de, bonusBoard
1157   9921 ED 52               sbc hl, de
1158   9923 4D                  ld c, l                 ;c=board position 123,456,789 
1159   9924 21 7A AB            ld hl, bonusFrameMap
1160   9927 22 C0 AD            ld (P_), hl
1161   992A CD E9 A3            call jumpAfromP_        ;(ix) = drawable frame number
1162   992D DD 7E 00            ld a, (IX)
1163   9930 47                  ld b, a
1164   9931 C5                  push bc                 ;b = drawable frame number, c = board position 0-8
1165   9932 79                      ld a, c 
1166   9933 CD AF 9C                call bonusPosAtoXYinHL
1167   9936 C1                  pop bc
1168   9937 D1              pop de
1169   9938 D5              push de 
1170   9939 C5                  push bc 
1171   993A E5                      push hl         ;xy
1172   993B 78                          ld a, b     ;drawable frame
1173   993C FE 09                       cp 9 
1174   993E 20 22                       jr nz, deleteLastBonusFrame
1175   9940                             ;at frame peak of 8
1176   9940                  
1177   9940 3E 0A                       ld a, 0Ah           ;jump 10 to get timer val
1178   9942 ED 53 C0 AD                 ld (P_), de
1179   9946 CD E9 A3                    call jumpAfromP_
1180   9949 DD 7E 00                    ld a, (IX)
1181   994C DD 35 00                    dec (IX)
1182   994F                             ;halt
1183   994F C2 B7 99                    jp nz, checkKeyAgainstFullBoard             ;skip drawing if timer is > 0
1184   9952             ;waiting is over, descend , reset timer 
1185   9952 3A 50 AB                    ld a, (enemyTimerMax)
1186   9955 DD 77 00                    ld (IX), a
1187   9958 E1                      pop hl     ;xy 
1188   9959 C1                  pop bc          
1189   995A 05                  dec b          ;update drawable frame to be 8 for smooth descent
1190   995B D1              pop de  ;pointer
1191   995C 1A              ld a, (de)
1192   995D 3C              inc a
1193   995E 12              ld (de), a        ;increase rawframe count
1194   995F D5              push de         ;pointer
1195   9960 C5                  push bc     
1196   9961 E5                      push hl    ;xy
1197   9962             ;not at peek frame(8)
1198   9962             ;c = boardpos, b = drawable frame#
1199   9962             deleteLastBonusFrame:
1200   9962 7D                          ld a, l
1201   9963 3D                          dec a
1202   9964 6F                          ld l, a
1203   9965 7C                          ld a, h  
1204   9966 3C                          inc a
1205   9967 3C                          inc a
1206   9968             
1207   9968 06 0A                       ld b, 10
1208   996A 0E 01                       ld c, 1
1209   996C 26 01                       ld h, 01h  ;sprite off
1210   996E DD 21 E2 AE                 ld ix, _10x16_off     
1211   9972 CD 35 9E                    call put_any_Sprite
1212   9975 CD B6 91                    call IONFastCopy
1213   9978 E1                      pop hl ; xy board pos
1214   9979 C1                  pop bc
1215   997A C5                  push bc
1216   997B E5                      push hl
1217   997C 78                          ld a, b
1218   997D FE F0                       cp $F0
1219   997F CA 27 9A                    jp z, late_miss    ;[]reached last frame of animation, user hasn't smashed enemy
1220   9982             drawCurrentBonusFrame:
1221   9982                         ;get to center of boardlocation
1222   9982 E1                      pop hl      ;xy for boardPosition []upperLeft, lowerRight
1223   9983 C1                  pop bc          ;b = drawable frame#
1224   9984 D1              pop de 
1225   9985 D5              push de
1226   9986 C5                  push bc 
1227   9987 E5                      push hl     ;xy
1228   9988 7D                          ld a, l
1229   9989 C6 09                       add a, 9    ;6 is height of bonus squares-- a = bottom of square
1230   998B 90                          sub b        ;a is now adjusted for current frame number
1231   998C 6F                          ld l, a     ;y updated
1232   998D 7C                          ld a, h     ;x
1233   998E C6 05                       add a, 5
1234   9990 F5                          push af         ;updated x
1235   9991 60                          ld h, b 
1236   9992 E5                              push hl     ;updated b,y
1237   9993 EB                                  ex de, hl
1238   9994 16 00                               ld d, 00h
1239   9996 1E 14                               ld e, $14
1240   9998 19                                  add hl, de
1241   9999 7E                                  ld a, (hl)      ;enemy id
1242   999A 6F                                  ld l, a
1243   999B                                     ;zzc
1244   999B 26 00                               ld h, 00h
1245   999D 16 00                               ld d, 00h
1246   999F 1E 08                               ld e, 08h
1247   99A1 CD FA 9D                            call mult 
1248   99A4 7D                                  ld a, l 
1249   99A5 21 AE AF                            ld hl, bonus_enemies
1250   99A8 22 C0 AD                            ld (P_), hl
1251   99AB CD E9 A3                            call jumpAfromP_    ;ix now hold correct enemy sprite
1252   99AE E1                              pop hl 
1253   99AF 44                              ld b, h ;b
1254   99B0 F1                          pop af  ;x
1255   99B1 CD AD 91                    call ionPutSprite
1256   99B4 CD B6 91                    call IONFastCopy
1257   99B7                         
1258   99B7             checkKeyAgainstFullBoard:
1259   99B7                             ;getCSC will return 0 if no key has been pressed since last call
1260   99B7 CD 14 40                    bcall(_getCSC)         ;A = KEY | CSC does not wait for keyPress | returns 0 on nokey pressed|AF/HL die 
1261   99BA 4F                          ld c, a
1262   99BB F6 00                       or %0
1263   99BD CA 16 9A                    jp z, bGetKeyEnd        ;no key pressed
1264   99C0 FE 12                       cp 12h
1265   99C2 DA 16 9A                    jp c, bGetKeyEnd        ;pressed some key off the number board
1266   99C5 FE 25                       cp 25h
1267   99C7 D2 16 9A                    jp nc, bGetKeyEnd       ;pressed key off board
1268   99CA             
1269   99CA                             ;pressed 1-9
1270   99CA 06 00                       ld b, 0
1271   99CC 21 70 AB                    ld hl, kToSK
1272   99CF             keyTOPosition:
1273   99CF 7E                          ld a, (hl)
1274   99D0 FE F0                       cp $F0
1275   99D2 28 42                       jr z, bGetKeyEnd            ;should never reach here.  if 1-9 pressed, we should find it in ktosk
1276   99D4 B9                          cp c
1277   99D5 28 04                       jr z, bktoPosFound
1278   99D7 04                          inc b
1279   99D8 23                          inc hl
1280   99D9 18 F4                       jr keyTOPosition
1281   99DB             ;b = position corresponding to key pressed
1282   99DB             bktoposFound:
1283   99DB             ;check if position contains enemy
1284   99DB 78                          ld a, b
1285   99DC F5                          push af         ;position of pressedKey [0-8]
1286   99DD CD AF 9C                        call bonusposAtoxyinhl  ;new xy for animating
1287   99E0 F1                          pop af 
1288   99E1 D1                      pop de              ;xy of board[i]
1289   99E2 E5                      push hl             ;replace with new xy
1290   99E3 21 52 AB                    ld hl, bonusBoard
1291   99E6 22 C0 AD                    ld (P_), hl
1292   99E9 CD E9 A3                    call jumpAfromP_
1293   99EC DD 7E 00                    ld a, (IX)          ;position of pressed key
1294   99EF F6 00                       or %0               ;has enemy?
1295   99F1 CA 5D 9A                    jp z, smash_miss
1296   99F4                             ;hit
1297   99F4 DD E5                       push ix             ;ix = bonusboard[i]
1298   99F6                                 ;ld b, 00h
1299   99F6                                 ;ld c, $14
1300   99F6                                 ;add ix, bc
1301   99F6 DD 7E 14                        ld a, (IX+20)
1302   99F9 DD E1                       pop ix
1303   99FB FE 01                       cp $01              ;is spikey?
1304   99FD C2 05 9A                    jp nz, smashed_enemy
1305   9A00 3E 0F                       ld a, $0F               ;hit spikey code
1306   9A02 C3 5D 9A                    jp smash_miss
1307   9A05             smashed_enemy:  
1308   9A05 DD 36 00 00                 ld (IX), 00h        ;reset smashed enemy
1309   9A09 DD 36 14 00                 ld (IX+20), 00h
1310   9A0D 3A 50 AB                    ld a, (enemyTimerMax)
1311   9A10 DD 77 0A                    ld (ix+10), a        ;reset timer
1312   9A13                             ;ld a, $0D         ;clean smash code
1313   9A13 C3 56 9A                    jp smash        ;smash clears board first    
1314   9A16                             ;enemy exists in pressed location            
1315   9A16                             ;BIT   kbdSCR, (IY+kbdFlags)
1316   9A16             bGetKeyEnd:
1317   9A16 E1                      pop hl    ;xy 
1318   9A17 C1                  pop bc        ;drawable frame #
1319   9A18 E1              pop hl            ;frame pointer
1320   9A19 78              ld a, b
1321   9A1A FE 09           cp 9
1322   9A1C 28 01           jr z, baddieOnBreak
1323   9A1E 34              inc (hl)          ;rawFrame# ++
1324   9A1F             baddieOnBreak:    
1325   9A1F 23              inc hl            ;bonusBoard[i++]
1326   9A20 E5              push hl           ;required by _BONUS_LOOP
1327   9A21 CD C9 9E            call delay    
1328   9A24               
1329   9A24 C3 0C 99            jp _BONUS_LOOP
1330   9A27             
1331   9A27             ;Sent here because user didn't smash enemy in time   
1332   9A27             ;stack: 
1333   9A27             ;   hl(xy), bc(dFrame,loc), *hl(boardPointer)
1334   9A27             ;* = need to leave at this point before jumping back into _BONUS_LOOP
1335   9A27             late_miss:
1336   9A27 E1                      pop hl      ;xy
1337   9A28 C1                  pop bc          ;drawFrame []draw something in spot missed "TOO SLOW"
1338   9A29 DD E1           pop ix              ;boardPT
1339   9A2B 3E 00           ld a, 0
1340   9A2D DD 77 00        ld (ix), a
1341   9A30 3A 50 AB        ld a, (enemyTimerMax)
1342   9A33 DD 77 0A        ld (ix+10), a        ;reset timer
1343   9A36 DD E5           push ix             ;required
1344   9A38 C5                  push bc         ;empty req for bgetkeyend
1345   9A39 E5                      push hl     ;xy
1346   9A3A DD 7E 14                ld a, (ix+20)
1347   9A3D FE 01                   cp 01h          ;is spikey guy?
1348   9A3F DD 36 14 00             ld (ix+20), $00
1349   9A43 28 41                   jr z, smash_hit
1350   9A45             
1351   9A45 21 1A 08                    ld hl, _TEXT_XY_TOPMC
1352   9A48 22 52 82                    ld (penCol), hl
1353   9A4B 21 05 AC                    ld hl, top_win_BON_2
1354   9A4E CD 81 47                    bcall(_VPuts)
1355   9A51 CD B6 91                    call IONFastCopy
1356   9A54             
1357   9A54 18 1B                       jr lose_a_heart
1358   9A56             ;f = z if miss
1359   9A56             ;f = nz if hit 
1360   9A56             smash:  
1361   9A56 E1                      pop hl 
1362   9A57 CD 72 9B                call bonus_swing_anim    ;exits with an xy pop into hl
1363   9A5A E5                      push hl                  ;    push back on stack
1364   9A5B                             ;work with live hl vals
1365   9A5B 18 29                       jr smash_hit
1366   9A5D             
1367   9A5D             smash_miss: 
1368   9A5D E1                      pop hl 
1369   9A5E CD 72 9B                call bonus_swing_anim    ;exits with an xy pop into hl
1370   9A61 E5                      push hl 
1371   9A62 21 1A 08                    LD HL, _TEXT_XY_TOPMC 
1372   9A65 22 52 82                    LD (penCol), HL
1373   9A68 21 DC AB                    LD HL, top_win_BON_0
1374   9A6B CD 81 47                    bcall(_VPuts)   
1375   9A6E CD B6 91                    call IONFastCopy
1376   9A71             lose_a_heart:    
1377   9A71 3A 8C AB                    ld A, (heartCount)
1378   9A74 FE 01                       cp 1
1379   9A76 CA 31 9B                    jp z, bonus_game_over
1380   9A79 3D                          dec a
1381   9A7A 32 8C AB                    ld (heartCount), A
1382   9A7D CD 12 A1                    call redrawHearts
1383   9A80             
1384   9A80 CD B6 91                    call IONFastCopy
1385   9A83 C3 16 9A                    jp bGetKeyEnd
1386   9A86             smash_hit:
1387   9A86 3A 8D AB                    ld a, (bopCount)
1388   9A89 3C                          inc a
1389   9A8A             
1390   9A8A 32 8D AB                    ld (bopCount), a
1391   9A8D 47                          ld b, a
1392   9A8E                             ;zxc
1393   9A8E 3A 8F AB                    ld a, (nxtBonus)
1394   9A91 B8                          cp b
1395   9A92 20 43                       jr nz, noLvlUp
1396   9A94             
1397   9A94 C6 2A                       add a, 42
1398   9A96 32 8F AB                    ld (nxtBonus), a
1399   9A99 3A 8E AB                    ld a, (bonusLvl)
1400   9A9C FE 04                       cp 4
1401   9A9E CA FB 9A                    jp z, bonus_game_win
1402   9AA1 3C                          inc a 
1403   9AA2 32 8E AB                    ld (bonusLvl), a 
1404   9AA5                             
1405   9AA5 3A 50 AB                    ld a, (enemyTimerMax)
1406   9AA8 D6 08                       sub $08
1407   9AAA 32 50 AB                    ld (enemyTimerMax), a 
1408   9AAD             
1409   9AAD                             ;level up anim
1410   9AAD             update_bonus_lvl_txt:
1411   9AAD CD 8C 9F                    call draw_layer_fillbg_top
1412   9AB0 21 1A 08                    ld hl, _TEXT_XY_TOPMC
1413   9AB3 26 01                       ld h, 1
1414   9AB5 22 52 82                    ld (penCol), hl
1415   9AB8 21 19 AC                    ld hl, top_win_BON_3
1416   9ABB CD 81 47                    bcall(_VPuts)
1417   9ABE CD B6 91                    call IONFastCopy
1418   9AC1             
1419   9AC1 21 4F 39                    ld hl, _NUM_XY_BONLVL
1420   9AC4 22 52 82                    ld (penCol), hl
1421   9AC7 26 00                       ld h, $00
1422   9AC9 3A 8E AB                    ld a, (bonusLvl)
1423   9ACC 3C                          inc a
1424   9ACD 6F                          ld l, a
1425   9ACE CD 7C 4A                    bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
1426   9AD1 CD C2 41    	            bcall(_op2toop1)            ;OP2 to OP1   
1427   9AD4 CD D4 51    	            bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
1428   9AD7                             
1429   9AD7 21 12 39    noLvlUp:        ld hl, _NUM_XY_BOPCNT
1430   9ADA 22 52 82                    ld (penCol), hl
1431   9ADD 26 00                       ld h, 00h
1432   9ADF 3A 8D AB                    ld a, (bopCount)
1433   9AE2 6F                          ld l, a
1434   9AE3 CD 7C 4A                    bcall(_setxxxxop2)          ;puts 16bit(xxxx) HL into OP2
1435   9AE6 CD C2 41    	            bcall(_op2toop1)            ;OP2 to OP1   
1436   9AE9 CD D4 51    	            bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
1437   9AEC             
1438   9AEC 21 1A 08                    LD HL, _TEXT_XY_TOPMC
1439   9AEF 22 52 82                    LD (penCol), HL
1440   9AF2 21 F1 AB                    LD HL, top_win_BON_1
1441   9AF5 CD 81 47                    bcall(_VPuts)
1442   9AF8                         
1443   9AF8 C3 16 9A                    jp bgetkeyend     
1444   9AFB             bonus_game_win:
1445   9AFB CD 70 A1                    call draw_mask_layer
1446   9AFE 21 39 AB                    LD hl, TOP_ANIM_GOAL_XY
1447   9B01             
1448   9B01                             ;call draw_layer_machine
1449   9B01 CD 8C 9F                    call draw_layer_fillbg_top
1450   9B04 21 1A 08                    ld hl, _TEXT_XY_TOPMC
1451   9B07 26 01                       ld h, 1
1452   9B09 22 52 82                    ld (penCol), hl
1453   9B0C 21 2D AC                    ld hl, top_win_BON_WIN
1454   9B0F CD 81 47                    bcall(_VPuts)
1455   9B12 CD A3 9F                    call draw_layer_fillbg_low
1456   9B15 21 06 38                    ld HL, _NUM_XY_MONEY
1457   9B18 22 52 82                    LD (PenCol), HL
1458   9B1B 21 97 AC                    LD HL, text_bot_expl3
1459   9B1E CD 81 47                    bcall(_VputS)
1460   9B21              
1461   9B21 CD B6 91                    call IONFastCopy        
1462   9B24 3E FD                       ld A, %11111101
1463   9B26 D3 01                       out (1), A
1464   9B28 DB 01                       in a, (1)
1465   9B2A E6 20                       and $20
1466   9B2C CA 31 9B                    jp z, bonus_game_over
1467   9B2F 18 CA                       jr bonus_game_win
1468   9B31             
1469   9B31             bonus_game_over:
1470   9B31 3A 8D AB                    ld a, (bopCount)
1471   9B34             
1472   9B34 6F                          ld l, a
1473   9B35 26 00                       ld h, 00h
1474   9B37 3A 22 AB                    ld a, (_multiplier)
1475   9B3A 5F                          ld e, a
1476   9B3B 16 00                       ld d, 00h
1477   9B3D CD FA 9D                    call mult
1478   9B40 16 00                       ld d, 00h
1479   9B42 1E 22                       ld e, $22
1480   9B44 CD FA 9D                    call mult
1481   9B47 19                          add hl, de
1482   9B48 ED 5B A7 AD                 ld de, (money)
1483   9B4C 22 AB AD                    ld (cur_win_total), hl
1484   9B4F 19                          add hl, de 
1485   9B50 22 A9 AD                    ld (new_money), hl 
1486   9B53             
1487   9B53 CD 5B 51                    bcall(_GrBufClr)
1488   9B56                             
1489   9B56             ;#IFDEF debug
1490   9B56             ;                call printQRCode
1491   9B56             ;#ENDIF
1492   9B56             
1493   9B56                             ;reset bonusboard/reset timers
1494   9B56 CD 26 9F                    call resetBonusInitializers
1495   9B59 CD 8F A3                    call draw_rmenu
1496   9B5C                                            ;animate bonus counting
1497   9B5C 3A 1C AB                    ld A, (bt_flags)
1498   9B5F              ;isFirstGame:    .EQU     0
1499   9B5F             ;isSpinning:     .EQU     1
1500   9B5F             ;isCounting:     .EQU     2
1501   9B5F             ;isWaiting:      .EQU     3
1502   9B5F             ;isWin:          .EQU     4
1503   9B5F             ;isBonus:        .EQU     5
1504   9B5F             ;is1stBonusRoll: .EQU     6
1505   9B5F             ;cleartop:           .EQU     7
1506   9B5F                             ;flags on
1507   9B5F F6 D4                       or %11010100
1508   9B61                             ;flags off
1509   9B61 E6 D5                       and %11010101
1510   9B63 32 1C AB                    LD (bt_flags), A
1511   9B66                             ;ld a, (bt_flags2)
1512   9B66                             ;or %1 ;isFromBonus = true
1513   9B66                             ;ld (bt_flags2), a
1514   9B66             
1515   9B66             
1516   9B66 E1                      pop hl
1517   9B67 C1                  pop bc
1518   9B68 D1              pop de
1519   9B69 21 78 B2                    ld hl, slot_win_states
1520   9B6C 22 BC AD                    ld (data_p+6), hl
1521   9B6F                             ;hack the board redraw to think we are performing a normal stopspin
1522   9B6F C3 84 94                    jp skip_chk_win
1523   9B72             bonus_swing_anim:
1524   9B72 7D                      ld a, l
1525   9B73 6F                      ld l, a
1526   9B74 2D                      dec l
1527   9B75 7C                      ld a, h  
1528   9B76 C6 03                   add a, 3
1529   9B78 E5                      push hl
1530   9B79 06 0A                       ld b, 10
1531   9B7B 0E 01                       ld c, 1
1532   9B7D 26 01                       ld h, 01h  ;sprite off
1533   9B7F DD 21 E2 AE                 ld ix, _10x16_off     
1534   9B83 CD 35 9E                    call put_any_Sprite
1535   9B86 CD B6 91                    call IONFastCopy
1536   9B89 E1                      pop hl 
1537   9B8A E5                      push hl
1538   9B8B 7C                          LD A, H
1539   9B8C 06 09                       LD B, 9
1540   9B8E 0E 02                       LD C, 2       ;12
1541   9B90 26 03                       LD H, 3       ;xor
1542   9B92 DD 21 E6 AF                 LD IX, bonus_hammer1
1543   9B96 CD 35 9E                    call put_any_Sprite ;putany
1544   9B99 CD B6 91                    call IONFastCopy
1545   9B9C E1                      pop hl
1546   9B9D E5                      push hl
1547   9B9E 7C                          LD A, H
1548   9B9F 06 09                       LD B, 9
1549   9BA1 0E 02                       LD C, 2       ;12
1550   9BA3 26 03                       LD H, 3       ;xor
1551   9BA5 DD 21 E6 AF                 LD IX, bonus_hammer1
1552   9BA9 CD 35 9E                    call put_any_Sprite ;putany
1553   9BAC CD B6 91                    call IONFastCopy
1554   9BAF E1                      pop hl
1555   9BB0 E5                      push hl
1556   9BB1 7C                          LD A, H
1557   9BB2 06 09                       LD B, 9
1558   9BB4 0E 02                       LD C, 2       ;12
1559   9BB6 26 03                       LD H, 3       ;xor
1560   9BB8 DD 21 FE AF                 LD IX, bonus_hammer2
1561   9BBC CD 35 9E                    call put_any_Sprite ;putany
1562   9BBF CD B6 91                    call IONFastCopy
1563   9BC2 E1                      pop hl
1564   9BC3 E5                      push hl
1565   9BC4 7C                          LD A, H
1566   9BC5 06 09                       LD B, 9
1567   9BC7 0E 02                       LD C, 2       ;12
1568   9BC9 26 03                       LD H, 3       ;xor
1569   9BCB DD 21 FE AF                 LD IX, bonus_hammer2
1570   9BCF CD 35 9E                    call put_any_Sprite ;putany
1571   9BD2 CD B6 91                    call IONFastCopy
1572   9BD5 E1                      pop hl
1573   9BD6 C9                      ret
1574   9BD7 25                      dec h
1575   9BD8 25                      dec h
1576   9BD9             
1577   9BD9 E5                      push hl   
1578   9BDA 7C                          LD A, H
1579   9BDB 06 0C                       LD B, 12
1580   9BDD 0E 02                       LD C, 2       ;8x8
1581   9BDF 26 03                       LD H, 3       ;xor
1582   9BE1 DD 21 16 B0                 LD IX, bonus_hammer3
1583   9BE5 CD 35 9E                    call put_any_Sprite ;putany
1584   9BE8 CD B6 91                    call IONFastCopy
1585   9BEB E1                      pop hl
1586   9BEC E5                      push hl
1587   9BED 7C                          LD A, H
1588   9BEE 06 0C                       LD B, 12
1589   9BF0 0E 02                       LD C, 2       ;8x8
1590   9BF2 26 03                       LD H, 3       ;xor
1591   9BF4 DD 21 16 B0                 LD IX, bonus_hammer3
1592   9BF8 CD 35 9E                    call put_any_Sprite ;putany
1593   9BFB E1                      pop hl          ;xy
1594   9BFC E5                      push hl
1595   9BFD                        ; call bonus_swing_anim
1596   9BFD 7C                          LD A, H
1597   9BFE 06 0C                       LD B, 12
1598   9C00 0E 02                       LD C, 2       ;12
1599   9C02 26 03                       LD H, 3       ;xor
1600   9C04 DD 21 30 B0                 LD IX, bonus_hammer4
1601   9C08 CD 35 9E                    call put_any_Sprite ;putany
1602   9C0B CD B6 91                    call IONFastCopy
1603   9C0E E1                      pop hl
1604   9C0F E5                      push hl
1605   9C10 7C                          LD A, H
1606   9C11 06 0C                       LD B, 12
1607   9C13 0E 02                       LD C, 2       ;8x8
1608   9C15 26 03                       LD H, 3       ;xor
1609   9C17 DD 21 30 B0                 LD IX, bonus_hammer4
1610   9C1B CD 35 9E                    call put_any_Sprite ;putany
1611   9C1E E1                      pop hl
1612   9C1F E5                      push hl
1613   9C20 7C                          LD A, H
1614   9C21 06 0C                       LD B, 12
1615   9C23 0E 02                       LD C, 2       ;8x8
1616   9C25 26 03                       LD H, 3       ;xor
1617   9C27 DD 21 4A B0                 LD IX, bonus_hammer5
1618   9C2B CD 35 9E                    call put_any_Sprite ;putany
1619   9C2E CD B6 91                    call IONFastCopy
1620   9C31 E1                      pop hl
1621   9C32 E5                      push hl
1622   9C33 7C                          LD A, H
1623   9C34 06 0C                       LD B, 12
1624   9C36 0E 02                       LD C, 2       ;8x8
1625   9C38 26 03                       LD H, 3       ;xor
1626   9C3A DD 21 4A B0                 LD IX, bonus_hammer5
1627   9C3E CD 35 9E                    call put_any_Sprite ;putany
1628   9C41 E1                      pop hl
1629   9C42 E5                      push hl
1630   9C43 7C                          LD A, H
1631   9C44 06 0C                       LD B, 12
1632   9C46 0E 02                       LD C, 2       ;8x8
1633   9C48 26 03                       LD H, 3       ;xor
1634   9C4A DD 21 66 B0                 LD IX, bonus_hammer6
1635   9C4E CD 35 9E                    call put_any_Sprite ;putany
1636   9C51 CD B6 91                    call IONFastCopy
1637   9C54 E1                      pop hl
1638   9C55 E5                      push hl
1639   9C56 7C                          LD A, H
1640   9C57 06 0C                       LD B, 12
1641   9C59 0E 02                       LD C, 2       ;8x8
1642   9C5B 26 03                       LD H, 3       ;xor
1643   9C5D DD 21 66 B0                 LD IX, bonus_hammer6
1644   9C61 CD 35 9E                    call put_any_Sprite ;putany
1645   9C64 E1                      pop hl          ;xy
1646   9C65 E5                      push hl
1647   9C66                        ; call bonus_swing_anim
1648   9C66 7C                          LD A, H
1649   9C67 06 0C                       LD B, 12
1650   9C69 0E 02                       LD C, 2       ;12
1651   9C6B 26 03                       LD H, 3       ;xor
1652   9C6D DD 21 7E B0                 LD IX, bonus_hammer7
1653   9C71 CD 35 9E                    call put_any_Sprite ;putany
1654   9C74 CD B6 91                    call IONFastCopy
1655   9C77 E1                      pop hl
1656   9C78 E5                      push hl
1657   9C79 7C                          LD A, H
1658   9C7A 06 0C                       LD B, 12
1659   9C7C 0E 02                       LD C, 2       ;8x8
1660   9C7E 26 03                       LD H, 3       ;xor
1661   9C80 DD 21 7E B0                 LD IX, bonus_hammer7
1662   9C84 CD 35 9E                    call put_any_Sprite ;putany
1663   9C87 E1                      pop hl
1664   9C88 E5                      push hl
1665   9C89 7C                          LD A, H
1666   9C8A 06 0C                       LD B, 12
1667   9C8C 0E 02                       LD C, 2       ;8x8
1668   9C8E 26 03                       LD H, 3       ;xor
1669   9C90 DD 21 96 B0                 LD IX, bonus_hammer8
1670   9C94 CD 35 9E                    call put_any_Sprite ;putany
1671   9C97 CD B6 91                    call IONFastCopy
1672   9C9A E1                      pop hl
1673   9C9B E5                      push hl
1674   9C9C 7C                          LD A, H
1675   9C9D 06 0C                       LD B, 12
1676   9C9F 0E 02                       LD C, 2       ;8x8
1677   9CA1 26 03                       LD H, 3       ;xor
1678   9CA3 DD 21 96 B0                 LD IX, bonus_hammer8
1679   9CA7 CD 35 9E                    call put_any_Sprite ;putany
1680   9CAA CD B6 91                    call IONFastCopy
1681   9CAD E1                      pop hl
1682   9CAE C9                          ret
1683   9CAF                         ;pop af              ;hit miss
1684   9CAF             
1685   9CAF             ;args:
1686   9CAF             ;   A = a board position[0-8]
1687   9CAF             ;returns:
1688   9CAF             ;   HL = (h=x,l=y) coords of A
1689   9CAF             bonusPosAtoXYinHL:
1690   9CAF 21 3C AB        LD HL, BON_Y
1691   9CB2 22 C0 AD        LD (P_), HL
1692   9CB5 CD E9 A3        call jumpAfromP_
1693   9CB8 DD 6E 00        ld l, (ix)          ;y for sprite
1694   9CBB 16 00           ld d, 0
1695   9CBD 1E 0A           ld e, 0Ah
1696   9CBF DD 19           add ix, de
1697   9CC1 DD 7E 00        ld a, (ix)          ;x  
1698   9CC4 67              ld h, a           ;hl = x,y
1699   9CC5 C9              ret   
1700   9CC6             
1701   9CC6             
1702   9CC6             ;147AD
1703   9CC6             ;258BE
1704   9CC6             ;369CF
1705   9CC6             
1706   9CC6             ;log win data into slot_win_states (a,c,b,  a,c,b  ...)
1707   9CC6             ;   (COORD) temporarily holds the row of winning offsets to light up
1708   9CC6             ;   a = line number of win   ;c = no. of winning symbols in line ;b = symbolID
1709   9CC6             win_log: 
1710   9CC6 21 3A 8A                   ld HL, COORD         
1711   9CC9 7E                         ld a, (HL)               ;A = current winning payline#
1712   9CCA             
1713   9CCA 2A BC AD    win_log_bonus: ld HL, (data_p+6)        ;data_p6 holds offset for storing data INTO slot_win_states 
1714   9CCD 77                         ld (HL), a               ;Record winning payline# in slot_win_states db
1715   9CCE                            ;winline print
1716   9CCE 3A 1C AB                   ld a, (bt_flags)
1717   9CD1                            ;W C              ;turn win & counting on 
1718   9CD1 F6 14                      or %10100
1719   9CD3 32 1C AB                   ld (bt_flags), a
1720   9CD6             
1721   9CD6 23                         inc hl
1722   9CD7 71                         ld (HL), c               ;store inArow into slot_win_states (0,1)
1723   9CD8 23                         inc hl
1724   9CD9 70                         ld (HL), b               ;symbolID-needed for printing win data
1725   9CDA 23                         inc hl                   ;skip to win_total
1726   9CDB 22 BC AD                   ld (data_p+6), HL
1727   9CDE 78                         ld a, b                  ;get symbol id into A for _pay offset jump
1728   9CDF                            ;----------------calculate winnings->(p6[4])------------
1729   9CDF             
1730   9CDF 21 29 AE                    ld HL, sym_o
1731   9CE2 22 C0 AD                    ld (P_), HL
1732   9CE5                             ;ld b, c
1733   9CE5 CD E9 A3                    call jumpAfromP_
1734   9CE8 DD 7E 00                    ld a, (IX)
1735   9CEB C6 02                       add a, _PAY
1736   9CED             
1737   9CED 21 CE AD                    ld HL, symbols
1738   9CF0 22 C0 AD                    LD (P_), HL
1739   9CF3 CD E9 A3                    call jumpAfromP_
1740   9CF6 DD 7E 00                    ld a, (IX)                  ;pay 
1741   9CF9             
1742   9CF9 5F                          ld E, A
1743   9CFA 16 00                       LD D, 00h
1744   9CFC 69                          ld L, C
1745   9CFD 26 00                       ld H, 00h
1746   9CFF CD FA 9D                    call mult                   ;total of current win
1747   9D02             
1748   9D02                             ;x multiplier
1749   9D02 3A 22 AB                    ld a, (_multiplier)
1750   9D05 5F                          ld e, a
1751   9D06 16 00                       ld d, 00h
1752   9D08 CD FA 9D                    call mult                   ;updated total
1753   9D0B             
1754   9D0B 7D                          LD A, L
1755   9D0C ED 5B BC AD                 LD DE, (data_p+6)
1756   9D10 12                          LD (DE), A
1757   9D11 13                          INC DE
1758   9D12 7C                          LD A, H
1759   9D13 12                          LD (DE), A
1760   9D14 13                          INC DE
1761   9D15 ED 53 BC AD                 LD (data_p+6), DE
1762   9D19             
1763   9D19                         ;**we don't animate here, because we are waiting to poll all winning results
1764   9D19                         ;**first, in the _win_anim_array - then draw them at the same time w/ draw_arr_at_arr
1765   9D19 C9                         ret
1766   9D1A             
1767   9D1A              
1768   9D1A             ;fill up the win_anim_array, and prep for XORing of winning symbols               
1769   9D1A             classify_wins:
1770   9D1A             ;if there is a win, check to see if top symbols are in alignment for QR bonus.
1771   9D1A 3A B4 AD                    ld a, (nftflags)
1772   9D1D CB 47                       BIT isNFTeligible, a 
1773   9D1F             
1774   9D1F             
1775   9D1F C4 CA A4                    call nz, qrBonusWin
1776   9D22             
1777   9D22                             ;while slot_win_states !=0,
1778   9D22 21 78 B2                    ld HL, slot_win_states
1779   9D25 22 BC AD                    ld (data_p+6), HL
1780   9D28             cw_re_entry:
1781   9D28 46                          ld b, (HL)     ;line number of first win
1782   9D29 04                          inc B          ;line# is saved as 0 index for ease of earlier algos--reset base.
1783   9D2A 23                          inc hl
1784   9D2B 4E                          ld c, (HL)     ;3,4, or 5 in a row
1785   9D2C 23                          inc hl         ;skip symbolID
1786   9D2D 23                          inc hl         ;skip total
1787   9D2E 23                          inc hl         ;skip 2nd byte of total
1788   9D2F 22 BC AD                    ld (data_p+6), HL
1789   9D32 78                          ld a, b
1790   9D33                             ;get to the line number
1791   9D33 FE 01                       cp 1            ;check if on the first line *A=slot_win_states[0], first win line#
1792   9D35             
1793   9D35 3E 00                       ld a, 0
1794   9D37 05                          dec B           ;get 0 indexed   
1795   9D38 28 04                       jr z, skiplo   
1796   9D3A             jYpp:           
1797   9D3A C6 06                       add a, 6             
1798   9D3C 10 FC                       djnz jYpp
1799   9D3E             
1800   9D3E             ;<-----------------A=offset to reach Y axis of pay_rules array.
1801   9D3E             
1802   9D3E             ;for (winStates[j])
1803   9D3E             ;   for (xInArow)
1804   9D3E             ;       slot_cur_reel_state[pay_rule[i]] -> win_anim_array[pay_rule[i]]
1805   9D3E                                        ;
1806   9D3E             skiplo:     
1807   9D3E             ;19EFA 
1808   9D3E 21 AF B2                   LD HL, pay_rules                  ;HL = (HL + DE(Offset))
1809   9D41 22 C0 AD                   LD (P_), HL
1810   9D44 CD E9 A3                   CALL jumpAfromP_
1811   9D47 DD 22 B6 AD                LD (data_p), IX  
1812   9D4B DD 7E 00                   LD A, (IX)                       ;pay_rule[i]
1813   9D4E             
1814   9D4E             ;    for(C = i)               symbolID          
1815   9D4E             ;        slot_cur_reel_state[(data_p[i])] -> win_anim_array[(data_p[i])                  
1816   9D4E 3D                         DEC A                            ;adjust offset 
1817   9D4F 21 DA B1                   LD HL, slot_chk_win_state       ;HL = (HL + DE(Offset))
1818   9D52 22 C0 AD                   LD (P_), HL
1819   9D55 CD E9 A3                   CALL jumpAfromP_
1820   9D58 DD 22 B8 AD                LD (data_p+2), IX                ;symbolID pointer
1821   9D5C             
1822   9D5C             ;      for(C = i)
1823   9D5C             ;          (data_p+2) -> win_anim_array[(data_p)]
1824   9D5C             ;------------------
1825   9D5C             val_to_aro:     
1826   9D5C                            ;zzz offsets are showing as 2, 5, 8, 11, 14 (wrong winning line than copied from)
1827   9D5C 2A B6 AD                   LD HL, (data_p)                  ;we pulled symbol from _state+(data_p), add to _win_anim+(data_p)
1828   9D5F                            ;DEC L                            ;adjust indexing
1829   9D5F 7E          fill_sym2wins: LD A, (HL)                       ;A = position where symbol was from/needs to go to
1830   9D60 3D                         DEC A                            ;adjust indexing
1831   9D61 21 28 B2                   LD HL, win_anim_array            ;HL = (HL + DE(Offset))
1832   9D64 22 C0 AD                   LD (P_), HL
1833   9D67 CD E9 A3                   CALL jumpAfromP_
1834   9D6A DD 22 BA AD                LD (data_p+4), IX  
1835   9D6E                 
1836   9D6E             ;--------------------------------------
1837   9D6E             ;(data_p+2)                /////////
1838   9D6E             ; symbolID  -> (data_p+4)  //
1839   9D6E             ;---------------------------
1840   9D6E             
1841   9D6E 2A B8 AD                    LD HL, (data_p+2)               ;(data_p+2)                             
1842   9D71 7E                          LD A, (HL)                      ;A = symbol to copy into win_anim_array,
1843   9D72                             ;**Symbol correct on 1st iteration, repeats wrong after 2nd iteration.
1844   9D72 DD 77 00                    LD (IX), A                      ;copy symbol in position                                               
1845   9D75 0D                          dec C                                        
1846   9D76 2A B6 AD                    LD HL, (data_p)                
1847   9D79 23                          inc HL                          ;point to next pay_rule item
1848   9D7A 22 B6 AD                    LD (data_p), HL
1849   9D7D 3E 00                       LD A, 0
1850   9D7F B9                          CP C
1851   9D80 20 DD                       jr nz, fill_sym2wins                ;need to jump to next pay_rule item ->
1852   9D82             
1853   9D82 2A BC AD                    ld HL, (data_p+6)                   ;pointing to L in H,L
1854   9D85 23                          inc hl                              ;skip total
1855   9D86             
1856   9D86 7E                          ld a, (hl)
1857   9D87 22 BC AD                    LD (data_p+6), HL
1858   9D8A FE 0F                       cp $0F
1859   9D8C C2 28 9D                    jp nz, cw_re_entry                  ;jump to next pay_rule row   \/
1860   9D8F             
1861   9D8F CD C9 9D                    call get_total_win_of_spin          ;does all the math for counting & winimation
1862   9D92                             ;reset data_p6 pointer
1863   9D92 21 78 B2                    LD HL, slot_win_states
1864   9D95 22 BC AD                    LD (data_p+6), HL
1865   9D98             
1866   9D98 C9                          ret
1867   9D99             ;prints B integers from HL onto the display                
1868   9D99             print_arrayOfBytes:
1869   9D99 7E          pa_lp:          ld a, (HL)
1870   9D9A 23                          inc  HL
1871   9D9B E5                          push HL
1872   9D9C C5                          push bc
1873   9D9D CD 74 4A                    bcall(_setxxop1)            ;place A into OP1
1874   9DA0 CD D4 51    	            bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)
1875   9DA3 E1                          pop HL
1876   9DA4 C1                          pop bc
1877   9DA5 05                          dec b
1878   9DA6 78                          ld a, b
1879   9DA7 FE 01                       cp 01h
1880   9DA9 20 EE                       jr nz, pa_lp 
1881   9DAB CD B6 91                    call IONfastCopy
1882   9DAE C9                          ret
1883   9DAF             
1884   9DAF             ;animates money counting up towards new total
1885   9DAF             _count_up:      ;HL is new total, to count to
1886   9DAF                             ;DE is current balance
1887   9DAF 2A A9 AD                    LD HL, (new_money)
1888   9DB2 ED 5B A7 AD                 LD DE, (money)
1889   9DB6 13                          INC DE
1890   9DB7 ED 53 A7 AD                 LD (money), DE
1891   9DBB ED 52                       SBC HL, DE
1892   9DBD 28 01                       jr z, moneyCounted
1893   9DBF             
1894   9DBF C9                          ret
1895   9DC0             moneyCounted:
1896   9DC0 3A 1C AB                    ld a, (bt_flags)
1897   9DC3 CB 97                       res isCounting, a
1898   9DC5 32 1C AB                    ld (bt_flags), a 
1899   9DC8 C9                          ret     
1900   9DC9             
1901   9DC9             ;call this once you've classified all wins
1902   9DC9             get_total_win_of_spin:
1903   9DC9 21 78 B2                    LD HL, slot_win_states
1904   9DCC 22 BC AD                    LD (data_p+6), HL
1905   9DCF             
1906   9DCF 23          g_t_l:          inc hl
1907   9DD0 23                          inc hl
1908   9DD1 23                          inc hl
1909   9DD2 E5                          push hl
1910   9DD3 7E                          LD A, (HL)         ;get HL 16bit total into DE
1911   9DD4 23                          INC HL
1912   9DD5 5F                          LD E, A
1913   9DD6 7E                          LD A, (HL)
1914   9DD7 57                          LD D, A
1915   9DD8             
1916   9DD8 2A AB AD                    LD HL, (cur_win_total)
1917   9DDB                          
1918   9DDB 19                          ADD HL, DE
1919   9DDC             
1920   9DDC 22 AB AD                    LD (cur_win_total), HL      ;total $ of payline win
1921   9DDF                     
1922   9DDF E1                          pop hl
1923   9DE0             
1924   9DE0 23                          inc hl                      ;2nd byte
1925   9DE1 23                          inc hl                      ;next win item
1926   9DE2             
1927   9DE2 7E                          ld a, (HL)
1928   9DE3 FE 0F                       cp $0F
1929   9DE5 20 E8                       jr nz, g_t_l
1930   9DE7                             
1931   9DE7 01 06 38                    LD    BC, _NUM_XY_MONEY
1932   9DEA ED 43 52 82                 LD    (PenCol), BC              ; PenCol comes before PenRow-  
1933   9DEE ED 5B A7 AD                 LD    DE, (money)
1934   9DF2 2A AB AD                    LD    HL, (cur_win_total)
1935   9DF5 19                          ADD   HL, DE
1936   9DF6 22 A9 AD                    LD (new_money), HL
1937   9DF9             
1938   9DF9 C9                          ret      
1939   9DFA             
1940   9DFA             ;16bit multiplication routine from ZiLog
1941   9DFA             ;de * hl -> hl
1942   9DFA             mult:
1943   9DFA 06 10                       ld   b, 16
1944   9DFC 4A                          ld   c, d
1945   9DFD 7B                          ld   a, e
1946   9DFE EB                          ex   de, hl
1947   9DFF 21 00 00                    ld   hl, 0
1948   9E02 CB 39       mloop:          srl  c
1949   9E04 1F                          rra
1950   9E05 30 01                       jr   nc, noadd
1951   9E07 19                          add  hl, de
1952   9E08             
1953   9E08 EB          noadd:          ex   de, hl
1954   9E09 29                          add  hl, hl
1955   9E0A EB                          ex   de, hl
1956   9E0B 10 F5                       djnz mloop
1957   9E0D C9                          ret
1958   9E0E                      
1959   9E0E             ;Put large sprite
1960   9E0E             ;B = height
1961   9E0E             ;C = width / 8
1962   9E0E             ; l=yc
1963   9E0E             ; a=xc
1964   9E0E             ; ix holds pointer
1965   9E0E             XORSPR_L:
1966   9E0E E5                        push HL
1967   9E0F 21 7E AE                  LD HL, bonus_symbol
1968   9E12 DD 22 C0 AD               LD (P_), IX
1969   9E16 ED 5B C0 AD               LD DE, (P_)
1970   9E1A ED 52                     SBC HL, DE
1971   9E1C E1                        pop HL
1972   9E1D CA 28 9E                  jp z, XORSPR_BONUS
1973   9E20 06 08                     LD   B, 8
1974   9E22 0E 01                     LD   C, 1              
1975   9E24 CD B0 91                  CALL IonLargeSprite
1976   9E27 C9                        ret
1977   9E28             
1978   9E28             
1979   9E28 06 0A       XORSPR_BONUS: LD B, 10
1980   9E2A 0E 02                     LD C, 2
1981   9E2C 3D                        dec a
1982   9E2D 3D                        dec a
1983   9E2E 3D                        dec a
1984   9E2F 3D                        dec a
1985   9E30 2D                        dec l
1986   9E31 CD B0 91                  CALL IonLargeSprite
1987   9E34 C9                        ret                   
1988   9E35             
1989   9E35             ;fully customizable sprite routine
1990   9E35             ;   any size, and/or/xor
1991   9E35             ;-----> Draw a picture
1992   9E35             ;Input:	ix->sprite
1993   9E35             ;	a=x
1994   9E35             ;	l=y
1995   9E35             ;	b=height	(in pixels)
1996   9E35             ;	c=width		(in bytes, e.g. 2 would be 16)
1997   9E35             ;   h=off/on/xor
1998   9E35             ;     (1=off/2=on/else=xor)
1999   9E35             
2000   9E35             ;Output: nothing
2001   9E35             ; All registers are destroyed except bc', de', hl'
2002   9E35             ; 
2003   9E35             ; Used for clear masks.  0's will override
2004   9E35             put_any_Sprite:
2005   9E35 F5              push af   ;x coord
2006   9E36 7C               ld a, h
2007   9E37 FE 01             cp 01h
2008   9E39 C2 47 9E          jp nz, _OnorXor
2009   9E3C 3E A2             ld a, $A2        ;and d
2010   9E3E 32 90 9E          ld (_on_off_d),a
2011   9E41 3C                inc a
2012   9E42 32 94 9E          ld (_on_off_e),a ;and e
2013   9E45 18 1A             jr psprite_begin
2014   9E47             _OnorXor:
2015   9E47 7C               ld a, h
2016   9E48 FE 02            cp 02h
2017   9E4A C2 58 9E         jp nz, _xor_sprite
2018   9E4D 3E B2            ld a, $B2        ;or d
2019   9E4F 32 90 9E         ld (_on_off_d),a
2020   9E52 3C               inc a
2021   9E53 32 94 9E         ld (_on_off_e),a ;or e
2022   9E56 18 09            jr psprite_begin
2023   9E58             _xor_sprite: 
2024   9E58 3E AA            ld a, $AA        ;xor d
2025   9E5A 32 90 9E         ld (_on_off_d),a
2026   9E5D 3C               inc a
2027   9E5E 32 94 9E         ld (_on_off_e),a ;or e  
2028   9E61             psprite_begin:
2029   9E61 F1              pop af            ;og vals from caller
2030   9E62 F3          	di
2031   9E63 08          	ex	af,af'
2032   9E64 79          	ld	a,c
2033   9E65 F5          	push	af
2034   9E66 08          	ex	af,af'
2035   9E67 5D          	ld	e,l
2036   9E68 26 00       	ld	h,$00
2037   9E6A 54          	ld	d,h
2038   9E6B 19          	add	hl,de
2039   9E6C 19          	add	hl,de
2040   9E6D 29          	add	hl,hl
2041   9E6E 29          	add	hl,hl
2042   9E6F 5F          	ld	e,a
2043   9E70 E6 07       	and	$07
2044   9E72 4F          	ld	c,a
2045   9E73 CB 3B       	srl	e
2046   9E75 CB 3B       	srl	e
2047   9E77 CB 3B       	srl	e
2048   9E79 19          	add	hl,de
2049   9E7A 11 29 8E    	ld	de,gbuf
2050   9E7D 19          	add	hl,de
2051   9E7E             anySpriteLoop1:
2052   9E7E E5          	push	hl
2053   9E7F             anySpriteLoop2:
2054   9E7F DD 56 00    	ld	d,(ix)
2055   9E82 1E 00       	ld	e,$00
2056   9E84 79          	ld	a,c
2057   9E85 B7          	or	a
2058   9E86 28 07       	jr	z,anySpriteSkip1
2059   9E88             anySpriteLoop3:
2060   9E88 CB 3A       	srl	d
2061   9E8A CB 1B       	rr	e
2062   9E8C 3D          	dec	a
2063   9E8D 20 F9       	jr	nz,anySpriteLoop3
2064   9E8F             anySpriteSkip1:
2065   9E8F 7E          	ld	a,(hl)
2066   9E90 AA          _on_off_d:	xor	d
2067   9E91 77          	ld	(hl),a
2068   9E92 23          	inc	hl
2069   9E93 7E          	ld	a,(hl)
2070   9E94 AB          _on_off_e:	xor	e
2071   9E95 77          	ld	(hl),a
2072   9E96 DD 23       	inc	ix
2073   9E98 08          	ex	af,af'
2074   9E99 3D          	dec	a
2075   9E9A F5          	push	af
2076   9E9B 08          	ex	af,af'
2077   9E9C F1          	pop	af
2078   9E9D 20 E0       	jr	nz,anySpriteLoop2
2079   9E9F E1          	pop	hl
2080   9EA0 F1          	pop	af
2081   9EA1 F5          	push	af
2082   9EA2 08          	ex	af,af'
2083   9EA3 11 0C 00    	ld	de,$0C
2084   9EA6 19          	add	hl,de
2085   9EA7 10 D5       	djnz	anySpriteLoop1
2086   9EA9 F1          	pop	af
2087   9EAA C9          	ret
2088   9EAB             
2089   9EAB             
2090   9EAB             ;-----> Draw a sprite
2091   9EAB             ; b=size of sprite
2092   9EAB             ; l=yc
2093   9EAB             ; a=xc
2094   9EAB             ; ix holds pointer
2095   9EAB             ;Output:   Sprite is XORed to the graph buffer.
2096   9EAB             ;ix->next sprite
2097   9EAB             ;Destroys: af bc de hl ix
2098   9EAB             
2099   9EAB             XORSPR:
2100   9EAB 06 08                       LD   B,8                         ;size of the sprite
2101   9EAD CD AD 91                    CALL ionPutSprite
2102   9EB0                             ;CALL ionPutSprite
2103   9EB0 C9                          RET
2104   9EB1             ;------
2105   9EB1             buffer_to_backup:  
2106   9EB1 21 29 8E                    LD   HL,PLOTSSCREEN		;save whole screen as background
2107   9EB4 11 65 82                    LD   DE,SAVESSCREEN
2108   9EB7 01 00 03                    LD   BC,768
2109   9EBA ED B0                       LDIR
2110   9EBC C9                          ret
2111   9EBD             backup_to_buffer:   
2112   9EBD 21 65 82                    LD   HL,SAVESSCREEN
2113   9EC0 11 29 8E                    LD   DE,PLOTSSCREEN
2114   9EC3 01 00 03                    LD   BC,768
2115   9EC6 ED B0                       LDIR
2116   9EC8 C9                          RET
2117   9EC9             
2118   9EC9 06 14       DELAY:         LD   B,20
2119   9ECB C5          LOOP1:         PUSH BC
2120   9ECC 06 FF                      LD   B,255
2121   9ECE 10 FE       LOOP2:         DJNZ LOOP2
2122   9ED0 C1                         POP  BC
2123   9ED1 10 F8                      DJNZ LOOP1
2124   9ED3 C9                         RET
2125   9ED4                 
2126   9ED4             genStore_15_rng:  
2127   9ED4 21 0E B2                   LD HL, slot_cur_reel_state
2128   9ED7 22 B6 AD                   LD (data_p), hl
2129   9EDA 11 F4 B1                   LD DE, slot_saved_reel_state
2130   9EDD 01 19 00                   LD BC, 25    
2131   9EE0 ED B0                      LDIR                     ;move previous board to saved area.
2132   9EE2                            
2133   9EE2             new_num:
2134   9EE2 CD 0A 9F                   CALL rng8toA             ;8bit rand -> A register, HL becomes new seed                
2135   9EE5 1E 01                      ld e, 1                  ;offset counter, start at 1 instead of 0, to not overflow 
2136   9EE7 21 C6 AD                   ld HL, ratio_table    
2137   9EEA                            ;ld a, 20
2138   9EEA 56                         LD d, (HL)               ;first %value in the ratio table (0-40)/255->B
2139   9EEB             roll_prob:                  
2140   9EEB BA                         cp d
2141   9EEC DA F5 9E                   jp c, rollz
2142   9EEF 23                         inc hl
2143   9EF0 56                         ld d, (HL)
2144   9EF1 1C                         inc e
2145   9EF2 C2 EB 9E                   jp nz, roll_prob
2146   9EF5             rollz:        
2147   9EF5                            ;ld a, e                             ;Loading 0 into A overflows _setxxop1() 
2148   9EF5 2A B6 AD                   LD  HL, (data_p)                     ;_curstate address
2149   9EF8 1C                         INC E
2150   9EF9 73                         LD (HL), e                           ;new data -> indirectly into _curstate 
2151   9EFA 23                         INC HL                               ;HL     now points to _curstate+1 address
2152   9EFB 22 B6 AD                   LD (data_p), HL                      ;data_p now points to _curstate+1 address
2153   9EFE 7E                         ld a, (HL)
2154   9EFF FE 0F                      cp $0F
2155   9F01 20 DF                      jr nz, new_num
2156   9F03                            
2157   9F03             
2158   9F03 21 0E B2                   ld hl, slot_cur_reel_state
2159   9F06 22 B6 AD                   ld (data_p), hl
2160   9F09 C9                         ret 
2161   9F0A             
2162   9F0A             
2163   9F0A             
2164   9F0A             rng8toA:
2165   9F0A             ;This code snippet is 9 bytes and 43cc
2166   9F0A             ;Inputs:
2167   9F0A             ;   HL is the input seed and must be non-zero
2168   9F0A             ;Outputs:
2169   9F0A             ;   A is the 8-bit pseudo-random number
2170   9F0A             ;   HL is the new seed value (will be non-zero)
2171   9F0A                               ;opcode cc
2172   9F0A 3A 34 AE                    LD a, (rng_seed)
2173   9F0D 67                          LD h, a
2174   9F0E 3A 35 AE                    LD a, (rng_seed+1)
2175   9F11 6F                          LD l, a
2176   9F12             
2177   9F12 29                          add hl,hl     ; 29    11
2178   9F13 9F                          sbc a,a       ; 9F     4
2179   9F14 E6 2D                       and %00101101 ; E62D   7
2180   9F16 AD                          xor l         ; AD     4
2181   9F17 6F                          LD l,a        ; 6F     4
2182   9F18 ED 5F                       LD a,r        ; ED5F   9
2183   9F1A 84                          add a,h       ; 84     4
2184   9F1B             
2185   9F1B 47                          LD b, a
2186   9F1C 7C                          LD a, h
2187   9F1D 32 34 AE                    LD (rng_seed), a
2188   9F20 7D                          LD a, l
2189   9F21 32 35 AE                    LD (rng_seed+1), a
2190   9F24 78                          LD a, b
2191   9F25             
2192   9F25 C9                          ret 
2193   9F26             resetBonusInitializers:
2194   9F26 3E 40                      LD   A, $40
2195   9F28 32 50 AB                   LD   (enemyTimerMax), A
2196   9F2B 21 66 AB                   LD   HL, bonEmyKey    
2197   9F2E 11 67 AB                   LD   DE, bonEmyKey+1
2198   9F31 36 00                      LD   (HL),$00
2199   9F33 01 08 00                   LD   BC, 8
2200   9F36 ED B0                      LDIR
2201   9F38             
2202   9F38 21 52 AB                   LD   HL, bonusBoard	    
2203   9F3B 11 53 AB                   LD   DE, bonusBoard+1
2204   9F3E 36 00                      LD   (HL),$00
2205   9F40 01 08 00                   LD   BC, 8
2206   9F43 ED B0                      LDIR
2207   9F45             
2208   9F45 21 5C AB                   LD   HL, bonusPeekTimer	    
2209   9F48 11 5D AB                   LD   DE, bonusPeekTimer+1
2210   9F4B 3A 50 AB                   LD    A, (enemyTimerMax)
2211   9F4E 77                         LD   (HL),A
2212   9F4F 01 08 00                   LD   BC, 8
2213   9F52 ED B0                      LDIR
2214   9F54             
2215   9F54 3E 00                      ld a, 0
2216   9F56 32 8E AB                   ld (bonusLvl), a 
2217   9F59 3C                         inc a
2218   9F5A 32 8D AB                   ld (bopCount), a 
2219   9F5D 3E 2A                      ld a, 42
2220   9F5F 32 8F AB                   ld (nxtBonus), a
2221   9F62                         
2222   9F62 C9                         ret
2223   9F63             draw_layer_fillall:
2224   9F63 21 29 8E                   LD   HL,PLOTSSCREEN		            ;top LCD black
2225   9F66 11 2A 8E                   LD   DE,PLOTSSCREEN+1
2226   9F69 36 FF                      LD   (HL),$FF
2227   9F6B 01 FF 02                   LD   BC,767
2228   9F6E ED B0                      LDIR
2229   9F70 C9                         ret
2230   9F71             draw_layer_checkerbg_top:
2231   9F71 3A 56 B1                   LD a, (bg_anim_val)
2232   9F74 CB 0F                      RRC a 
2233   9F76 CB 0F                      RRC a 
2234   9F78 CB 0F                      RRC a 
2235   9F7A CB 0F                      RRC a 
2236   9F7C 32 56 B1                   ld (bg_anim_val), a 
2237   9F7F 21 29 8E                   LD   HL,PLOTSSCREEN		            ;top LCD black
2238   9F82 11 2A 8E                   LD   DE,PLOTSSCREEN+1
2239   9F85 77                         LD   (HL),a
2240   9F86 01 85 00                   LD   BC,133
2241   9F89 ED B0                      LDIR
2242   9F8B C9                         ret
2243   9F8C             draw_layer_fillbg_top:
2244   9F8C 21 29 8E                   LD   HL,PLOTSSCREEN		            ;top LCD black
2245   9F8F 11 2A 8E                   LD   DE,PLOTSSCREEN+1
2246   9F92 36 FF                      LD   (HL),$FF
2247   9F94 01 07 01                   LD   BC,263
2248   9F97 ED B0                      LDIR
2249   9F99                            ; ld a, (bt_flags)
2250   9F99                             ;bit isSpinning, a
2251   9F99                            ; call nz, dta
2252   9F99 CD 9D 9F                   call dta
2253   9F9C C9                         ret
2254   9F9D             dta:            
2255   9F9D CB 6F                      bit isBonus, a 
2256   9F9F CC BE 9F                   call z, draw_top_animation
2257   9FA2 C9                         ret
2258   9FA3             
2259   9FA3             
2260   9FA3                          
2261   9FA3             
2262   9FA3             draw_layer_fillbg_low:
2263   9FA3             
2264   9FA3 21 C9 90                   LD   HL,PLOTSSCREEN+(56*12)	            ;bottom LCD black
2265   9FA6 11 CA 90                   LD   DE,PLOTSSCREEN+(56*12)+1
2266   9FA9 36 FF                      LD   (HL),$FF
2267   9FAB 01 70 00                   LD   BC,112
2268   9FAE ED B0                      LDIR   
2269   9FB0             draw_layer_fillbg_low_clip_sym:
2270   9FB0 21 B1 90                   LD   HL,PLOTSSCREEN+(54*12)	            ;bottom LCD black
2271   9FB3 11 B2 90                   LD   DE,PLOTSSCREEN+(54*12)+1
2272   9FB6 36 00                      LD   (HL),$00
2273   9FB8 01 30 00                   LD   BC,48  ;3 rows of 16 - should be right above text - enough to clip off dropping symbols into text zone
2274   9FBB ED B0                      LDIR            
2275   9FBD C9                         ret
2276   9FBE             draw_top_animation:
2277   9FBE                             ;call draw_layer_checkerbg_top
2278   9FBE                            ;call ionFastCopy
2279   9FBE             draw_top_sym:
2280   9FBE DD 2A B0 AD                ld ix, (run_anim_p)
2281   9FC2             
2282   9FC2 21 38 AB                   LD   hl, TOP_ANIM_XY+1
2283   9FC5 7E                         ld   a, (hl)
2284   9FC6                            ;inc  (hl)         ;increase x poistion of animation
2285   9FC6 2B                         dec  hl
2286   9FC7 6E                         ld   l, (hl)
2287   9FC8 06 0C                      ld   b, 12
2288   9FCA 0E 01                      ld   c, 1
2289   9FCC 26 03                      ld   h, 3
2290   9FCE             
2291   9FCE CD 35 9E                   call put_any_Sprite 
2292   9FD1             
2293   9FD1 3A AF AD                   ld a, (run_anim_pace)
2294   9FD4 3D                         dec a
2295   9FD5 32 AF AD                   ld (run_anim_pace), a 
2296   9FD8 FE 01                      cp 1
2297   9FDA CC 01 A0                   call z, adv_run_anim
2298   9FDD             
2299   9FDD             
2300   9FDD             
2301   9FDD DD 2A B2 AD                ld   ix, (nft_anim_p)
2302   9FE1 21 3A AB                   LD   hl, TOP_ANIM_GOAL_XY+1
2303   9FE4 7E                         ld   a, (hl)
2304   9FE5 35                         dec  (hl)         ;increase x poistion of animation
2305   9FE6 2B                         dec  hl
2306   9FE7 6E                         ld   l, (hl)
2307   9FE8 06 0A                      ld   b, 10
2308   9FEA 0E 01                      ld   c, 1
2309   9FEC 26 03                      ld   h, 3
2310   9FEE             
2311   9FEE CD 35 9E                   call put_any_Sprite 
2312   9FF1             
2313   9FF1 C9                         ret
2314   9FF2             setNFTeligibleSpin:
2315   9FF2 3A B4 AD                    ld a, (nftflags)
2316   9FF5 CB C7                       SET isNFTeligible, a 
2317   9FF7 32 B4 AD                    ld (nftflags), a
2318   9FFA 21 DE AF                    ld hl, nft_anim_sprite
2319   9FFD 22 B2 AD                    ld (nft_anim_p), hl
2320   A000 C9                          ret
2321   A001             
2322   A001             adv_run_anim:
2323   A001 3E 03                   ld a, 3
2324   A003 32 AF AD                ld (run_anim_pace), a 
2325   A006 3A 57 B1                ld a, (bg_anim_frame)
2326   A009 3C                         inc a 
2327   A00A 32 57 B1                   ld (bg_anim_frame), a 
2328   A00D FE 07                      cp 7
2329   A00F CC 22 A0                   call z, resetRunAnimFrame
2330   A012 2A B0 AD                   ld hl, (run_anim_p)
2331   A015 22 C0 AD                   ld (P_), hl
2332   A018 3E 0C                      ld a, $0C
2333   A01A CD E9 A3                   call jumpAfromP_
2334   A01D DD 22 B0 AD                ld (run_anim_p), IX
2335   A021 C9                         ret
2336   A022             
2337   A022             resetRunAnimFrame:
2338   A022 3E 01                    ld a, 1
2339   A024 32 57 B1                 ld (bg_anim_frame), a 
2340   A027 21 58 B1                 ld hl, bg_anim_run1
2341   A02A 22 B0 AD                 ld (run_anim_p), hl
2342   A02D C9                       ret 
2343   A02E             draw_layer_bonus_bg:
2344   A02E CD 5B 51                    bcall(_GrBufClr)
2345   A031 CD FA A3                    call draw_top_layers
2346   A034                             ;call draw_mask_layer
2347   A034                             ;Y + 11 between rows
2348   A034 21 06 38                    ld HL, _NUM_XY_MONEY
2349   A037 22 52 82                    LD (PenCol), HL
2350   A03A 21 7B AC                    LD HL, text_bot_expl2
2351   A03D CD 81 47                    bcall(_VputS)
2352   A040 FD CB 05 9E                 RES   textInverse, (IY+textFlags)   ;invert text    
2353   A044             
2354   A044 21 18 16                    LD HL, _NUM_XY_BO7
2355   A047 22 52 82                    LD (penCol), HL
2356   A04A 3E 37                       LD A, '7'
2357   A04C CD 7D 47                    bcall(_VPutMap)
2358   A04F 21 34 16                    LD HL, _NUM_XY_BO8
2359   A052 22 52 82                    LD (penCol), HL
2360   A055 3E 38                       LD A, '8'
2361   A057 CD 7D 47                    bcall(_VputMap)
2362   A05A 21 4F 16                    LD HL, _NUM_XY_BO9
2363   A05D 22 52 82                    LD (penCol), HL
2364   A060 3E 39                       LD A, '9'
2365   A062 CD 7D 47                    bcall(_VputMap)
2366   A065             
2367   A065 21 18 21                    LD HL, _NUM_XY_BO4
2368   A068 22 52 82                    LD (penCol), HL
2369   A06B 3E 34                       LD A, '4'
2370   A06D CD 7D 47                    bcall(_VPutMap)
2371   A070 21 34 21                    LD HL, _NUM_XY_BO5
2372   A073 22 52 82                    LD (penCol), HL
2373   A076 3E 35                       LD A, '5'
2374   A078 CD 7D 47                    bcall(_VputMap)
2375   A07B             
2376   A07B                         
2377   A07B 21 4F 21                    LD HL, _NUM_XY_BO6
2378   A07E 7D                          LD A, L
2379   A07F 3D                          DEC A
2380   A080 3D                          DEC A
2381   A081 3D                          DEC A
2382   A082 6C                          LD L, H
2383   A083 2C                          INC L
2384   A084 2C                          INC L
2385   A085 06 08                       LD B, 8
2386   A087 DD 21 AE AF                 LD IX, bonus_enemy1
2387   A08B CD AD 91                    call ionPutSprite
2388   A08E                             ;LD (penCol), HL
2389   A08E                             ;LD A, '6'
2390   A08E                             ;bcall(_VputMap)
2391   A08E             
2392   A08E 21 18 2C                    LD HL, _NUM_XY_BO1
2393   A091 22 52 82                    LD (penCol), HL
2394   A094 3E 31                       LD A, '1'
2395   A096 CD 7D 47                    bcall(_VPutMap)
2396   A099 21 34 2C                    LD HL, _NUM_XY_BO2
2397   A09C 22 52 82                    LD (penCol), HL
2398   A09F 3E 32                       LD A, '2'
2399   A0A1 CD 7D 47                    bcall(_VputMap)
2400   A0A4 21 4F 2C                    LD HL, _NUM_XY_BO3
2401   A0A7 22 52 82                    LD (penCol), HL
2402   A0AA 3E 33                       LD A, '3'
2403   A0AC CD 7D 47                    bcall(_VputMap)
2404   A0AF FD CB 05 DE                 SET  textInverse, (IY+textFlags)   ;invert text 
2405   A0B3             
2406   A0B3                            ;n>=1
2407   A0B3             bon_redraw:    
2408   A0B3 11 04 16                   LD DE, _BON_XY_HP1
2409   A0B6 7B                         LD A, E
2410   A0B7 6A                         LD L, D
2411   A0B8 06 08                      LD B, 8
2412   A0BA DD 21 D2 B0                LD IX, bonus_heart_on
2413   A0BE CD AD 91                   call ionPutSprite
2414   A0C1             
2415   A0C1 11 04 21                   LD DE, _BON_XY_HP2
2416   A0C4 7B                         LD A, E
2417   A0C5 6A                         LD L, D
2418   A0C6 06 08                      LD B, 8
2419   A0C8 DD 21 D2 B0                LD IX, bonus_heart_on
2420   A0CC CD AD 91                   call ionPutSprite
2421   A0CF             
2422   A0CF 11 04 2D                   LD DE, _BON_XY_HP3
2423   A0D2 7B                         LD A, E
2424   A0D3 6A                         LD L, D
2425   A0D4 06 08                      LD B, 8
2426   A0D6 DD 21 D2 B0                LD IX, bonus_heart_on
2427   A0DA CD AD 91                   call ionPutSprite
2428   A0DD             
2429   A0DD 21 06 0E                   ld HL, _TEXT_XY_TOPBL
2430   A0E0 22 52 82                   LD (PenCol), HL
2431   A0E3 21 42 AC                   LD HL, text_top_expl
2432   A0E6 CD 81 47                   bcall(_VputS)            
2433   A0E9             
2434   A0E9                            ;LD BC, 24*256+42                ;1st point, X=25, Y=30
2435   A0E9                            ;LD DE, 88*256+42                ;2nd point, X=62, Y=50
2436   A0E9 26 02                      LD H, 02h                       ;line on
2437   A0EB                            ;bcall(_iline)
2438   A0EB 01 1F 12                   LD BC, 18*256+31                ;1st point, X=25, Y=30
2439   A0EE 11 1F 5A                   LD DE, 90*256+31                ;2nd point, X=62, Y=50
2440   A0F1 CD E4 4A                   bcall(_iline)
2441   A0F4 01 14 12                   LD BC, 18*256+20                ;1st point, X=25, Y=30
2442   A0F7 11 14 5A                   LD DE, 90*256+20                ;2nd point, X=62, Y=50
2443   A0FA CD E4 4A                   bcall(_iline)
2444   A0FD                            ;LD BC, 24*256+9                ;1st point, X=25, Y=30
2445   A0FD                            ;LD DE, 88*256+9                ;2nd point, X=62, Y=50
2446   A0FD                            ;bcall(_iline)
2447   A0FD             
2448   A0FD             ; Draws a vertical line from (D, L)-(D, E)
2449   A0FD             ;BON_Y: .db  $2C,$2C,$2C, $21,$21,$21, $16,$16,$16, 0fh
2450   A0FD             ;BON_X: .db  $1A,$2A,$3A, $1A,$2A,$3A, $1A,$2A,$3A, 0fh
2451   A0FD                            ;LD BC, 12*256+41                 ;1st point, X=25, Y=30
2452   A0FD                            ;LD DE, 12*256+10                 ;2nd point, X=62, Y=50
2453   A0FD                            ;bcall(_iline)
2454   A0FD 01 29 28                   LD BC, 40*256+41                 ;1st point, X=25, Y=30
2455   A100 11 0A 28                   LD DE, 40*256+10                 ;2nd point, X=62, Y=50                     ;line on
2456   A103 CD E4 4A                   bcall(_iline)
2457   A106 01 29 44                   LD BC, 68*256+41                ;1st point, X=25, Y=30
2458   A109 11 0A 44                   LD DE, 68*256+10                ;2nd point, X=62, Y=50
2459   A10C CD E4 4A                   bcall(_iline)
2460   A10F                            ;LD BC, 95*256+41                ;1st point, X=25, Y=30
2461   A10F                            ;LD DE, 95*256+10                ;2nd point, X=62, Y=50
2462   A10F                            ;bcall(_iline)
2463   A10F CD B6 91                   call IONFastCopy
2464   A112              
2465   A112 3A 8C AB    redrawHearts:  ld A, (heartCount)
2466   A115 FE 03                      cp 3
2467   A117 D0                         ret nc
2468   A118 FE 02                      cp 2 
2469   A11A F5                         push af
2470   A11B CC 25 A1                   call z, draw1heartgone
2471   A11E F1                         pop af
2472   A11F FE 01                      cp 1
2473   A121 CC 39 A1                   call z, draw2heartsgone
2474   A124 C9                         ret
2475   A125             draw1heartgone:
2476   A125 11 04 16                   LD DE, _BON_XY_HP1
2477   A128 7B                         LD A, E
2478   A129 6A                         LD L, D
2479   A12A 06 08                      LD B, 8
2480   A12C DD 21 DA B0                LD IX, bonus_heart_off
2481   A130 CD AD 91                   call ionPutSprite
2482   A133             
2483   A133 3A 8C AB                   ld A, (heartCount)
2484   A136 FE 01                      cp 1
2485   A138 C0                         ret nz
2486   A139             
2487   A139             draw2heartsgone:
2488   A139 11 04 21                   LD DE, _BON_XY_HP2
2489   A13C 7B                         LD A, E
2490   A13D 6A                         LD L, D
2491   A13E 06 08                      LD B, 8
2492   A140 DD 21 DA B0                LD IX, bonus_heart_off
2493   A144 CD AD 91                   call ionPutSprite
2494   A147 C9                         ret
2495   A148             
2496   A148             
2497   A148             ;clear out a defined chunk of gbuffer
2498   A148             mask_from_reel_A:
2499   A148 11 0B 00                   LD   DE, $000B            ;inc each iteration
2500   A14B DD 21 2F 8E                LD IX, PLOTSSCREEN+6
2501   A14F             msk_loop:       
2502   A14F             
2503   A14F DD 22 B6 AD                LD (data_p), IX
2504   A153 2A B6 AD                   LD HL, (data_p)
2505   A156 DD 23                      INC IX
2506   A158 DD 22 B6 AD                LD (data_p), IX 
2507   A15C ED 5B B6 AD                LD DE, (data_p)
2508   A160 36 FF                      LD (HL), $FF
2509   A162 01 04 00                   LD BC, 4
2510   A165 ED B0                      LDIR
2511   A167                
2512   A167 11 0B 00                   LD DE, $000B
2513   A16A 21 F8 02                   LD HL,  760
2514   A16D DD 19                      ADD IX, DE
2515   A16F                    
2516   A16F C9                         ret    
2517   A170             draw_mask_layer:
2518   A170 DD 21 32 AB     LD ix, maskXYWH
2519   A174 DD 7E 00        LD a, (ix)        ;x
2520   A177 DD 23           inc ix
2521   A179 DD 5E 00        LD e, (ix)        ;y
2522   A17C DD 23           inc ix 
2523   A17E CD 92 A1        call clearGBUFrect
2524   A181 CD B6 91        call ionFastCopy
2525   A184                 ;clear out pointers
2526   A184 21 F5 B2        ld hl, p_callseq
2527   A187 11 F6 B2        ld de, p_callseq+1
2528   A18A 01 05 00        ld bc, 5 
2529   A18D 36 00           ld (hl), $00
2530   A18F ED B0           ldir 
2531   A191 C9              ret 
2532   A192             ;clearGBUFrect()
2533   A192             ;clears out a rectangle in the graph buffer
2534   A192             ;
2535   A192             ;inputs: a=x, e=y, d=width, height
2536   A192             clearGBUFrect:
2537   A192 CD B3 91        call ionGetPixel
2538   A195 E5              push hl 
2539   A196 47               ld b, a   ;bit offset into first byte per row
2540   A197 CD 7F A2         call _bitRemainderFromOffset  ; c=byte 1 remainder
2541   A19A 47               ld b, a 
2542   A19B             
2543   A19B                 ;width/8
2544   A19B             
2545   A19B DD 56 00         ld d, (ix)
2546   A19E DD 23            inc ix 
2547   A1A0 7A               ld a, d 
2548   A1A1 FE 09            cp 9
2549   A1A3 D2 AF A1         jp nc, _moreBits
2550   A1A6 21 6A A2         ld hl, _renderB1Remainder
2551   A1A9 22 F5 B2         ld (p_callseq), hl 
2552   A1AC C3 EB A1         jp _procFIN
2553   A1AF             _moreBits:
2554   A1AF 91               sub c 
2555   A1B0                  ;a = bits left after we render the remainder
2556   A1B0 FE 09            cp 9
2557   A1B2 D2 C8 A1         jp nc, __nxt
2558   A1B5 CD 7A A2         call _bcLone
2559   A1B8 57               ld d, a ;finremainder's mask
2560   A1B9 21 6A A2         ld hl, _renderB1Remainder
2561   A1BC 22 F5 B2         ld (p_callseq), hl 
2562   A1BF 21 73 A2         ld hl, _renderRNRemainder
2563   A1C2 22 F7 B2         ld (p_callseq+2), hl 
2564   A1C5 C3 EB A1         jp _procFIN
2565   A1C8             __nxt:
2566   A1C8             
2567   A1C8             ;----------all flows before this are self-ended - full row instructions are in p_callseq ptr----
2568   A1C8                  ;c=remainder count
2569   A1C8 57               ld d, a
2570   A1C9 CD 4F A2         call _getb1remMSK   
2571   A1CC 21 6A A2         ld hl, _renderB1Remainder
2572   A1CF 22 F5 B2         ld (p_callseq), hl 
2573   A1D2             
2574   A1D2 CD 37 A2         call _byteCount ;e=bytecount a=remainder of (Width-StartOffset)%8 
2575   A1D5 57               ld d, a 
2576   A1D6 F6 00            or %0  
2577   A1D8 CA E5 A1         jp z, _noFINbits
2578   A1DB CD 29 A2         call _createLastBitsInRowMask ;a = final bits mask
2579   A1DE 57               ld d, a      ;d = final bits mask, if d=0, no final mask
2580   A1DF                 ;ld c, 3      ;instruction counter, per row
2581   A1DF 21 73 A2         ld hl, _renderRNRemainder
2582   A1E2 22 F9 B2         ld (p_callseq+4), hl 
2583   A1E5             _noFINbits:
2584   A1E5 21 1F A2         ld hl, _rendFullBytesinRow
2585   A1E8 22 F7 B2         ld (p_callseq+2), hl
2586   A1EB             
2587   A1EB             _procFIN: 
2588   A1EB             
2589   A1EB E1             pop hl
2590   A1EC DD 4E 00       ld c, (ix)
2591   A1EF             
2592   A1EF             
2593   A1EF             _zeroBufCOLj:  
2594   A1EF DD 2A F5 B2    ld ix, (p_callseq)
2595   A1F3 D5             push de
2596   A1F4 E5               push hl   
2597   A1F5 DD E9             jp (ix)
2598   A1F7             __rechk:
2599   A1F7 3A F7 B2          ld a, (p_callseq+2)
2600   A1FA F6 00             or %0
2601   A1FC CA 13 A2          jp z, _partBre
2602   A1FF DD 2A F7 B2       ld ix, (p_callseq+2)
2603   A203 DD E9             jp (ix)
2604   A205             __rechk2:
2605   A205 3A F9 B2          ld a, (p_callseq+4)
2606   A208 F6 00             or %0
2607   A20A CA 13 A2          jp z, _partBre
2608   A20D DD 2A F9 B2       ld ix, (p_callseq+4)
2609   A211 DD E9             jp (ix)
2610   A213             _partBre:
2611   A213 E1               pop hl 
2612   A214 1E 0C            ld e, 12
2613   A216 16 00            ld d, 0 
2614   A218 19               add hl, de 
2615   A219 0D               dec c
2616   A21A D1              pop de 
2617   A21B C2 EF A1        jp nz, _zeroBufCOLj
2618   A21E C9              ret 
2619   A21F             
2620   A21F             ;inputs: e = bytecount
2621   A21F             _rendFullBytesinRow:
2622   A21F 36 00           ld (hl), $00
2623   A221 23              inc hl 
2624   A222 1D              dec e
2625   A223 C2 1F A2        jp nz, _rendFullBytesinRow
2626   A226 C3 05 A2        jp __rechk2
2627   A229             
2628   A229             ;inputs:  d = bits remaining
2629   A229             ;output:  a = && mask to close out the row
2630   A229             _createLastBitsInRowMask:
2631   A229 0E 01           ld c, %00000001
2632   A22B             _clbi:         
2633   A22B 3E 08           ld a, 8
2634   A22D 92              sub d 
2635   A22E AF              xor a 
2636   A22F             __clp:
2637   A22F B1              or c 
2638   A230 CB 21           sla c 
2639   A232 15              dec d 
2640   A233 C2 2F A2        jp nz, __clp
2641   A236 C9              ret 
2642   A237             
2643   A237             ;output:  e=byte count, a=remainder     
2644   A237             _byteCount:
2645   A237 AF              xor a 
2646   A238 0E 01           ld c, 1 ;bitcounter 
2647   A23A CB 3A           srl d
2648   A23C DC 4B A2        call c, __bcc
2649   A23F CB 3A           srl d 
2650   A241 DC 4B A2        call c, __bcc 
2651   A244 CB 3A           srl d 
2652   A246 DC 4B A2        call c, __bcc
2653   A249 5A              ld e, d
2654   A24A C9              ret  
2655   A24B             __bcc:
2656   A24B CB 21           sla c 
2657   A24D B1              or c 
2658   A24E             
2659   A24E C9              ret
2660   A24F             ;b=starting position
2661   A24F             ;c=bits remaining to 0 out 
2662   A24F             _getb1remMSK:
2663   A24F 78              ld a, b
2664   A250 FE 80           cp $80
2665   A252 C2 5A A2        jp nz, __gmk
2666   A255 3E 00           ld a, 0
2667   A257 C3 66 A2        jp __gmkFIN
2668   A25A             __gmk:
2669   A25A D5              push de 
2670   A25B 16 80           ld d, %10000000
2671   A25D 78              ld a, b 
2672   A25E             __gmki:
2673   A25E B2              or d
2674   A25F CB 3A           srl d
2675   A261 0D              dec c
2676   A262 C2 5E A2        jp nz, __gmki
2677   A265 D1              pop de 
2678   A266             __gmkFIN
2679   A266 32 FB B2        ld (rectMaskB1Mask), a 
2680   A269 C9              ret 
2681   A26A             
2682   A26A             ;b=starting position
2683   A26A             _renderB1Remainder:
2684   A26A 3A FB B2        ld a, (rectMaskB1Mask)
2685   A26D A6              and (hl) 
2686   A26E 77              ld (hl), a 
2687   A26F 23              inc hl 
2688   A270 C3 F7 A1        jp __rechk
2689   A273             
2690   A273             
2691   A273             ;inputs: d = final bytemask
2692   A273             _renderRNRemainder:
2693   A273 7A              ld a, d 
2694   A274 A6              and (hl)
2695   A275 77              ld (hl), a 
2696   A276 23              inc hl 
2697   A277 C3 13 A2        jp _partBre 
2698   A27A             
2699   A27A             ;the full width is less than 16
2700   A27A             ;c = bits remaining after byte0's remainder is rendered
2701   A27A             _bcLone:
2702   A27A 51              ld d, c 
2703   A27B CD 29 A2        call _createLastBitsInRowMask
2704   A27E C9              ret
2705   A27F             
2706   A27F             ;input:  b = getpixel bitmask
2707   A27F             ;output: c = the remainder
2708   A27F             _bitRemainderFromOffset:
2709   A27F 0E 08           ld c, 8 
2710   A281             
2711   A281             _bremI:        
2712   A281 CB 38           srl b 
2713   A283 C8              ret z 
2714   A284 0D              dec c 
2715   A285 C3 81 A2        jp _bremI
2716   A288             ;fill full bytes with 0's
2717   A288             
2718   A288             ; Draws a vertical line from (D, L)-(D, E)
2719   A288             Draw_Line:
2720   A288 3E 05           LD a, 5
2721   A28A 6F              ld l, a
2722   A28B 57              LD D, A
2723   A28C 3E 1E           LD a, 30
2724   A28E 5F              LD e, a 
2725   A28F             
2726   A28F 7B              LD     A, E
2727   A290 95              SUB    L
2728   A291 C8              RET    Z
2729   A292 F5              PUSH   AF        ; Find and store vertical length of line
2730   A293             
2731   A293 7A              LD     A, D
2732   A294 CD B3 91        CALL   ionGetPixel
2733   A297             
2734   A297 C1              POP    BC        ; Now B = number of pixels to draw
2735   A298 11 0C 00        LD     DE, 12     ; There are 12 bytes between rows
2736   A29B 4F              LD     C, A       ; Save the bitmask because it will get obliterated
2737   A29C             
2738   A29C             PlotLoop:
2739   A29C 79              LD     A, C
2740   A29D B6              OR     (HL)
2741   A29E 77              LD     (HL), A
2742   A29F 19              ADD    HL, DE
2743   A2A0 10 FA           DJNZ   PlotLoop
2744   A2A2 C9              RET
2745   A2A3             
2746   A2A3             ;Load (data_p) with the address of the array sequence to draw
2747   A2A3             draw_sarr_at_xarr_yarr:
2748   A2A3 2A BE AD                   LD HL, (data_p+8)
2749   A2A6 22 B6 AD                   LD (data_p), HL
2750   A2A9             dsarr_loop:   
2751   A2A9 2A B6 AD                   LD HL, (data_p)            
2752   A2AC 7E                         LD A, (HL)
2753   A2AD FE 0F                      CP $0F
2754   A2AF C8                         ret z
2755   A2B0 23                         INC HL
2756   A2B1 22 B6 AD                   LD (data_p), HL
2757   A2B4 F6 00                      or %0                      ;reels with no data don't get re-drawn
2758   A2B6 28 F1                      jr z, dsarr_loop             
2759   A2B8 21 76 B2                   ld HL, draw_w_h
2760   A2BB FE 09                      cp $09                     ;if bonus symbol custom height
2761   A2BD 46                         ld b, (HL)                  ;sprite width, from calling def
2762   A2BE 23                         INC HL
2763   A2BF 4E                         ld c, (HL)                  ;sprite height, set from caller
2764   A2C0                            
2765   A2C0 87                         ADD A, A                    ;E contains 1-8 result of the rng symbol
2766   A2C1 87                         ADD A, A                    ;(1-8)*8 = sprite offset
2767   A2C2 87                         ADD A, A 
2768   A2C3 21 36 AE                   ld HL, slot_sprites
2769   A2C6 22 C0 AD                   ld (P_), HL
2770   A2C9 CD E9 A3                   call jumpAfromP_
2771   A2CC DD E5                      push IX
2772   A2CE                            ;dec IX
2773   A2CE                   ;
2774   A2CE 3A 1B AB                   ld a, (aO)
2775   A2D1 C6 1A                      add a, sX
2776   A2D3             
2777   A2D3 2A B6 AD                   LD HL, (data_p)
2778   A2D6 2B                         dec HL
2779   A2D7 22 C0 AD                   LD (P_), HL
2780   A2DA CD E9 A3                   call jumpAfromP_
2781   A2DD DD 7E 00                   ld A, (IX)
2782   A2E0 01 1A 00                   LD BC, $001A
2783   A2E3 DD 09                      ADD IX, BC
2784   A2E5 DD 6E 00                   LD L, (IX)
2785   A2E8                            
2786   A2E8                            ;add a, $1A
2787   A2E8                            ;ld (u_y+2), a
2788   A2E8             
2789   A2E8             ;u_x:           ld A, (IX + sX)         ;x coordinate
2790   A2E8             ;u_y:           LD HL, (IX + sY)         ;y coordinate [***LOADING 0 on stopspin]
2791   A2E8 DD E1                      pop IX
2792   A2EA             
2793   A2EA 4F                         ld  c, a
2794   A2EB 3A 2F AB                   LD  A, (spinAnimCount)
2795   A2EE 85                         add a, l
2796   A2EF 6F                         ld  L, A
2797   A2F0 79                         ld  a, c
2798   A2F1 CD 0E 9E                   CALL XORSPR_L
2799   A2F4             
2800   A2F4                     
2801   A2F4 C3 A9 A2                   jp dsarr_loop
2802   A2F7             ;call whenever multiplier or lines is updated.
2803   A2F7             _incMult:    
2804   A2F7 3A 22 AB                 ld a, (_multiplier)
2805   A2FA FE 05                    cp 05h
2806   A2FC C2 06 A3                 jp nz, _incM
2807   A2FF 3E 01                    ld a, 1
2808   A301 32 22 AB                 ld (_multiplier), a
2809   A304 18 04                    jr d_incM
2810   A306 3C          _incM:       inc a
2811   A307 32 22 AB                 ld (_multiplier), a
2812   A30A             
2813   A30A 21 54 18    d_incM:        LD HL, _TEXT_XY_RMENU
2814   A30D 22 52 82                   LD (PenCol), HL
2815   A310 3E 20                      LD A, ' '
2816   A312 CD 7D 47                   bcall(_VPutMap)
2817   A315 3E 78                      LD A, 78h            ;small 'x'
2818   A317 CD 7D 47                   bcall(_VPutMap)    
2819   A31A             
2820   A31A 18 4D                      jr preUpdateBet
2821   A31C             
2822   A31C             _incLines:
2823   A31C 3A 21 AB                 ld a, (_lines)
2824   A31F FE 09                    cp 09h
2825   A321 C2 2B A3                 jp nz, _incL
2826   A324 3E 01                    ld a, 1
2827   A326 32 21 AB                 ld (_lines), a
2828   A329 18 04                    jr d_incL
2829   A32B 3C          _incL:       inc a
2830   A32C 32 21 AB                 ld (_lines), a
2831   A32F             
2832   A32F 21 54 27    d_incL:        LD HL, _TEXT_XY_RMENU3
2833   A332 22 52 82                   LD (PenCol), HL
2834   A335 3E 20                      LD A, ' '
2835   A337 CD 7D 47                   bcall(_VPutMap)
2836   A33A 3E 2B                      LD A, 2Bh            ;small '+'
2837   A33C CD 7D 47                   bcall(_VPutMap)    
2838   A33F                                              
2839   A33F 18 25                      jr preUpdateBet_l
2840   A341             
2841   A341             _decLines:
2842   A341 3A 21 AB                 ld a, (_lines)
2843   A344 FE 01                    cp 01h
2844   A346 C2 50 A3                 jp nz, _decL
2845   A349 3E 09                    ld a, 9
2846   A34B 32 21 AB                 ld (_lines), a
2847   A34E 18 04                    jr d_decL
2848   A350 3D          _decL:       dec a
2849   A351 32 21 AB                 ld (_lines), a
2850   A354             
2851   A354 21 54 20    d_decL:        LD HL, _TEXT_XY_RMENU2
2852   A357 22 52 82                   LD (PenCol), HL
2853   A35A 3E 20                      LD A, ' '
2854   A35C CD 7D 47                   bcall(_VPutMap)
2855   A35F 3E 2D                      LD A, 2Dh            ;small '-'
2856   A361 CD 7D 47                   bcall(_VPutMap)         
2857   A364                         
2858   A364 18 00                      jr preUpdateBet_l
2859   A366             
2860   A366             
2861   A366             preUpdateBet_l:
2862   A366 CD 04 A4                   call draw_activePayLines_mini
2863   A369                            ;
2864   A369             ;highlight buttons being pressed, check $, anything else that needs to be done before update bet
2865   A369             preUpdateBet:
2866   A369 CD B6 91                   call ionFastCopy
2867   A36C CD 8F A3                   call draw_rmenu
2868   A36F             
2869   A36F             
2870   A36F             updateBet:          
2871   A36F 3E 00                   ld a, 00h
2872   A371 67                      ld h, a
2873   A372 57                      ld d, a
2874   A373             
2875   A373 3A 21 AB                ld a, (_lines)
2876   A376 5F                      ld e, a
2877   A377 3A 22 AB                ld a, (_multiplier)
2878   A37A 6F                      ld l, a
2879   A37B CD FA 9D                call mult
2880   A37E             
2881   A37E 45                      ld B, L
2882   A37F ED 5B A7 AD             LD DE, (money)
2883   A383 7B                      LD A, E
2884   A384 FE 00                   cp 00h
2885   A386 C2 8B A3                jp nz, enmoney
2886   A389 B8                      CP B
2887   A38A D8                      ret c 
2888   A38B             enmoney:    
2889   A38B 22 23 AB                LD (_totalBet), HL
2890   A38E C9                      ret 
2891   A38F             
2892   A38F             draw_rmenu:
2893   A38F 21 54 18                   LD HL, _TEXT_XY_RMENU
2894   A392 22 52 82                   LD (PenCol), HL
2895   A395 3E 20                      LD A, ' '
2896   A397 CD 7D 47                   bcall(_VPutMap)
2897   A39A 3E 78                      LD A, 78h            ;small 'x'
2898   A39C CD 7D 47                   bcall(_VPutMap)       
2899   A39F             
2900   A39F 21 54 20                   LD HL, _TEXT_XY_RMENU2
2901   A3A2 22 52 82                   LD (PenCol), HL
2902   A3A5 3E 20                      LD A, ' '
2903   A3A7 CD 7D 47                   bcall(_VPutMap)
2904   A3AA 3E 2D                      LD A, 2Dh            ;small '-'
2905   A3AC CD 7D 47                   bcall(_VPutMap)
2906   A3AF             
2907   A3AF 21 54 27                   LD HL, _TEXT_XY_RMENU3
2908   A3B2 22 52 82                   LD (PenCol), HL
2909   A3B5 3E 20                      LD A, ' '
2910   A3B7 CD 7D 47                   bcall(_VPutMap)
2911   A3BA 3E 2B                      LD A, 2Bh            ;small '+'
2912   A3BC CD 7D 47                   bcall(_VPutMap)
2913   A3BF                           
2914   A3BF                            ;turn off text highlighting
2915   A3BF FD CB 05 9E                RES   textInverse, (IY+textFlags)   ;invert text
2916   A3C3 21 5A 23                   LD HL, _NUM_XY_LNS
2917   A3C6 22 52 82                   LD (PenCol), HL
2918   A3C9 3A 21 AB                   LD a, (_lines)
2919   A3CC CD 74 4A                   bcall(_setxxop1)            ;place A into OP1
2920   A3CF CD D4 51    	           bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)  
2921   A3D2             
2922   A3D2 21 5A 18                   LD HL, _NUM_XY_MTP
2923   A3D5 22 52 82                   LD (PenCol), HL
2924   A3D8 3A 22 AB                   LD a, (_multiplier)
2925   A3DB CD 74 4A                   bcall(_setxxop1)            ;place A into OP1
2926   A3DE CD D4 51    	           bcall(_dispop1a)            ;write OP1 to screen, at (PenCol, PenRow)           
2927   A3E1 FD CB 05 DE                SET   textInverse, (IY+textFlags)   ;invert text
2928   A3E5 CD B6 91                   call IONfastCopy
2929   A3E8 C9                         ret
2930   A3E9             ;jumpAfromP_()
2931   A3E9             ;takes an offset(A) and a pointer (P*), jumps 16bits and returns new
2932   A3E9             ;location in IX.  Used for dynamic jumping
2933   A3E9             ;   inputs:
2934   A3E9             ;       A = offset, P* = entry point
2935   A3E9             ;   output:
2936   A3E9             ;       IX now points to new memory location
2937   A3E9             ;   destroys:
2938   A3E9             ;       HL, DE, IX 
2939   A3E9             jumpAfromP_:    
2940   A3E9 5F                         LD E,  A
2941   A3EA 16 00                      LD D,  00h             
2942   A3EC DD 2A C0 AD                LD IX, (P_)       ;HL = (HL + DE(Offset))
2943   A3F0 DD 19                      ADD IX, DE
2944   A3F2 C9                         ret
2945   A3F3             jumpEDfromP_:                 
2946   A3F3 DD 2A C0 AD                LD IX, (P_)       ;HL = (HL + DE(Offset))
2947   A3F7 DD 19                      ADD IX, DE
2948   A3F9 C9                         ret
2949   A3FA             draw_top_layers:
2950   A3FA CD 70 A1                    call draw_mask_layer 
2951   A3FD CD 8C 9F                    call draw_layer_fillbg_top     
2952   A400 CD A3 9F                    call draw_layer_fillbg_low
2953   A403 C9                          ret
2954   A404             
2955   A404             draw_activePayLines_mini:  
2956   A404 06 08                       ld b, 8
2957   A406 0E 02                       ld c, 2
2958   A408 3E 4F                       ld a, 4Fh
2959   A40A 2E 38                       ld l, 38h   ;bottom right panel       
2960   A40C                             ;ld a, 2Eh
2961   A40C DD 21 D2 AE                 ld IX, _8x16_on
2962   A410 26 02                       ld h, 02; 
2963   A412 CD 35 9E                    call put_any_Sprite
2964   A415 CD B6 91                    call IONfastCopy
2965   A418             
2966   A418 3A 21 AB                    ld a, (_lines)
2967   A41B 4F                          ld c, a         ;end condition
2968   A41C 06 01                       ld b, 1         ;start point
2969   A41E DD 21 06 AF                 LD IX, minimap
2970   A422             
2971   A422 DD E5       _dapl:          push ix
2972   A424 C5                          push bc
2973   A425             
2974   A425 06 08                       ld b, 8
2975   A427 0E 02                       ld c, 2
2976   A429 3E 4F                       ld a, 4Fh
2977   A42B 2E 38                       ld l, 38h
2978   A42D                             ;ld l, 2Eh
2979   A42D                 
2980   A42D CD B0 91                    call IonLargeSprite
2981   A430 CD B6 91                    call IonFastCopy
2982   A433 C1                          pop bc   
2983   A434 DD E1                       pop ix 
2984   A436 79                          ld a, c
2985   A437 B8                          cp b
2986   A438 C8                          ret z
2987   A439 04                          inc b
2988   A43A             
2989   A43A 16 00                       ld d, 00h
2990   A43C 1E 10                       ld e, 10h
2991   A43E DD 19                       add ix, de 
2992   A440                            
2993   A440 18 E0                       jr _dapl
2994   A442 C9                          ret
2995   A443             ;Put large sprite
2996   A443             ;B = height
2997   A443             ;C = width / 8
2998   A443             ; l=yc
2999   A443             ; a=xc
3000   A443             ; ix holds pointer
3001   A443             
3002   A443             
3003   A443             draw_activePayLines:
3004   A443             ;            for(i=1; i<=_lines, i++)
3005   A443             ;                for(j=(1); slot_rules[j+1]!=$FF, j++)                 
3006   A443             ;                   B = drawX[ i[j] ]+4
3007   A443             ;                   C = drawY[ i[j] ]+4
3008   A443             ;                   
3009   A443             ;                   D = drawX[ i[j+1] ]+4
3010   A443             ;                   E = drawY[ i[j+1] ]+4
3011   A443             ;                   bcall(_iline)
3012   A443             ;                   LD B, D
3013   A443             ;                   LD C, E
3014   A443             
3015   A443             
3016   A443 21 AF B2        LD HL, pay_rules
3017   A446 22 BC AD        LD (data_p+6), HL       ;slot_rules[0]
3018   A449             
3019   A449 3A 21 AB        ld a, (_lines)
3020   A44C 47              ld b, a         ;j
3021   A44D 0E 01           ld c, 1         ;start condition
3022   A44F C5              push bc
3023   A450             
3024   A450 CD 7D A4            call _gLX          ;gets X,Y -> B, C
3025   A453                
3026   A453             
3027   A453 C5          _incj:      push bc
3028   A454 2A BC AD                LD HL, (data_p+6)   ;j+1
3029   A457 23                      inc HL
3030   A458 22 BC AD                LD (data_p+6), HL
3031   A45B CD 7D A4                call _gLX      
3032   A45E 50                      ld d, b
3033   A45F 59                      ld e, c
3034   A460 C1                      pop bc 
3035   A461 CD 08 AB                call zi_line
3036   A464 C1                      pop bc
3037   A465 04                      inc b
3038   A466 78                      ld a, b 
3039   A467 FE 06                   cp 06h
3040   A469 38 0D                   jr c, _noInci
3041   A46B 0C                      inc c               ;i++
3042   A46C 3A 21 AB                ld a, (_lines)
3043   A46F B9                      cp c 
3044   A470 D0                      ret nc              ;i >= lines? return
3045   A471 2A BC AD                ld hl, (data_p+6)
3046   A474 23                      inc hl
3047   A475 22 BC AD                ld (data_p+6), hl
3048   A478             _noInci:    
3049   A478 C5                      push bc
3050   A479 42                      ld b, d             ;end of this line, is beginning of next line
3051   A47A 4B                      ld c, e             ;__
3052   A47B 18 D6                   jr _incj
3053   A47D             
3054   A47D             _gLX:
3055   A47D 7E                      LD a, (HL)
3056   A47E 3D                      dec a               ;adj offset.  
3057   A47F 21 42 B2                LD HL, draw_at_X
3058   A482 22 C0 AD                LD (P_), HL
3059   A485 CD E9 A3                call jumpAfromP_
3060   A488 DD 46 00                ld b, (IX)
3061   A48B 04                      inc b
3062   A48C 04                      inc b
3063   A48D 04                      inc b
3064   A48E 04                      inc b  
3065   A48F             
3066   A48F             ;getY  
3067   A48F 2A BC AD                LD HL, (data_p+6)
3068   A492 7E                      LD a, (HL)
3069   A493 3D                      dec A               ;adj offset
3070   A494 21 5C B2                LD HL, draw_at_Y
3071   A497 22 C0 AD                LD (P_), HL
3072   A49A CD E9 A3                call jumpAfromP_
3073   A49D DD 4E 00                ld c, (IX)
3074   A4A0 0C                      inc c
3075   A4A1 0C                      inc c
3076   A4A2 0C                      inc c
3077   A4A3 0C                      inc c
3078   A4A4 C5                      push bc
3079   A4A5             
3080   A4A5                         ;from 4,17h -> 44h, 17h                
3081   A4A5 68                          ld l, b 
3082   A4A6 26 00                       ld h, 00h
3083   A4A8 16 01                       ld d, 01h           ;de = 256 = $0100
3084   A4AA 1E 00                       ld e, 00h
3085   A4AC CD FA 9D                    call mult           ;x * 256
3086   A4AF                           
3087   A4AF C1                          pop bc              ;c = y
3088   A4B0 3E 40                       ld a, 64
3089   A4B2 91                          sub c
3090   A4B3 4F                          ld c, a
3091   A4B4 06 00                       ld b,  00h
3092   A4B6 09                          add hl, bc          ;hl = (x*256)+y
3093   A4B7                             ;hl is correct
3094   A4B7 4D                          ld c, l
3095   A4B8 44                          ld b, h
3096   A4B9 C5                          push bc             ;correct coord in bc
3097   A4BA             
3098   A4BA C9                      ret
3099   A4BB             resetNFTflags:
3100   A4BB 3A B4 AD                   LD a, (nftflags)
3101   A4BE CB 87                      RES isNFTeligible, a
3102   A4C0 32 B4 AD                   ld (nftflags), a 
3103   A4C3 21 C0 B1                   ld hl, bg_anim_3
3104   A4C6 22 B2 AD                   ld (nft_anim_p), hl
3105   A4C9 C9                         ret
3106   A4CA             
3107   A4CA             qrBonusWin:           
3108   A4CA CD 5B 51                    bcall(_GrBufClr)
3109   A4CD CD B6 91                    call ionFastCopy
3110   A4D0             ;----------------------------------QR Routines-----------------------------------------------
3111   A4D0             printQRCode:   
3112   A4D0 3A B4 AD                   ld a, (nftflags)
3113   A4D3 CB CF                      SET hasWonNFT, a
3114   A4D5 32 B4 AD                   ld (nftflags), a
3115   A4D8             
3116   A4D8 CD BB A4                   call resetNFTflags 
3117   A4DB 21 CA B1                   ld hl, bg_anim_4
3118   A4DE 22 B2 AD                   ld (nft_anim_p), hl
3119   A4E1 21 73 B6                   LD HL, qr_data_transID-7
3120   A4E4                            ;LD (HL), 'm'
3121   A4E4                            ;inc hl
3122   A4E4                            ;LD (HL), 'p'
3123   A4E4                            ;inc hl
3124   A4E4                            ;LD (HL), 'z'
3125   A4E4 CD 50 A7                   call QR_prepareData              
3126   A4E7 CD 39 AA                   call createQR29x29Mask7
3127   A4EA CD 6C A9                   call rs_encode
3128   A4ED CD 99 A7                   call qr_formatData
3129   A4F0             
3130   A4F0 3E 14                      ld a, 20
3131   A4F2 32 78 BB                   ld (qr_x), a 
3132   A4F5 32 79 BB                   ld (qr_y), a 
3133   A4F8 DD 21 D9 B7                ld ix, qr_copyzone
3134   A4FC 26 02                      ld h, 2
3135   A4FE CD E6 A5                   call printQRaw
3136   A501 CD F8 A5                   call printQRmask
3137   A504 CD 15 A6                   call printQRQuietZones
3138   A507 CD 30 A5                   call printBCH
3139   A50A CD 93 AA                   call printQRtextDetails
3140   A50D CD 25 A5                   call bgsloop
3141   A510 CD 5B 51                   bcall(_GrBufClr)
3142   A513               
3143   A513 CD 8F A3                   call draw_rmenu
3144   A516 21 78 B2                   ld hl, slot_win_states
3145   A519 22 BC AD                    ld (data_p+6), hl
3146   A51C CD FA A3                    call draw_top_layers              
3147   A51F CD A3 A2                    call draw_sarr_at_xarr_yarr
3148   A522 CD B6 91                        call ionFastCopy
3149   A525             
3150   A525             bgsloop:
3151   A525 3E FD                   ld A, %11111101
3152   A527 D3 01                   out (1), A
3153   A529 DB 01                   in a, (1)
3154   A52B E6 20                   and $20
3155   A52D C8                      ret z
3156   A52E 18 F5                   jr bgsloop
3157   A530             
3158   A530             ;                               ...43210   14...98   ;15 bits
3159   A530             ;qr_v3_BCHfinal:        .db     %01110110, %01101001
3160   A530             printBCH:
3161   A530 21 76 BB            ld hl, qr_v3_BCHfinal
3162   A533 3E 14               ld a, 20
3163   A535 4F                  ld c, a 
3164   A536 32 79 BB            ld (qr_y), a 
3165   A539 C6 03               add a, 3
3166   A53B 32 78 BB            ld (qr_x), a 
3167   A53E             
3168   A53E             ;BCH 0-7 offset = x+28, y+8
3169   A53E C6 1C               add a, 28
3170   A540 47                  ld b, a 
3171   A541 79                  ld a, c  
3172   A542 C6 09               add a, 8+1
3173   A544 4F                  ld c, a 
3174   A545 3E 40               ld a, LCD_HEIGHT
3175   A547 91                  sub c 
3176   A548 4F                  ld c, a 
3177   A549 16 80               ld d, $80   ;8; iterations
3178   A54B CD C5 A5            call _drawBCH
3179   A54E             
3180   A54E             ;BCH 0-5 offset = x+8, y+0+1  || y+1 *6
3181   A54E 3A 79 BB            ld a, (qr_y)
3182   A551 4F                  ld c, a  
3183   A552 3E 3F               ld a, LCD_HEIGHT-1
3184   A554 91                  sub c
3185   A555 4F                  ld c, a 
3186   A556 3A 78 BB            ld a, (qr_x)
3187   A559 C6 08               add a, 8 
3188   A55B 47                  ld b, a 
3189   A55C 16 20               ld d, $20   ;6 iterations
3190   A55E 3E 0D               ld a, $0D
3191   A560 32 DA A5            ld (_bcdir), a 
3192   A563 CD C5 A5            call _drawBCH
3193   A566 0D                  dec c
3194   A567                     ;sla e 
3195   A567                     ;ld d, $40
3196   A567                     ;call _bchi
3197   A567 16 01               ld d, 1 
3198   A569 CD E8 4A            bcall(_ipoint)  
3199   A56C 0D                  dec c
3200   A56D 16 00               ld d, 0 
3201   A56F CD E8 4A            bcall(_ipoint)
3202   A572 05                  dec b 
3203   A573 16 01               ld d, 1 
3204   A575 CD E8 4A            bcall(_ipoint)  
3205   A578 05                  dec b 
3206   A579 05                  dec b 
3207   A57A 05                  dec b 
3208   A57B 3E 05               ld a, $05
3209   A57D 32 DA A5            ld (_bcdir), a 
3210   A580 23                  inc hl 
3211   A581 16 40               ld d, $40   ;6 iterations   
3212   A583 1E 04               ld e, %00000100   
3213   A585 CD C7 A5            call _bchi    
3214   A588             ;BCH 8-14=(0-6) offset = x-8, y-14  || y-1 *7
3215   A588             
3216   A588 79                  ld a, c 
3217   A589 D6 0E               sub 14
3218   A58B 4F                  ld c, a 
3219   A58C 78                  ld a, b 
3220   A58D C6 09               add a, 9
3221   A58F 47                  ld b, a 
3222   A590 16 40               ld d, $40   ;7 iterations
3223   A592 3E 0D               ld a, $0D
3224   A594 32 DA A5            ld (_bcdir), a 
3225   A597 CD C5 A5            call _drawBCH   
3226   A59A 05                  dec b 
3227   A59B 05                  dec b 
3228   A59C 79                  ld a, c 
3229   A59D C6 09               add a, 9
3230   A59F 4F                  ld c, a 
3231   A5A0 1E 0D               ld e, 13
3232   A5A2 16 01               ld d, 1 
3233   A5A4 CD B3 A5            call drawDividers
3234   A5A7 0C                  inc c
3235   A5A8 04                  inc b
3236   A5A9 04                  inc b
3237   A5AA 3E 04               ld a, $04
3238   A5AC 32 BA A5            ld (_divd), a 
3239   A5AF CD B3 A5            call drawDividers
3240   A5B2 C9                  ret      
3241   A5B3             ;13 bits, 1010101....1
3242   A5B3             drawDividers:
3243   A5B3 1E 0D               ld e, 13
3244   A5B5 16 01               ld d, 1 
3245   A5B7             _divi:
3246   A5B7 CD E8 4A            bcall(_ipoint)
3247   A5BA 0C          _divd:  inc c
3248   A5BB 1D                  dec e
3249   A5BC C8                  ret z 
3250   A5BD 7A                  ld a, d 
3251   A5BE EE 01               xor 1
3252   A5C0 57                  ld d, a 
3253   A5C1 C3 B7 A5            jp _divi
3254   A5C4                     
3255   A5C4 C9                  ret
3256   A5C5             
3257   A5C5             _drawBCH:
3258   A5C5             
3259   A5C5 1E 01               ld e, %00000001
3260   A5C7                 
3261   A5C7             _bchi:
3262   A5C7 D5                  push de 
3263   A5C8 7E                  ld a, (hl)
3264   A5C9 A3                  and e 
3265   A5CA CA D5 A5            jp z, _bchzb
3266   A5CD 16 01               ld d, 1 
3267   A5CF CD E8 4A            bcall(_ipoint)
3268   A5D2 C3 DA A5            jp _bchcont
3269   A5D5             _bchzb:
3270   A5D5 16 00               ld d, 0
3271   A5D7 CD E8 4A            bcall(_ipoint)
3272   A5DA             _bchcont:
3273   A5DA             
3274   A5DA 05          _bcdir: dec b
3275   A5DB 7B                  ld a, e 
3276   A5DC D1                  pop de 
3277   A5DD 5F                  ld e, a 
3278   A5DE BA                  cp d
3279   A5DF C8                  ret z 
3280   A5E0 CB 23               sla e
3281   A5E2             
3282   A5E2 C3 C7 A5            jp _bchi
3283   A5E5 C9                  ret 
3284   A5E6             
3285   A5E6             ;ipoint b=x, c=y, d=f(off,on,xor,test,cpybuff2disp)
3286   A5E6             printQRaw:
3287   A5E6             ;Input:	ix->sprite
3288   A5E6             ;	a=x
3289   A5E6             ;	l=y
3290   A5E6             ;	b=height	(in pixels)
3291   A5E6             ;	c=width		(in bytes, e.g. 2 would be 16)
3292   A5E6              ;  h=off/on/xor
3293   A5E6               ;   (1=off/2=on/else=xor)
3294   A5E6 3A 79 BB                   ld a, (qr_y)
3295   A5E9 6F                         ld l, a 
3296   A5EA 3A 78 BB                   ld a, (qr_x)
3297   A5ED 06 1D                      ld b, 29
3298   A5EF 0E 04                      ld c, 4
3299   A5F1 CD 35 9E                   call put_any_Sprite
3300   A5F4 CD B6 91                   call ionFastCopy
3301   A5F7 C9                         ret 
3302   A5F8             
3303   A5F8             printQRmask: 
3304   A5F8 3A 79 BB                   ld a, (qr_y)
3305   A5FB 6F                         ld l, a 
3306   A5FC 3A 78 BB                   ld a, (qr_x)
3307   A5FF C6 03                      add a, 3 
3308   A601 32 78 BB                   ld (qr_x), a 
3309   A604 06 1D                      ld b, 29
3310   A606 0E 04                      ld c, 4
3311   A608 26 03                      ld h, 3
3312   A60A DD 21 FC B2                ld ix, QR_29x29_mask7
3313   A60E CD 35 9E                   call put_any_Sprite
3314   A611 CD B6 91                   call ionFastCopy
3315   A614 C9                         ret  
3316   A615             ;inputs:
3317   A615                          
3318   A615             printQRQuietZones: 
3319   A615             ;l=square dimension   
3320   A615             ;b=x1,c=y1
3321   A615             ;d=x2,e=y2
3322   A615             ;h= 0off/1on/2xor
3323   A615             
3324   A615             ;outer parimeters
3325   A615 3A 79 BB                   ld a, (qr_y)
3326   A618 3C                         inc a
3327   A619 32 79 BB                   ld (qr_y), a 
3328   A61C             
3329   A61C 3A 78 BB                   ld a, (qr_x)
3330   A61F 67                         ld h, a 
3331   A620 D6 07                      sub 7
3332   A622 32 78 BB                   ld (qr_x), a 
3333   A625 47                         ld b, a 
3334   A626 3A 79 BB                   ld a, (qr_y)
3335   A629 6F                         ld l, a 
3336   A62A D6 07                      sub 7 
3337   A62C 32 79 BB                   ld (qr_y), a 
3338   A62F E5                         push hl 
3339   A630 06 07                      ld b, 7
3340   A632 2E 2A                      ld l, 42
3341   A634             _outerq:               
3342   A634 C5                         push bc 
3343   A635 E5                         push hl 
3344   A636 26 00                      ld H, 00h
3345   A638 CD 28 A7                   call drawBox
3346   A63B E1                         pop hl 
3347   A63C 2D                         dec l
3348   A63D 2D                         dec l 
3349   A63E 3A 78 BB                   ld a, (qr_x)
3350   A641 3C                         inc a
3351   A642 32 78 BB                   ld (qr_x), a
3352   A645 3A 79 BB                   ld a, (qr_y)
3353   A648 3C                         inc a 
3354   A649 32 79 BB                   ld (qr_y), a 
3355   A64C C1                         pop bc 
3356   A64D 10 E5                      djnz _outerq
3357   A64F                         
3358   A64F E1                         pop hl           ;refresh original x,y vals
3359   A650 7C                         ld a, h 
3360   A651 32 78 BB                   ld (qr_x), a 
3361   A654 7D                         ld a, l 
3362   A655 32 79 BB                   ld (qr_y), a 
3363   A658             
3364   A658             ;orientor boxes
3365   A658 3A 79 BB                   ld a, (qr_y)
3366   A65B 3D                         dec a 
3367   A65C 32 79 BB                   ld (qr_y), a 
3368   A65F 6F                         ld l, a 
3369   A660 3A 78 BB                   ld a, (qr_x)
3370   A663 3D                         dec a 
3371   A664 32 78 BB                   ld (qr_x), a 
3372   A667 67                         ld h, a
3373   A668 E5                         push hl 
3374   A669 E5                         push hl 
3375   A66A 26 00                      LD H, 00h                       ;line off
3376   A66C 2E 08                      ld l, 8 
3377   A66E 06 03                      ld b, 3
3378   A670 CD E3 A6                   call draw_b_boxes
3379   A673 E1                         pop hl
3380   A674 24                         inc h  
3381   A675 2C                         inc l  
3382   A676 E5                         push hl 
3383   A677 7D                         ld a, l
3384   A678 32 79 BB                   ld (qr_y), a 
3385   A67B 7C                         ld a, h
3386   A67C 32 78 BB                   ld (qr_x), a
3387   A67F 06 04                      ld b, 4 
3388   A681 26 01                      ld H, 01h
3389   A683 2E 06                      ld l, 6
3390   A685 CD E3 A6                   call draw_b_boxes
3391   A688 E1                         pop hl
3392   A689 24                         inc h  
3393   A68A 2C                         inc l  
3394   A68B E5                         push hl 
3395   A68C 7D                         ld a, l
3396   A68D 32 79 BB                   ld (qr_y), a 
3397   A690 7C                         ld a, h
3398   A691 32 78 BB                   ld (qr_x), a
3399   A694 26 00                      ld H, 00h
3400   A696 2E 04                      ld l, 4 
3401   A698 06 04                      ld b, 4 
3402   A69A CD E3 A6                   call draw_b_boxes       
3403   A69D E1                         pop hl
3404   A69E 24                         inc h
3405   A69F 2C                         inc l
3406   A6A0 E5                         push hl  
3407   A6A1 7D                         ld a, l
3408   A6A2 32 79 BB                   ld (qr_y), a
3409   A6A5 7C                         ld a, h
3410   A6A6 32 78 BB                   ld (qr_x), a
3411   A6A9 26 01                      ld H, 01h
3412   A6AB 2E 02                      ld l, 2
3413   A6AD 06 04                      ld b, 4 
3414   A6AF CD E3 A6                   call draw_b_boxes
3415   A6B2 E1                         pop hl
3416   A6B3 E1                         pop hl 
3417   A6B4             ;ipoint b=x, c=y, d=f(off,on,xor,test,cpybuff2disp)
3418   A6B4 7C                         ld a, h 
3419   A6B5 32 78 BB                   ld (qr_x), a 
3420   A6B8 3C                         inc a 
3421   A6B9 44                         ld b, h 
3422   A6BA 04                         inc b 
3423   A6BB 7D                         ld a, l              
3424   A6BC 32 79 BB                   ld (qr_y), a
3425   A6BF 3C                         inc a  
3426   A6C0 4F                         ld c, a 
3427   A6C1 3E 40                      ld a, LCD_HEIGHT
3428   A6C3 91                         sub c 
3429   A6C4 4F                         ld c, a 
3430   A6C5 3E 03                      ld a, 3 
3431   A6C7 80                         add a, b 
3432   A6C8 47                         ld b, a 
3433   A6C9 79                         ld a, c 
3434   A6CA D6 03                      sub 3 
3435   A6CC 4F                         ld c, a 
3436   A6CD 16 01                      ld d, 1 ;pton
3437   A6CF CD E8 4A                   bcall(_ipoint)
3438   A6D2 C5                         push bc 
3439   A6D3 78                         ld a, b
3440   A6D4 C6 16                      add a, 22
3441   A6D6 47                         ld b, a 
3442   A6D7 CD E8 4A                   bcall(_ipoint)
3443   A6DA C1                         pop bc 
3444   A6DB 79                         ld a, c
3445   A6DC D6 16                      sub 22
3446   A6DE 4F                         ld c, a 
3447   A6DF CD E8 4A                   bcall(_ipoint)     
3448   A6E2 C9                         ret
3449   A6E3             ;draw's b boxes, of size L 
3450   A6E3             draw_B_boxes:           
3451   A6E3             
3452   A6E3             _dbbi:         
3453   A6E3 C5                         push bc
3454   A6E4             
3455   A6E4 CD 28 A7                   call drawBox ;upper left
3456   A6E7 C1                         pop bc 
3457   A6E8 05                         dec b 
3458   A6E9 C8                         ret z 
3459   A6EA C5                         push bc 
3460   A6EB 3A 78 BB                   ld a, (qr_x)
3461   A6EE C6 16                      add a, 22
3462   A6F0 32 78 BB                   ld (qr_x), a 
3463   A6F3 CD 28 A7                   call drawBox ;upper right
3464   A6F6 C1                         pop bc 
3465   A6F7 05                         dec b 
3466   A6F8 C8                         ret z 
3467   A6F9 C5                         push bc 
3468   A6FA 3A 78 BB                   ld a, (qr_x)
3469   A6FD D6 16                      sub 22
3470   A6FF 32 78 BB                   ld (qr_x), a     
3471   A702 3A 79 BB                   ld a, (qr_y)
3472   A705 C6 16                      add a, 22
3473   A707 32 79 BB                   ld (qr_y), a              
3474   A70A             
3475   A70A CD 28 A7                   call drawBox ;lower left 
3476   A70D C1                         pop bc 
3477   A70E 05                         dec b 
3478   A70F C8                         ret z 
3479   A710 C5                         push bc 
3480   A711 2D                         dec l       
3481   A712 2D                         dec l
3482   A713 3A 78 BB                   ld a, (qr_x)
3483   A716 C6 14                      add a, 20
3484   A718 32 78 BB                   ld (qr_x), a     
3485   A71B 3A 79 BB                   ld a, (qr_y)
3486   A71E D6 02                      sub 2 
3487   A720 32 79 BB                   ld (qr_y), a 
3488   A723 CD 28 A7                   call drawBox ;lower right mini 
3489   A726 C1                         pop bc 
3490   A727 C9                         ret
3491   A728             ;l=square dimension   
3492   A728             ;b=x1,c=y1
3493   A728             ;d=x2,e=y2
3494   A728             ;h= 0off/1on/2xor
3495   A728             drawBox:                                              
3496   A728 3A 78 BB                   ld a, (qr_x)
3497   A72B 47                         ld b, a 
3498   A72C 85                         add a, l
3499   A72D 57                         ld d, a 
3500   A72E 3A 79 BB                   ld a, (qr_y)
3501   A731 4F                         ld c, a 
3502   A732 3E 40                      ld a, LCD_HEIGHT
3503   A734 91                         sub c 
3504   A735 4F                         ld c, a 
3505   A736 5F                         ld e, a 
3506   A737 CD E4 4A                   bcall(_iline)
3507   A73A 95                         sub l
3508   A73B 5F                         ld e, a 
3509   A73C 50                         ld d, b 
3510   A73D CD E4 4A                   bcall(_iline)
3511   A740 4B                         ld c, e 
3512   A741 42                         ld b, d 
3513   A742 7A                         ld a, d 
3514   A743 85                         add a, l
3515   A744 57                         ld d, a 
3516   A745 CD E4 4A                   bcall(_iline)
3517   A748 42                         ld b, d 
3518   A749 7B                         ld a, e 
3519   A74A 85                         add a, l
3520   A74B 5F                         ld e, a 
3521   A74C CD E4 4A                   bcall(_iline)  
3522   A74F C9                         ret 
3523   A750                       
3524   A750             QR_prepareData:
3525   A750 CD 8B A7        call getDataSTRLen
3526   A753             
3527   A753 78              ld a, b 
3528   A754 32 4A B6        ld (qr_data_len), a 
3529   A757 32 6C BB        ld (qr_data_len_backup), a 
3530   A75A             ;need to shift all data left 4 bits,  until 1st 4 bits of type 
3531   A75A             ;type      len      | data(x55)...
3532   A75A             ;0100 0000 0001 0100| ---------
3533   A75A             ;       A <- B  <- C      
3534   A75A AF              xor a 
3535   A75B 04              inc b 
3536   A75C 04              inc b 
3537   A75D 04              inc b 
3538   A75E 21 7A B6        ld hl, qr_data_transID
3539   A761             _l4shift:
3540   A761 ED 6F           rld 
3541   A763 2B              dec hl 
3542   A764 10 FB           djnz _l4shift
3543   A766             ;pad out remainder of D-Space
3544   A766             _pad:
3545   A766             
3546   A766 3A 6C BB        ld a, (qr_data_len_backup)
3547   A769 5F              ld e, a
3548   A76A 3E 36           ld a, QR_V3L_DWORDS-1
3549   A76C 93              sub e
3550   A76D             
3551   A76D             ;add url code logic here(qr_str(len)+qr_urlcodeLen)
3552   A76D 21 49 B6        ld hl, qr_data
3553   A770 1C              inc e
3554   A771 1C              inc e 
3555   A772 4B              ld c, e 
3556   A773 06 00           ld b, 0  
3557   A775 09              add hl, bc 
3558   A776 47              ld b, a
3559   A777 3E EC           ld a, $EC
3560   A779             _padlp:
3561   A779 77              ld (hl), a
3562   A77A EE FD           xor $FD
3563   A77C 23              inc hl 
3564   A77D 10 FA           djnz _padlp
3565   A77F             
3566   A77F 21 49 B6        ld hl, qr_data
3567   A782 11 AD B6        ld de, qr_DSpace_Message
3568   A785 01 37 00        ld bc, QR_V3L_DWORDS
3569   A788 ED B0           ldir
3570   A78A C9              ret
3571   A78B             
3572   A78B             ;returns the NABK count of the data string in b register
3573   A78B             getDataSTRLen:
3574   A78B 21 4B B6        ld hl, qr_data_string
3575   A78E 06 00           ld b, 0 
3576   A790 3E 00           ld a, 0
3577   A792             gtstrLP:
3578   A792 BE              cp (hl)
3579   A793 C8              ret z
3580   A794 04              inc b
3581   A795 23              inc hl
3582   A796 C3 92 A7        jp gtstrLP
3583   A799             
3584   A799             
3585   A799             
3586   A799             ;formats & copies data to copyzone   
3587   A799             qr_formatData:
3588   A799             
3589   A799             ;then pad remaining
3590   A799 21 4C B8        ld hl, qr_copyzone+QR_29X29_BYTES-1
3591   A79C DD 21 AD B6     ld ix, qr_DSpace_Message
3592   A7A0 16 80           ld d, %10000000 ;data bit
3593   A7A2 1E 01           ld e, %00000001 ;copy-to bit 
3594   A7A4 06 1D           ld b, QR_ROOF
3595   A7A6 3E 46           ld a, QR_V3L_DWORDS+QR_V3L_EWORDS
3596   A7A8 32 6D BB        ld (qr_wc), a 
3597   A7AB             
3598   A7AB             _fmtDLPi:
3599   A7AB                
3600   A7AB             fmtdsub:
3601   A7AB             
3602   A7AB             _fmtDLPk:
3603   A7AB C5               push bc 
3604   A7AC 06 02             ld b, 2 
3605   A7AE             
3606   A7AE             _fmtDLPj:
3607   A7AE 7E                ld a, (hl)
3608   A7AF A3                and e     ;check copy-to position for barrier
3609   A7B0 C2 D4 A7          jp nz, _Br
3610   A7B3                   
3611   A7B3 DD 7E 00          ld a, (ix)
3612   A7B6 A2                and d 
3613   A7B7 28 03             jr z, _fmdz
3614   A7B9 7E                ld a, (hl)
3615   A7BA B3                or e 
3616   A7BB 77                ld (hl), a 
3617   A7BC             _fmdz:
3618   A7BC 7B                ld a, e
3619   A7BD CB 3A             srl d 
3620   A7BF C2 D4 A7          jp nz, _Br
3621   A7C2 16 80             ld d, %10000000
3622   A7C4 DD 23             inc ix 
3623   A7C6 3A 6D BB          ld a, (qr_wc)
3624   A7C9 3D                dec a 
3625   A7CA 32 6D BB          ld (qr_wc), a 
3626   A7CD C2 D4 A7          jp nz, _Br
3627   A7D0 C1                pop bc 
3628   A7D1 C3 12 A8          jp _qr_endofdatastring 
3629   A7D4 7B          _Br:  ld a, e 
3630   A7D5 EE 03       _flp: xor %11 
3631   A7D7 5F                ld e, a 
3632   A7D8             _nrd:
3633   A7D8 10 D4             djnz _fmtDLPj
3634   A7DA C1                pop bc 
3635   A7DB C5                push bc 
3636   A7DC 05                dec b
3637   A7DD CA E9 A7          jp z, _reachedTopOrBottom 
3638   A7E0                   
3639   A7E0 01 04 00    _ddr: ld bc, 4 
3640   A7E3 A7                and a ;reset carry flag
3641   A7E4 ED 42       _dir: sbc hl, bc        
3642   A7E6 C1               pop bc 
3643   A7E7 10 C2            djnz _fmtDLPk
3644   A7E9             
3645   A7E9             _reachedTopOrBottom:
3646   A7E9 CB 23            sla e 
3647   A7EB CB 23            sla e      
3648   A7ED 20 0B            jr nz, _nre
3649   A7EF             
3650   A7EF             ;end of full 8bit column
3651   A7EF 1E 01            ld e, %00000001
3652   A7F1 2B               dec hl 
3653   A7F2 3E 03            ld a, 3 
3654   A7F4 32 D6 A7         ld (_flp+1), a 
3655   A7F7 C3 04 A8         jp _ered
3656   A7FA             
3657   A7FA             _nre:
3658   A7FA 3A D6 A7         ld a, (_flp+1)
3659   A7FD CB 27            sla a 
3660   A7FF CB 27            sla a 
3661   A801 32 D6 A7         ld (_flp+1), a 
3662   A804             
3663   A804             _ered:     
3664   A804 3A E5 A7         ld a, (_dir+1)
3665   A807 EE 08            xor %1000   ;flipdir adc/sbc
3666   A809 32 E5 A7         ld (_dir+1), a     
3667   A80C C1              pop bc  
3668   A80D 06 1D           ld b, QR_ROOF
3669   A80F C3 AB A7         jp _fmtDLPk
3670   A812             
3671   A812             
3672   A812             _qr_endofdatastring:
3673   A812             
3674   A812 21 FD B7        ld hl, qr_copyzone+36
3675   A815 16 80           ld d, %10000000
3676   A817 06 0C           ld b, 12 
3677   A819             _c8i:  
3678   A819 16 80           ld d, %10000000
3679   A81B 4E              ld c, (hl)
3680   A81C CB 21           sla c 
3681   A81E 71              ld (hl), c 
3682   A81F 23              inc hl 
3683   A820             
3684   A820 7E              ld a, (hl)
3685   A821 A2              and d 
3686   A822 CA 2C A8        jp z, _z8z8
3687   A825 2B              dec hl 
3688   A826 7E              ld a, (hl)
3689   A827 F6 01           or %00000001
3690   A829 C3 30 A8        jp _z8e
3691   A82C             _z8z8:
3692   A82C 2B              dec hl 
3693   A82D 7E              ld a, (hl)
3694   A82E E6 FE           and %11111110
3695   A830             _z8e:
3696   A830 77              ld (hl), a 
3697   A831 23              inc hl
3698   A832 CB 3A           srl d 
3699   A834 7E              ld a, (hl)
3700   A835 A2              and d 
3701   A836 CA 3F A8        jp z, _z9z9
3702   A839 7E              ld a, (hl)
3703   A83A F6 80           or %10000000
3704   A83C C3 42 A8        jp _z9e
3705   A83F             _z9z9:
3706   A83F 7E              ld a, (hl)
3707   A840 E6 7F           and %01111111 
3708   A842             _z9e:
3709   A842 77              ld (hl), a
3710   A843 23              inc hl
3711   A844 23              inc hl 
3712   A845 23              inc hl
3713   A846 10 D1           djnz _c8i
3714   A848             
3715   A848                 ;call qr_produceBCH
3716   A848                 ;call qr_mask_ED_Space
3717   A848 C9              ret
3718   A849             
3719   A849             ;bits 0-14, edged bits
3720   A849             ;ec level = 01, mask pattern = 111
3721   A849             ;   = 01111    
3722   A849             ;     shift left 10 bits, so we have 15 bits of space
3723   A849             ;   =                (A)   011110000000000
3724   A849             ;Generator polynomial(B):  10100110111  
3725   A849             ;align by significance, then poly divide:
3726   A849             ;                        11110000000000
3727   A849             ;                     p/ 10100110111000   
3728   A849             ;                     ---------------------
3729   A849             ;011110000000000
3730   A849             ; 10100110111000
3731   A849             ;---------------
3732   A849             ;001010110111000
3733   A849             ;  1010011011100
3734   A849             ;---------------
3735   A849             ;      ___________
3736   A849             ;  0000101100100 | <--answer
3737   A849             ;     |__________/    
3738   A849             
3739   A849             ;    14, 13, 12, 11, 10, 9
3740   A849             ;    1    1   0   1   0  0
3741   A849             
3742   A849             ;data    01111|0101100100
3743   A849             ;mask    10101|0000010010    
3744   A849             
3745   A849             ;res     11010|0101110110
3746   A849             qr_produceBCH:
3747   A849 21 70 BB        ld hl, qr_v3_BCHmask
3748   A84C DD 21 72 BB     ld ix, qr_v3_BCHcode
3749   A850 7E              ld a, (hl)
3750   A851 DD 46 00        ld b, (ix)
3751   A854 A8              xor b 
3752   A855 32 76 BB        ld (qr_v3_BCHfinal), a
3753   A858 23              inc hl 
3754   A859 13              inc de
3755   A85A 7E              ld a, (hl)
3756   A85B DD 46 00        ld b, (ix)
3757   A85E A8              xor b
3758   A85F 32 77 BB        ld (qr_v3_BCHfinal+1), a
3759   A862             
3760   A862 C9              ret 
3761   A863             qr_mask_ED_Space:
3762   A863 06 46                      ld b, QR_V3L_DWORDS+QR_V3L_EWORDS
3763   A865 21 D9 B7                   ld hl, qr_copyzone
3764   A868 11 FC B2                   ld de, QR_29x29_mask7
3765   A86B                            
3766   A86B             _mski:             
3767   A86B 1A                         ld a, (de)
3768   A86C AE                         xor (hl)
3769   A86D 77                         ld (hl), a 
3770   A86E 23                         inc hl 
3771   A86F 13                         inc de 
3772   A870 10 F9                      djnz _mski
3773   A872             
3774   A872             ;-------------Reed Solomon Error Detect&Correct (EDC)------------
3775   A872             
3776   A872             ;--Galois Fields
3777   A872             ;256 bit values, adding/subtracting, pos/neg are the same
3778   A872             
3779   A872             ;inputs: a=x, c=y
3780   A872             ;result: a
3781   A872             gf_add:
3782   A872 A9              xor c 
3783   A873 C9              ret 
3784   A874             ;inputs: a=x, c=y
3785   A874             ;result: a
3786   A874             gf_multiply:
3787   A874 21 4B BA        ld hl, gf_log_table
3788   A877 57              ld d, a
3789   A878 F6 00           or %0
3790   A87A CA 9E A8        jp z, _ze
3791   A87D 79              ld a, c 
3792   A87E F6 00           or %0
3793   A880 CA 9E A8        jp z, _ze
3794   A883 7A              ld a, d 
3795   A884             ;load log(x) and log(y)
3796   A884 06 00           ld b, 0
3797   A886 16 00           ld d, 0 
3798   A888 09              add hl, bc 
3799   A889 5E              ld e, (hl) ;y
3800   A88A 21 4B BA        ld hl, gf_log_table
3801   A88D 4F              ld c, a
3802   A88E 09              add hl, bc 
3803   A88F 7E              ld a, (hl) ;x
3804   A890 6F              ld l, a 
3805   A891 26 00           ld h, 0 
3806   A893 16 00           ld d, 0 
3807   A895 19              add hl, de   ;16 bit addition 
3808   A896 4D              ld c, l
3809   A897 44              ld b, h 
3810   A898                 ;load exp(result)
3811   A898 21 4D B8        ld hl, gf_exp_table 
3812   A89B 09              add hl, bc 
3813   A89C 7E              ld a, (hl)
3814   A89D C9              ret
3815   A89E             
3816   A89E             _ze:    
3817   A89E AF              xor a
3818   A89F C9              ret         ;return 0
3819   A8A0             
3820   A8A0             ;Polynomial multiplication
3821   A8A0             ;           
3822   A8A0             ;   inputs: rs_p1*=poly1, (p1len)=len1, rs_p2*=poly2, (p2len)=len2
3823   A8A0             ;           resultPointer
3824   A8A0             ;   output: rs_pr*=result poly, (pResLen)=resultLen=(p1Len+p2Len - 1 )
3825   A8A0             poly_mult:
3826   A8A0                 ;Alloc mem for result (len1 + len2 -1)
3827   A8A0 2A 58 BB        ld hl, (pMultRes_p)
3828   A8A3 EB              ex de, hl 
3829   A8A4 13              inc de 
3830   A8A5 2A 58 BB        ld hl, (pMultRes_p)
3831   A8A8                 ;zero out result
3832   A8A8 36 00           ld (hl), $00
3833   A8AA 3A 55 BB        ld a, (p1len) 
3834   A8AD 47              ld b, a 
3835   A8AE 3A 56 BB        ld a, (p2len)
3836   A8B1 80              add a, b
3837   A8B2 3D              dec a 
3838   A8B3 32 57 BB        ld (pResLen), a 
3839   A8B6 4F              ld c, a 
3840   A8B7 06 00           ld b, 0 
3841   A8B9                 ;ld bc, QR_V3L_DWORDS+QR_V3L_EWORDS
3842   A8B9 ED B0           ldir
3843   A8BB             ; Input: rdi = pointer to poly1, rsi = len1, rdx = pointer to poly2, rcx = len2
3844   A8BB             ; Output: rax = pointer to result poly, rbx = result length
3845   A8BB 2A 4B BB        ld hl, (rs_p1)
3846   A8BE 22 4F BB        ld (rs_p1s), hl 
3847   A8C1 2A 4D BB        ld hl, (rs_p2)
3848   A8C4 22 51 BB        ld (rs_p2s), hl 
3849   A8C7 2A 58 BB        ld hl, (pMultRes_p)
3850   A8CA 22 53 BB        ld (rs_pr), hl 
3851   A8CD                 ;Perform polynomial multiplication
3852   A8CD 01 00 00        ld bc, 0
3853   A8D0             _polyI:     ;i= len of poly1
3854   A8D0 C5              push bc
3855   A8D1 2A 51 BB         ld hl, (rs_p2s)
3856   A8D4 22 4D BB         ld (rs_p2), hl  ; reset L2
3857   A8D7 06 00            ld b, 0
3858   A8D9             _polyJ:     ;j= len of poly2
3859   A8D9 C5               push bc 
3860   A8DA                  ;Load coefficiencts
3861   A8DA 2A 4B BB          ld hl, (rs_p1)
3862   A8DD 7E                ld a, (hl)
3863   A8DE 2A 4D BB          ld hl, (rs_p2)
3864   A8E1 4E                ld c, (hl)
3865   A8E2                   ;multiply coefficients
3866   A8E2 CD 74 A8          call gf_multiply
3867   A8E5                   ;add to the result
3868   A8E5 5F                ld e, a ;result
3869   A8E6 C1               pop bc 
3870   A8E7 78               ld a, b  ;a=j
3871   A8E8 57               ld d, a  ;d=j 
3872   A8E9 C1              pop bc 
3873   A8EA C5              push bc   ;b=i
3874   A8EB 80               add a, b ;i+j
3875   A8EC 06 00            ld b, 0 
3876   A8EE 4F               ld c, a 
3877   A8EF 2A 53 BB         ld hl, (rs_pr)
3878   A8F2 09               add hl, bc 
3879   A8F3                 ;ld (rs_pr), hl
3880   A8F3 7E               ld a, (hl)
3881   A8F4 4B               ld c, e   
3882   A8F5 42               ld b, d   ;push j back onto top of stack
3883   A8F6 C5                push bc    ;.
3884   A8F7 CD 72 A8          call gf_add 
3885   A8FA 77                ld (hl), a 
3886   A8FB 3A 56 BB          ld a, (p2len)
3887   A8FE C1               pop bc 
3888   A8FF 2A 4D BB         ld hl, (rs_p2)
3889   A902 23               inc hl
3890   A903 22 4D BB         ld (rs_p2), hl 
3891   A906 04               inc b  ;d=j=poly2.len
3892   A907 B8               cp b 
3893   A908 C2 D9 A8         jp nz, _polyJ
3894   A90B             
3895   A90B 2A 4B BB         ld hl, (rs_p1)
3896   A90E 23               inc hl 
3897   A90F 22 4B BB         ld (rs_p1), hl 
3898   A912 C1              pop bc
3899   A913 04              inc b 
3900   A914 3A 55 BB        ld a, (p1len)
3901   A917 B8              cp b 
3902   A918 C2 D0 A8        jp nz, _polyI 
3903   A91B             
3904   A91B C9              ret 
3905   A91C             ; def multiply(self, other):
3906   A91C             ;    result = [0] * (len(self.coefficients) + len(other.coefficients) - 1)
3907   A91C             ;    for i, coef1 in enumerate(self.coefficients):
3908   A91C             ;        for j, coef2 in enumerate(other.coefficients):
3909   A91C             ;            result[i + j] = self.gf.add(result[i + j], self.gf.multiply(coef1, coef2))
3910   A91C             ;    return Polynomial(result, self.gf)
3911   A91C             
3912   A91C             
3913   A91C             
3914   A91C             pdiv:
3915   A91C             ;def __mod__(self, other):
3916   A91C             ;
3917   A91C             ;# Polynomial division (remainder)
3918   A91C             ;result = self.coefficients[:]
3919   A91C             ;divisor = other.coefficients
3920   A91C             
3921   A91C             ;while len(result) >= len(divisor):
3922   A91C             
3923   A91C 3E 45            ld a, QR_V3L_DWORDS+QR_V3L_EWORDS-1  ;res=msg
3924   A91E 32 62 BB         ld (rs_msglen), a 
3925   A921             _pdivI: 
3926   A921                 
3927   A921 3A 67 BB         ld a, (pdiv_divisorLen)
3928   A924 47               ld b, a
3929   A925 3A 62 BB         ld a, (rs_msglen)
3930   A928 B8               cp b
3931   A929 DA 6B A9         jp c, _pdivFIN
3932   A92C DD 2A 5A BB      ld ix, (rs_gen_poly_p)
3933   A930 DD 22 60 BB      ld (pdiv_divisor_p), ix 
3934   A934 2A 5C BB         ld hl, (msg_p)
3935   A937 22 5E BB         ld (pdiv_res_p), hl 
3936   A93A                  ;ld (pdiv_divisorLen), a ;len(divisor)
3937   A93A                  ;coeff = result[0]
3938   A93A 7E               ld a, (hl)
3939   A93B 32 65 BB         ld (pdiv_coeff), a 
3940   A93E 06 00            ld b, 0 
3941   A940             ;    for i in range(len(divisor)):  for 0-(x-1)
3942   A940             ;        result[i] = self.field.add(result[i], self.field.multiply(coeff, divisor[i]))
3943   A940             ;    result.pop(0) ;remove 1st element from list.  [a,b,c].pop(0) = [b,c]
3944   A940             _pdivJ:
3945   A940 C5               push bc 
3946   A941 E5                push hl 
3947   A942 DD 4E 00           ld c, (ix)
3948   A945 3A 65 BB           ld a, (pdiv_coeff)
3949   A948 CD 74 A8           call gf_multiply
3950   A94B                    ;result in a
3951   A94B E1                pop hl 
3952   A94C 4E                ld c, (hl) ;result[i]
3953   A94D CD 72 A8          call gf_add 
3954   A950 77                ld (hl), a 
3955   A951 C1              pop bc 
3956   A952 DD 23           inc ix 
3957   A954 23              inc hl 
3958   A955 3A 67 BB        ld a, (pdiv_divisorLen)
3959   A958 04              inc b
3960   A959 B8              cp b 
3961   A95A D2 40 A9        jp nc, _pdivJ
3962   A95D 3A 62 BB        ld a, (rs_msglen)
3963   A960 3D              dec a
3964   A961 32 62 BB        ld (rs_msglen), a 
3965   A964                 ;pop res[0]
3966   A964 23              inc hl 
3967   A965 22 5C BB        ld (msg_p), hl 
3968   A968 C3 21 A9        jp _pdivI
3969   A96B             
3970   A96B             _pdivFIN:
3971   A96B             
3972   A96B             ;return Polynomial(result, self.field)
3973   A96B             ;    result = msg_p*(rs_msglen)
3974   A96B C9              ret
3975   A96C             
3976   A96C             
3977   A96C             ;reed solomon encode the EDC field
3978   A96C             ;inputs: D-Space fields, EDC Count, GS pointer, message(full Dspace)(msg_p)
3979   A96C             ;
3980   A96C             
3981   A96C             rs_encode:
3982   A96C             ;# Initialize the generator polynomial to [1]
3983   A96C             ;    gen = Polynomial([1], gf)
3984   A96C 21 93 B7        ld hl, rs_poly_result
3985   A96F 22 58 BB        ld (pMultRes_p), hl 
3986   A972 3E 01           ld a, 1
3987   A974 32 55 BB        ld (p1len), a 
3988   A977 21 4B B7        ld hl, poly_multL1
3989   A97A 77              ld (hl), a 
3990   A97B 22 4B BB        ld (rs_p1), hl
3991   A97E             
3992   A97E 06 0F           ld b, QR_V3L_EWORDS
3993   A980 0E 00           ld c, 0
3994   A982             
3995   A982             ;    # Build the generator polynomial by multiplying it with (x + gf.exp_table[i]) for each i
3996   A982             ;    for i in range(nsym):
3997   A982             ;        gen *= Polynomial([1, gf.exp_table[i]], gf)
3998   A982             _rsI:
3999   A982 C5              push bc
4000   A983             
4001   A983                 ;ld ix, pResLen
4002   A983 3E 02           ld a, 2
4003   A985 32 56 BB        ld (p2len), a    ;starting gen p2len = 1st call to poly([1],gf.exp_table[i])
4004   A988 21 91 B7        ld hl, poly_multL2
4005   A98B 22 4D BB        ld (rs_p2), hl 
4006   A98E              
4007   A98E 21 4D B8        ld hl, gf_exp_table
4008   A991                 ;gen *= Polynomial([1, gf.exp_table[i]], gf)
4009   A991 06 00           ld b, 0 
4010   A993 09              add hl, bc
4011   A994 7E              ld a, (hl)  ;gf.exp_table[i] 
4012   A995 32 92 B7        ld (poly_multL2+1), a 
4013   A998             
4014   A998 21 91 B7        ld hl, poly_multL2
4015   A99B 22 4D BB        ld (rs_p2), hl 
4016   A99E CD A0 A8        call poly_mult   ;result in (pMultRes_p)
4017   A9A1             
4018   A9A1                 ;copy res to gen
4019   A9A1 21 93 B7        ld hl, rs_poly_result
4020   A9A4 11 F4 B6        ld de, rs_gen
4021   A9A7 3A 57 BB        ld a, (pResLen)
4022   A9AA 4F              ld c, a
4023   A9AB 06 00           ld b, 0  
4024   A9AD ED B0           ldir 
4025   A9AF             
4026   A9AF 3A 55 BB        ld a, (p1len)    
4027   A9B2 3C              inc a 
4028   A9B3 32 55 BB        ld (p1len), a 
4029   A9B6 21 F4 B6        ld hl, rs_gen   
4030   A9B9 22 4B BB        ld (rs_p1), hl  ;last polymult result = next arg1
4031   A9BC C1              pop bc
4032   A9BD 0C              inc c
4033   A9BE 10 C2           djnz _rsI
4034   A9C0             
4035   A9C0             
4036   A9C0             ;# Compute the remainder of the message polynomial divided by the generator polynomial
4037   A9C0             ;remainder = Polynomial(msg.coefficients[:], gf)
4038   A9C0             ;msg = remainder = padded message
4039   A9C0             
4040   A9C0             ;   copy message over to remainder
4041   A9C0 21 AD B6        ld hl, qr_DSpace_Message
4042   A9C3 11 04 B7        ld de, rs_msg_remainder
4043   A9C6 ED 53 69 BB     ld (rs_remainder_p), de 
4044   A9CA 01 47 00        ld bc, QR_V3L_DWORDS+QR_V3L_EWORDS+1
4045   A9CD ED B0           ldir 
4046   A9CF             
4047   A9CF 06 37           ld b, QR_V3L_DWORDS
4048   A9D1 0E 00           ld c, 0
4049   A9D3             
4050   A9D3             
4051   A9D3             _rs_remain_i:
4052   A9D3 C5              push bc 
4053   A9D4 2A 69 BB        ld hl, (rs_remainder_p)
4054   A9D7 06 00           ld b, 0
4055   A9D9 09              add hl, bc 
4056   A9DA 7E              ld a, (hl) 
4057   A9DB 32 6B BB        ld (rs_coeff), a 
4058   A9DE F6 00           or %0
4059   A9E0 CA 11 AA        jp z, _riZ
4060   A9E3 06 10            ld b, QR_V3L_EWORDS+1  
4061   A9E5 0E 00            ld c, 0 
4062   A9E7             
4063   A9E7             _rs_remain_j:     ;j= len of poly2
4064   A9E7 C5               push bc 
4065   A9E8                  ;Load coefficiencts
4066   A9E8 21 F4 B6          ld hl, rs_gen
4067   A9EB 06 00             ld b, 0
4068   A9ED 09                add hl, bc 
4069   A9EE 4E                ld c, (hl)        ;gen[j]
4070   A9EF 3A 6B BB          ld a, (rs_coeff)  ;coeff
4071   A9F2 CD 74 A8          call gf_multiply
4072   A9F5                   ;add to the result
4073   A9F5 5F                ld e, a ;result
4074   A9F6 C1               pop bc 
4075   A9F7 79               ld a, c  ;a=j
4076   A9F8 57               ld d, a  ;d=j 
4077   A9F9 E1              pop hl
4078   A9FA E5              push hl 
4079   A9FB C5               push bc  
4080   A9FC 85                add a, l ;i+j
4081   A9FD 06 00             ld b, 0 
4082   A9FF 4F                ld c, a 
4083   AA00 2A 69 BB          ld hl, (rs_remainder_p)
4084   AA03 09                add hl, bc 
4085   AA04                   ;ld (rs_pr), hl
4086   AA04 7E                ld a, (hl)
4087   AA05 4B                ld c, e   
4088   AA06 CD 72 A8          call gf_add 
4089   AA09 77                ld (hl), a 
4090   AA0A 3A 56 BB          ld a, (p2len)
4091   AA0D C1               pop bc 
4092   AA0E 0C               inc c  ;d=j=poly2.len
4093   AA0F 10 D6            djnz _rs_remain_j    
4094   AA11             
4095   AA11             _riZ:
4096   AA11 C1              pop bc
4097   AA12 0C              inc c 
4098   AA13 10 BE           djnz _rs_remain_i
4099   AA15             
4100   AA15                 ;copy EDC to end of D_Words
4101   AA15 21 3B B7        ld hl, rs_msg_remainder+QR_V3L_DWORDS
4102   AA18 11 E4 B6        ld de, qr_DSpace_Message+QR_V3L_DWORDS
4103   AA1B 01 0F 00        ld bc, QR_V3L_EWORDS
4104   AA1E ED B0           ldir 
4105   AA20             
4106   AA20             
4107   AA20                 ;qr_Dspace_message now contains full code word
4108   AA20             
4109   AA20             
4110   AA20 C9              ret 
4111   AA21             
4112   AA21             ;remainder = msg % gen  # Calculate the remainder
4113   AA21 DD 2A 5A BB      ld ix, (rs_gen_poly_p)
4114   AA25 DD 22 60 BB      ld (pdiv_divisor_p), ix 
4115   AA29 2A 5C BB         ld hl, (msg_p)
4116   AA2C 22 5E BB         ld (pdiv_res_p), hl 
4117   AA2F             
4118   AA2F CD 1C A9         call pdiv
4119   AA32 2A 5C BB         ld hl, (msg_p)
4120   AA35                  ;remainder
4121   AA35 22 63 BB         ld (pdiv_remainder_p), hl
4122   AA38             
4123   AA38             ;    # Append the remainder to the original data to form the encoded message
4124   AA38             ;    return data + remainder.coefficients
4125   AA38 C9               ret 
4126   AA39             
4127   AA39             
4128   AA39             ;generateQRCode()
4129   AA39             ;   generates a QR code, detailing the unique state of the game/device.  
4130   AA39             ;   scanning the code will direct the user to a url, allowing them to connect a wallet & receive payout
4131   AA39             ;12px
4132   AA39             ;quietzone: (surrounding blank space) = >=4 resolutions;
4133   AA39             ;version = 3 (29x29)
4134   AA39             
4135   AA39             ;rows 0,3,6...: s0 = %10101010; repeat.
4136   AA39             ;   next: cpl(last)   
4137   AA39             ;rows (1),2, 4,5...: s1 = %00011100, f0 = %01101101 CY1; push af(CYF); s0xor(f0); pop AF; rr (f0) 
4138   AA39             ;         2        : s2 = s1xor(10010010)  
4139   AA39             ;
4140   AA39             ;clear last 3 bits of each row to 0's at the end. (8x4=32-3=29)
4141   AA39             createQR29x29Mask7:
4142   AA39 21 FC B2        ld hl, QR_29x29_mask7
4143   AA3C 3A 46 B6        ld a, (r1s0)
4144   AA3F 4F              ld c, a 
4145   AA40 06 1D           ld b, 29 
4146   AA42             c297LP:
4147   AA42                 ;r0,3,6
4148   AA42 CD 83 AA        call r0_3_6
4149   AA45 05              dec b 
4150   AA46 C8              ret z 
4151   AA47                 ;r1,2 
4152   AA47 CD 5F AA        call r1_2
4153   AA4A 05              dec b
4154   AA4B C8              ret z
4155   AA4C CD 5F AA        call r1_2
4156   AA4F 05              dec b
4157   AA50 C8              ret z 
4158   AA51 3E 6D           ld a, %01101101
4159   AA53 32 47 B6        ld (r1f0), a 
4160   AA56 79              ld a, c
4161   AA57 2F              cpl 
4162   AA58 32 46 B6        ld (r1s0), a 
4163   AA5B 4F              ld c, a 
4164   AA5C C3 42 AA        jp c297LP
4165   AA5F                 
4166   AA5F                 
4167   AA5F             ;f(move to the next 8 bits along the row)
4168   AA5F             ;  prep:  
4169   AA5F             ;     e = r1s0
4170   AA5F             ;     a = r1f0
4171   AA5F             
4172   AA5F             ;r0s0:                 .db         %10101010
4173   AA5F             ;r1s0:                 .db         %00011100    
4174   AA5F             ;r1f0:                 .db         %01101101 ;cy=1
4175   AA5F             ;r1_4s0_to_r2_5s0:     .db         %10010010 ;cy=0
4176   AA5F             ;r1_2:   
4177   AA5F             r1_2:
4178   AA5F 3A 47 B6        ld a, (r1f0)        ;works for 1&2 and 4&5
4179   AA62 5F              ld e, a 
4180   AA63 3A 46 B6        ld a, (r1s0)
4181   AA66 37              scf 
4182   AA67 F5              push af 
4183   AA68 77               ld (hl), a 
4184   AA69 23               inc hl 
4185   AA6A AB               xor e
4186   AA6B 77               ld (hl), a
4187   AA6C F1              pop af
4188   AA6D 57              ld d, a  
4189   AA6E 7E              ld a, (hl)
4190   AA6F CB 1B           rr e 
4191   AA71 AB              xor e 
4192   AA72 23              inc hl 
4193   AA73 77              ld (hl), a 
4194   AA74 23              inc hl 
4195   AA75 72              ld (hl), d 
4196   AA76 23              inc hl 
4197   AA77 3A 48 B6        ld a, (r1_4s0_to_r2_5s0)
4198   AA7A A9              xor c 
4199   AA7B 32 46 B6        ld (r1s0), a 
4200   AA7E 7B              ld a, e 
4201   AA7F 32 47 B6        ld (r1f0), a 
4202   AA82 C9              ret
4203   AA83             
4204   AA83             
4205   AA83             ;complete & save entire row.
4206   AA83             ;update r0s0 for next mod3 iteration                    
4207   AA83             r0_3_6:   
4208   AA83 3A 45 B6        ld a, (r0s0)         
4209   AA86 16 04           ld d, 4
4210   AA88             r0nLP:
4211   AA88 77              ld (hl), a 
4212   AA89 23              inc hl
4213   AA8A 15              dec d
4214   AA8B C2 88 AA        jp nz, r0nLP
4215   AA8E 2F              cpl
4216   AA8F 32 45 B6        ld (r0s0), a 
4217   AA92             
4218   AA92 C9              RET
4219   AA93             
4220   AA93             printQRtextDetails:
4221   AA93             
4222   AA93 3E 00                      ld   a, $00
4223   AA95 2E 00                      ld   l, $00
4224   AA97 06 19                      ld   b, 25
4225   AA99 0E 04                      ld   c, 4
4226   AA9B 26 03                      ld   h, 3
4227   AA9D DD 21 F2 B0                ld  ix, tilogo
4228   AAA1             
4229   AAA1 CD 35 9E                   call put_any_Sprite 
4230   AAA4             
4231   AAA4             
4232   AAA4 21 20 00                   ld HL, $0020
4233   AAA7 22 52 82                   LD (PenCol), HL
4234   AAAA 21 BC AC                   LD HL, text_qr_bonus1
4235   AAAD CD 81 47                   bcall(_VputS)  
4236   AAB0 21 20 06                   ld HL, $0620
4237   AAB3 22 52 82                   LD (PenCol), HL
4238   AAB6 21 CE AC                   LD HL, text_qr_bonus2
4239   AAB9 CD 81 47                   bcall(_VputS)
4240   AABC 21 39 0C                   ld HL, $0C39
4241   AABF 22 52 82                   LD (PenCol), HL
4242   AAC2 21 E1 AC                   LD HL, text_qr_bonus3
4243   AAC5 CD 81 47                   bcall(_VputS)     
4244   AAC8 21 39 12                   ld HL, $1239
4245   AACB 22 52 82                   LD (PenCol), HL
4246   AACE 21 EE AC                   LD HL, text_qr_bonus4
4247   AAD1 CD 81 47                   bcall(_VputS)
4248   AAD4 21 39 1B                   ld HL, $1B39
4249   AAD7 22 52 82                   LD (PenCol), HL
4250   AADA 21 FC AC                   LD HL, text_qr_bonus5
4251   AADD CD 81 47                   bcall(_VputS) 
4252   AAE0 21 39 21                   ld HL, $2139
4253   AAE3 22 52 82                   LD (PenCol), HL
4254   AAE6 21 09 AD                   LD HL, text_qr_bonusPK
4255   AAE9 CD 81 47                   bcall(_VputS) 
4256   AAEC 21 00 33                   ld HL, $3300
4257   AAEF 22 52 82                   LD (PenCol), HL
4258   AAF2 21 16 AD                   LD HL, text_qr_bonus6
4259   AAF5 CD 81 47                   bcall(_VputS)  
4260   AAF8 21 00 39                   ld HL, $3900
4261   AAFB 22 52 82                   LD (PenCol), HL
4262   AAFE 21 2F AD                   LD HL, text_qr_bonus7
4263   AB01 CD 81 47                   bcall(_VputS)          
4264   AB04             
4265   AB04             
4266   AB04             
4267   AB04 CD B6 91                   call ionFastCopy
4268   AB07             
4269   AB07             
4270   AB07 C9              ret
4271   AB08             
4272   AB08             ;draws a line through the winning payline, on display
4273   AB08             ;sb used between win animations and to indicate to the user active paylines on addition/removal
4274   AB08             ;flags
4275   AB08             ;   fullScrnDraw, (IY + apiFlg4)  = 1 to use column 95 and row 0 
4276   AB08             ;   plotLoc, (IY + plotFlags)     = 1 to draw to the display only 
4277   AB08             ;                                 = 0 to draw to display and plotSScreen buffer 
4278   AB08             ;   bufferOnly, (IY + plotFlag3)  = 1 to draw to plotSScreen buffer only
4279   AB08             ;registers 
4280   AB08             ;   BC = 1st point = B=X, C=Y
4281   AB08             ;   DE = 2nd point = D=X, E=Y
4282   AB08             ;       ex:    LD BC, 25*256+30                ;1st point, X=25, Y=30
4283   AB08             ;              LD DE, 62*256+50                ;2nd point, X=62, Y=50
4284   AB08             ;   H  = 0/1/2 = off/on/xor
4285   AB08             ;registers all preserved
4286   AB08             ;(c) Texas Instruments
4287   AB08             zi_line:
4288   AB08             
4289   AB08                             ;SET plotLoc, (IY+plotFlags)     ;display only
4290   AB08 26 02                       LD H, 2                         ;signal to turn pixels off
4291   AB0A CD E4 4A                    bcall(_iline)                   ;draw the line
4292   AB0D CD B6 91                    call ionFastCopy
4293   AB10 C9                          ret
4294   AB11             smart_exit:
4295   AB11 E1                         pop hl
4296   AB12 FD CB 14 BE                RES   textWrite, (IY+sgrflags)      ;set flag to write text to grbuffer, not screen.
4297   AB16 FD CB 05 9E                RES   textInverse, (IY+textFlags)   ;invert text                  
4298   AB1A C9                         RET
4299   AB1B             ;p_exit:
4300   AB1B             ;                EI
4301   AB1B             ;                ld SP, (startSP)
4302   AB1B             ;                halt
4303   AB1B             ;                ret
4304   AB1B             ;----------------------------------------------------------------------
4305   AB1B             
4306   AB1B 00          aO:             .db      $00      ;$00 = win_Anim, $1A = Cur_reel_state, $34 = Save, $4E = fin
4307   AB1C             sX:             .equ     $1A
4308   AB1C             sY:             .equ     $34
4309   AB1C             
4310   AB1C C9          bt_flags:       .db      %11001001
4311   AB1D             isFirstGame:    .EQU     0
4312   AB1D             isSpinning:     .EQU     1
4313   AB1D             isCounting:     .EQU     2
4314   AB1D             isWaiting:      .EQU     3
4315   AB1D             isWin:          .EQU     4
4316   AB1D             isBonus:        .EQU     5
4317   AB1D             is1stBonusRoll: .EQU     6
4318   AB1D             clearTop:       .EQU     7
4319   AB1D             
4320   AB1D             ;                         87654321         9
4321   AB1D 00 00 00    bonus_enemLocs: .db      %00000000,%00000000, 0
4322   AB20             
4323   AB20 00          bt_flags2:      .db     %00000000
4324   AB21             isFromBonus:    .EQU    0
4325   AB21             
4326   AB21 09          _lines          .db      9
4327   AB22 01          _multiplier     .db      1
4328   AB23 00          _totalBet       .db      0
4329   AB24             
4330   AB24 00          bonusCount:     .db      @0
4331   AB25             
4332   AB25             _SHARPMEM_:         .ds                   10        ;allocate 10 contiguous bytes
4333   AB2F             startSP             =           _SHARPMEM_+0
4334   AB2F             saveGame            =           _SHARPMEM_+2
4335   AB2F             
4336   AB2F             ;isCounted       =          _SHARPMEM_+11
4337   AB2F             ;isAutoStopping  =          _SHARPMEM_+14
4338   AB2F             ;isReelSpinAnimCXLEDbySpin =_SHARPMEM_+15 
4339   AB2F                 
4340   AB2F 00          spinAnimCount:   .db       $00         ;keeps track of reel spinning animation frame
4341   AB30 00          spinningReelNo:  .db       $00
4342   AB31 00          reelTimer:       .db       $00         ;auto stops reels if not manually stopped
4343   AB32 00 16 50 20 maskXYWH:        .db       $00, $16, $50, $20,0
4343   AB36 00 
4344   AB37             
4345   AB37 02 30       TOP_ANIM_XY:      .db       $02,$30
4346   AB39 01 03       TOP_ANIM_GOAL_XY: .db       $01,$03
4347   AB3B             
4348   AB3B             ;RMENU
4349   AB3B             _TEXT_XY_RMENU   .EQU      $1854        ;XY of 1st menu item in rightMenu  
4350   AB3B             _TEXT_XY_RMENU2  .EQU      $2054        ;   2nd  
4351   AB3B             _TEXT_XY_RMENU3  .EQU      $2754        ;   3rd  
4352   AB3B                                        ;y,x
4353   AB3B             _NUM_XY_MTP      .EQU      $185A
4354   AB3B             _NUM_XY_LNS      .EQU      $235A
4355   AB3B             
4356   AB3B             
4357   AB3B 8F          BON_K: .db  $8F      ;[1]++ = [2] ...
4358   AB3C 2D 2D 2D 22 BON_Y: .db  $2D,$2D,$2D, $22,$22,$22, $17,$17,$17, 0fh
4358   AB40 22 22 17 17 
4358   AB44 17 0F 
4359   AB46 13 2E 49 13 BON_X: .db  $13,$2E,$49, $13,$2E,$49, $13,$2E,$49, 0fh
4359   AB4A 2E 49 13 2E 
4359   AB4E 49 0F 
4360   AB50             
4361   AB50 40 00       enemyTimerMax:    .db     $40,0
4362   AB52             
4363   AB52                                        ; 1,  2,  3,  4,  5
4364   AB52             
4365   AB52 00 00 00 00 bonusBoard:     .db        $00,$00,$00,$00,$00,$00,$00,$00,$00, $F0
4365   AB56 00 00 00 00 
4365   AB5A 00 F0 
4366   AB5C 40 40 40 40 bonusPeekTimer: .db        $40,$40,$40,$40,$40,$40,$40,$40,$40, $F0
4366   AB60 40 40 40 40 
4366   AB64 40 F0 
4367   AB66 00 00 00 00 bonEmyKey:      .db        $00,$00,$00,$00,$00,$00,$00,$00,$00, $F0
4367   AB6A 00 00 00 00 
4367   AB6E 00 F0 
4368   AB70                              ;keys:    1,  2,  3,  4,  5,  6,  7,  8,  9
4369   AB70 22 1A 12 23 kTOsk:          .db        $22,$1A,$12,$23,$1B,$13,$24,$1C,$14, $F0
4369   AB74 1B 13 24 1C 
4369   AB78 14 F0 
4370   AB7A 01 02 03 04 bonusFrameMap:  .db        1,2,3,4,5,6,7,8,9,8,7,6,5,4,3,2,1, $F0
4370   AB7E 05 06 07 08 
4370   AB82 09 08 07 06 
4370   AB86 05 04 03 02 
4370   AB8A 01 F0 
4371   AB8C             
4372   AB8C 03          heartCount:       .db       03h
4373   AB8D 01          bopCount:         .db       $01
4374   AB8E 00          bonusLvl:         .db       $00
4375   AB8F 2A          nxtBonus:         .db       $2A
4376   AB90             
4377   AB90                                         ;Y,X
4378   AB90             _NUM_XY_BO7:      .EQU      $1618
4379   AB90             _NUM_XY_BO8:      .EQU      $1634
4380   AB90             _NUM_XY_BO9:      .EQU      $164F
4381   AB90             _NUM_XY_BO4:      .EQU      $2118
4382   AB90             _NUM_XY_BO5:      .EQU      $2134
4383   AB90             _NUM_XY_BO6:      .EQU      $214F
4384   AB90             _NUM_XY_BO1:      .EQU      $2C18
4385   AB90             _NUM_XY_BO2:      .EQU      $2C34
4386   AB90             _NUM_XY_BO3:      .EQU      $2C4F
4387   AB90             
4388   AB90             _BON_XY_HP1:      .EQU      $1604
4389   AB90             _BON_XY_HP2:      .EQU      $2104
4390   AB90             _BON_XY_HP3:      .EQU      $2D04
4391   AB90             
4392   AB90             _TEXT_XY_TOPBC    .EQU      $0E20        ;YX of lowest title location, on top of disp.
4393   AB90             _TEXT_XY_TOPBL    .EQU      $0E06
4394   AB90             _TEXT_XY_TOPMC    .EQU      $081A
4395   AB90             _TEXT_XY_BONLVL   .EQU      $3941
4396   AB90             
4397   AB90             _TEXT_XY_WINSTR   .EQU      $3825        ;
4398   AB90             _TEXT_XY_CREDIT   .EQU      $3801        ;Denomination symbol location
4399   AB90             _NUM_XY_MONEY     .EQU      $3806        ;User's balance location on disp. 
4400   AB90             _NUM_XY_BOPCNT    .EQU      $3912
4401   AB90             _NUM_XY_BONLVL    .EQU      $394F
4402   AB90             
4403   AB90             _GAMESPEED_       .EQU      $03          ;factor to determine how long animations take($02 is default)
4404   AB90             
4405   AB90 30 00       count:          .db       "0",0
4406   AB92 24          money_string:   .text     "$",0
4407   AB93 20 00       blank:          .db       " ",0
4408   AB95 4E 49 43 45 top_win_str1:   .db       "NICE WIN!",0
4408   AB99 20 57 49 4E 
4408   AB9D 21 00 
4409   AB9F 59 4F 55 20 top_win_str2:   .text     "YOU DIRTY DOG YOU! ",0
4409   ABA3 44 49 52 54 
4409   ABA7 59 20 44 4F 
4409   ABAB 47 20 59 4F 
4409   ABAF 55 21 20 
4410   ABB2 4B 45 45 50 top_win_str3:   .db       "KEEP IT UP!",0
4410   ABB6 20 49 54 20 
4410   ABBA 55 50 21 00 
4411   ABBE 4D 45 47 41 top_win_str4:   .db       "MEGA WIN!",0
4411   ABC2 20 57 49 4E 
4411   ABC6 21 00 
4412   ABC8             
4413   ABC8 20 20 20 20 top_win_BON:    .db       "     BONUS!!!!     ",0
4413   ABCC 20 42 4F 4E 
4413   ABD0 55 53 21 21 
4413   ABD4 21 21 20 20 
4413   ABD8 20 20 20 00 
4414   ABDC 20 20 20 4F top_win_BON_0:  .db       "   OUCHHHHHFF#D!!   ",0
4414   ABE0 55 43 48 48 
4414   ABE4 48 48 48 46 
4414   ABE8 46 23 44 21 
4414   ABEC 21 20 20 20 
4414   ABF0 00 
4415   ABF1 20 20 20 20 top_win_BON_1:  .db       "     NICE ! ! ! !  ",0
4415   ABF5 20 4E 49 43 
4415   ABF9 45 20 21 20 
4415   ABFD 21 20 21 20 
4415   AC01 21 20 20 00 
4416   AC05 20 20 20 20 top_win_BON_2:  .db       "     TOO SLOW!     ",0
4416   AC09 20 54 4F 4F 
4416   AC0D 20 53 4C 4F 
4416   AC11 57 21 20 20 
4416   AC15 20 20 20 00 
4417   AC19 20 20 20 20 top_win_BON_3:  .db       "    LEVEL UP!!!    ",0
4417   AC1D 4C 45 56 45 
4417   AC21 4C 20 55 50 
4417   AC25 21 21 21 20 
4417   AC29 20 20 20 00 
4418   AC2D 20 59 4F 55 top_win_BON_WIN: .db      " YOU BEAT THE BONUS!", 0
4418   AC31 20 42 45 41 
4418   AC35 54 20 54 48 
4418   AC39 45 20 42 4F 
4418   AC3D 4E 55 53 21 
4418   AC41 00 
4419   AC42             
4420   AC42             
4421   AC42 55 73 65 20 text_top_expl:    .db       "Use keys 1-9 to SMASH EM!",0
4421   AC46 6B 65 79 73 
4421   AC4A 20 31 2D 39 
4421   AC4E 20 74 6F 20 
4421   AC52 53 4D 41 53 
4421   AC56 48 20 45 4D 
4421   AC5A 21 00 
4422   AC5C 20 20 20 20 text_bot_expl1:   .db  "           Press ^ to begin...",0
4422   AC60 20 20 20 20 
4422   AC64 20 20 20 50 
4422   AC68 72 65 73 73 
4422   AC6C 20 5E 20 74 
4422   AC70 6F 20 62 65 
4422   AC74 67 69 6E 2E 
4422   AC78 2E 2E 00 
4423   AC7B 20 20 20 20 text_bot_expl2:   .db       "       SMASH him to begin!!",0
4423   AC7F 20 20 20 53 
4423   AC83 4D 41 53 48 
4423   AC87 20 68 69 6D 
4423   AC8B 20 74 6F 20 
4423   AC8F 62 65 67 69 
4423   AC93 6E 21 21 00 
4424   AC97 20 20 20 20 text_bot_expl3:   .db  "           Press ^ to get paid!",0
4424   AC9B 20 20 20 20 
4424   AC9F 20 20 20 50 
4424   ACA3 72 65 73 73 
4424   ACA7 20 5E 20 74 
4424   ACAB 6F 20 67 65 
4424   ACAF 74 20 70 61 
4424   ACB3 69 64 21 00 
4425   ACB7 6C 76 6C 3D text_bot_bon_lvl: .db  "lvl=",0
4425   ACBB 00 
4426   ACBC             
4427   ACBC 20 43 4F 4E text_qr_bonus1:   .db  " CONGRATULATIONS!",0
4427   ACC0 47 52 41 54 
4427   ACC4 55 4C 41 54 
4427   ACC8 49 4F 4E 53 
4427   ACCC 21 00 
4428   ACCE 20 59 4F 55 text_qr_bonus2:   .db  " YOU HAVE FOUND A ",0
4428   ACD2 20 48 41 56 
4428   ACD6 45 20 46 4F 
4428   ACDA 55 4E 44 20 
4428   ACDE 41 20 00 
4429   ACE1 20 20 53 45 text_qr_bonus3:   .db  "  SECRET    ",0
4429   ACE5 43 52 45 54 
4429   ACE9 20 20 20 20 
4429   ACED 00 
4430   ACEE 20 20 42 4F text_qr_bonus4:   .db  "  BONUS!!!   ",0
4430   ACF2 4E 55 53 21 
4430   ACF6 21 21 20 20 
4430   ACFA 20 00 
4431   ACFC 20 20 50 49 text_qr_bonus5:   .db  "  PINKEY:   ",0
4431   AD00 4E 4B 45 59 
4431   AD04 3A 20 20 20 
4431   AD08 00 
4432   AD09 20 20 2A 2A text_qr_bonusPK:  .db  "  *******   ",0
4432   AD0D 2A 2A 2A 2A 
4432   AD11 2A 20 20 20 
4432   AD15 00 
4433   AD16 53 63 61 6E text_qr_bonus6:   .db  "Scan screen with camera.",0
4433   AD1A 20 73 63 72 
4433   AD1E 65 65 6E 20 
4433   AD22 77 69 74 68 
4433   AD26 20 63 61 6D 
4433   AD2A 65 72 61 2E 
4433   AD2E 00 
4434   AD2F             
4435   AD2F 20 20 20 20 text_qr_bonus7:   .db  "          Press  ^  to return          ",0
4435   AD33 20 20 20 20 
4435   AD37 20 20 50 72 
4435   AD3B 65 73 73 20 
4435   AD3F 20 5E 20 20 
4435   AD43 74 6F 20 72 
4435   AD47 65 74 75 72 
4435   AD4B 6E 20 20 20 
4435   AD4F 20 20 20 20 
4435   AD53 20 20 20 00 
4436   AD57             
4437   AD57             
4438   AD57 6C 6E 3A 00 rm_lines_str:   .db       "ln:",0
4439   AD5B 2B 00       rm_lines_sym_i: .db       "+",0
4440   AD5D 2D 00       rm_lines_sym_d: .db       "-",0
4441   AD5F 78 00       rm_multi_sym:   .db       "x",0
4442   AD61             
4443   AD61 20 78 20 00 bot_win_str1:   .db       " x ",0
4444   AD65 54 6F 74 61 bot_win_str2:   .db       "Total Win: $",0
4444   AD69 6C 20 57 69 
4444   AD6D 6E 3A 20 24 
4444   AD71 00 
4445   AD72             
4446   AD72 50 72 65 73 bot_win_BON:    .db       "Press ^ to begin..."
4446   AD76 73 20 5E 20 
4446   AD7A 74 6F 20 62 
4446   AD7E 65 67 69 6E 
4446   AD82 2E 2E 2E 
4447   AD85 20 20 20 20 bot_win_clear:  .db       "                                 ",0
4447   AD89 20 20 20 20 
4447   AD8D 20 20 20 20 
4447   AD91 20 20 20 20 
4447   AD95 20 20 20 20 
4447   AD99 20 20 20 20 
4447   AD9D 20 20 20 20 
4447   ADA1 20 20 20 20 
4447   ADA5 20 00 
4448   ADA7 88 13       money:          .db       $88,$13
4449   ADA9 88 13       new_money:      .db       $88,$13
4450   ADAB 00 00       cur_win_total:  .db       $00,$00
4451   ADAD                                       ;timer
4452   ADAD 01 00       cflags:         .db       %00000001,0
4453   ADAF             
4454   ADAF 02          run_anim_pace:  .db       $02
4455   ADB0 00 00       run_anim_p:     .db       $00,$00
4456   ADB2 00 00       nft_anim_p:     .db       $00,$00
4457   ADB4             
4458   ADB4 80          nftflags:       .db      %10000000
4459   ADB5             isNFTeligible:  .EQU     0
4460   ADB5             hasWonNFT:      .EQU     1
4461   ADB5             hasBeatBonus:   .EQU     2
4462   ADB5             isBB:           .EQU     3
4463   ADB5             isCC:           .EQU     4
4464   ADB5             isDD:           .EQU     5
4465   ADB5             isEE:           .EQU     6
4466   ADB5             isFF:           .EQU     7
4467   ADB5             
4468   ADB5 00          is_nft_eligible: .db      $00
4469   ADB6                             ;         sprite   x        y                 drawArray
4470   ADB6 00 00 00 00 data_p:         .db       $00,$00, $00,$00, $00,$00, $00,$00, $00,$00                ;misc address pointers     
4470   ADBA 00 00 00 00 
4470   ADBE 00 00 
4471   ADC0 00 00       P_:             .db       $00,$00                                            ;pointer
4472   ADC2 00 00       p_onscreen:     .db       $00,$00
4473   ADC4 A4 44       activemem:      .db       $A4,$44
4474   ADC6                                   
4475   ADC6             ratio_table:              ;F   Q    K    A    Che  Coi  Thu  Bon   
4476   ADC6 28 5A 80 A4                 .db       $28, $5A, $80, $A4, $C3, $DF, $F3, $FF
4476   ADCA C3 DF F3 FF 
4477   ADCE             
4478   ADCE             ;symbol
4479   ADCE             ;       hl*, sprite
4480   ADCE             ;        16, pay
4481   ADCE             ;    string, name
4482   ADCE             symbols:
4483   ADCE             sym_fun:
4484   ADCE 01 00                   .db     %0000001,0
4485   ADD0 05 00                   .db     5,0
4486   ADD2 46 75 6E 00             .db     "Fun",0
4487   ADD6             sym_queen:  
4488   ADD6 02 00                   .db     %00000010,0
4489   ADD8 0A 00                   .db     10,0
4490   ADDA 51 75 65 65             .db     "Queen",0
4490   ADDE 6E 00 
4491   ADE0             sym_king:
4492   ADE0 03 00                   .db     %00000011,0
4493   ADE2 0F 00                   .db     15,0
4494   ADE4 4B 69 6E 67             .db     "King",0  
4494   ADE8 00 
4495   ADE9             sym_ace:
4496   ADE9 04 00                   .db     %00000100,0
4497   ADEB 14 00                   .db     20,0
4498   ADED 41 63 65 00             .db     "Ace",0
4499   ADF1             sym_cherry:
4500   ADF1 05 00                   .db     %00000101,0
4501   ADF3 19 00                   .db     25,0
4502   ADF5 43 68 65 72             .db     "Cherry",0
4502   ADF9 72 79 00 
4503   ADFC             sym_coin:
4504   ADFC 07 00                   .db     %00000111,0
4505   ADFE 1E 00                   .db     30,0
4506   AE00 43 6F 69 6E             .db     "Coin",0
4506   AE04 00 
4507   AE05             sym_thunder:
4508   AE05 07 00                   .db     %00000111,0
4509   AE07 28 00                   .db     40,0
4510   AE09 54 68 75 6E             .db     "Thunder",0
4510   AE0D 64 65 72 00 
4511   AE11             sym_hourglass:
4512   AE11 0F 00                   .db     %00001111,0
4513   AE13 32 00                   .db     50,0
4514   AE15 48 6F 75 72             .db     "Hourglass",0
4514   AE19 67 6C 61 73 
4514   AE1D 73 00 
4515   AE1F             sym_bonus:
4516   AE1F 1F 00                   .db     %00011111,0
4517   AE21 64 00                   .db     100,0
4518   AE23 42 4F 4E 55             .db     "BONUS",0
4518   AE27 53 00 
4519   AE29             ;
4520   AE29             ;------SYMBOL ENUMS
4521   AE29                                ;    Q, K, A, C,Co,Th,Hr,Bo 
4522   AE29 00 00 08 12 sym_o:      .db     0,0,8,18,27,35,46,55,67,81,0
4522   AE2D 1B 23 2E 37 
4522   AE31 43 51 00 
4523   AE34             
4524   AE34             fun:        .equ    0
4525   AE34             queen:      .equ    8
4526   AE34             king:       .equ    18
4527   AE34             ace:        .equ    27
4528   AE34             cherry:     .equ    35
4529   AE34             coin:       .equ    46
4530   AE34             thunder:    .equ    55
4531   AE34             hourglass:  .equ    64
4532   AE34             bonus:      .equ    78
4533   AE34             
4534   AE34             ;-------NAME ENUM.NAME OFFSET
4535   AE34             _name:      .equ    4
4536   AE34             _PAY:       .equ    2
4537   AE34             OFFSET:     .equ    6
4538   AE34             
4539   AE34 AA AA       rng_seed:       .db     $AA,$AA
4540   AE36             slot_sprites:                         ;19EBC
4541   AE36 00                          .db     %00000000
4542   AE37 00                          .db     %00000000
4543   AE38 00                          .db     %00000000
4544   AE39 38                          .db     %00111000
4545   AE3A 38                          .db     %00111000
4546   AE3B 00                          .db     %00000000
4547   AE3C 00                          .db     %00000000
4548   AE3D 00                          .db     %00000000
4549   AE3E             
4550   AE3E FF                          .db     %11111111
4551   AE3F 81                          .db     %10000001
4552   AE40 9F                          .db     %10011111
4553   AE41 9F                          .db     %10011111
4554   AE42 83                          .db     %10000011
4555   AE43 9F                          .db     %10011111
4556   AE44 9F                          .db     %10011111
4557   AE45 FF                          .db     %11111111
4558   AE46             
4559   AE46 7E                          .db     %01111110
4560   AE47 FF                          .db     %11111111
4561   AE48 C3                          .db     %11000011
4562   AE49 C3                          .db     %11000011
4563   AE4A C3                          .db     %11000011
4564   AE4B E3                          .db     %11100011
4565   AE4C 7C                          .db     %01111100
4566   AE4D 1F                          .db     %00011111
4567   AE4E             
4568   AE4E C7                          .db     %11000111
4569   AE4F C6                          .db     %11000110
4570   AE50 CC                          .db     %11001100
4571   AE51 F8                          .db     %11111000
4572   AE52 F8                          .db     %11111000
4573   AE53 CC                          .db     %11001100
4574   AE54 C6                          .db     %11000110
4575   AE55 C7                          .db     %11000111
4576   AE56             
4577   AE56 18                          .db     %00011000
4578   AE57 3C                          .db     %00111100
4579   AE58 66                          .db     %01100110
4580   AE59 C3                          .db     %11000011
4581   AE5A FF                          .db     %11111111
4582   AE5B FF                          .db     %11111111
4583   AE5C C3                          .db     %11000011
4584   AE5D C3                          .db     %11000011
4585   AE5E             
4586   AE5E 10                          .db     %00010000
4587   AE5F 08                          .db     %00001000
4588   AE60 08                          .db     %00001000
4589   AE61 73                          .db     %01110011
4590   AE62 FD                          .db     %11111101
4591   AE63 FD                          .db     %11111101
4592   AE64 F9                          .db     %11111001
4593   AE65 7E                          .db     %01111110
4594   AE66                     
4595   AE66             slot_sprites_coin:
4596   AE66 3C                          .db     %00111100
4597   AE67 5E                          .db     %01011110
4598   AE68 AF                          .db     %10101111
4599   AE69 A7                          .db     %10100111
4600   AE6A A7                          .db     %10100111
4601   AE6B A7                          .db     %10100111
4602   AE6C 4E                          .db     %01001110
4603   AE6D 3C                          .db     %00111100
4604   AE6E             
4605   AE6E E7                          .db     %11100111
4606   AE6F 33                          .db     %00110011
4607   AE70 99                          .db     %10011001
4608   AE71 CC                          .db     %11001100
4609   AE72 66                          .db     %01100110
4610   AE73 33                          .db     %00110011
4611   AE74 19                          .db     %00011001
4612   AE75 C6                          .db     %11000110 
4613   AE76             
4614   AE76 FF                          .db     %11111111
4615   AE77 FF                          .db     %11111111
4616   AE78 42                          .db     %01000010
4617   AE79 2C                          .db     %00101100
4618   AE7A 34                          .db     %00110100
4619   AE7B 56                          .db     %01010110
4620   AE7C FF                          .db     %11111111
4621   AE7D FF                          .db     %11111111
4622   AE7E             
4623   AE7E             bonus_symbol:                               ;16x10
4624   AE7E             ;                .db     $7F, $FE
4625   AE7E             ;                .db     $FF, $FF
4626   AE7E             ;                .db     $FF, $FF
4627   AE7E             ;                .db     $FF, $FF
4628   AE7E             ;                .db     $FF, $FF
4629   AE7E             ;                .db     $FF, $FF
4630   AE7E             ;                .db     $FF, $FF
4631   AE7E             ;                .db     $FF, $FF
4632   AE7E             ;                .db     $FF, $FF
4633   AE7E             ;                .db     $7F, $FE
4634   AE7E FF FF                       .db     %11111111,%11111111
4635   AE80 90 09                       .db     %10010000,%00001001
4636   AE82 97 E9                       .db     %10010111,%11101001
4637   AE84 E7 E7                       .db     %11100111,%11100111
4638   AE86 87 E1                       .db     %10000111,%11100001
4639   AE88 81 E1                       .db     %10000001,%11100001
4640   AE8A E1 87                       .db     %11100001,%10000111
4641   AE8C 91 89                       .db     %10010001,%10001001                
4642   AE8E 90 09                       .db     %10010000,%00001001
4643   AE90 FF FF                       .db     %11111111,%11111111 
4644   AE92             
4645   AE92 FF                          .db     %11111111
4646   AE93 A9                          .db     %10101001
4647   AE94 95                          .db     %10010101
4648   AE95 A9                          .db     %10101001
4649   AE96 95                          .db     %10010101
4650   AE97 A9                          .db     %10101001
4651   AE98 95                          .db     %10010101
4652   AE99 FF                          .db     %11111111
4653   AE9A             
4654   AE9A 7C                          .db     %01111100
4655   AE9B 78                          .db     %01111000
4656   AE9C 78                          .db     %01111000
4657   AE9D 60                          .db     %01100000
4658   AE9E 70                          .db     %01110000
4659   AE9F F0                          .db     %11110000
4660   AEA0 48                          .db     %01001000
4661   AEA1 46                          .db     %01000110
4662   AEA2             
4663   AEA2 3E                          .db     %00111110
4664   AEA3 FE                          .db     %11111110
4665   AEA4 3E                          .db     %00111110
4666   AEA5 7C                          .db     %01111100
4667   AEA6 FE                          .db     %11111110
4668   AEA7 7C                          .db     %01111100
4669   AEA8 3C                          .db     %00111100
4670   AEA9 3C                          .db     %00111100
4671   AEAA             
4672   AEAA                             ;.db     %00000001
4673   AEAA             
4674   AEAA             CPYRGHT:
4675   AEAA             
4676   AEAA 7C                          .db     %01111100
4677   AEAB 1E                          .db     %00011110
4678   AEAC 20                          .db     %00100000
4679   AEAD 50                          .db     %01010000
4680   AEAE 55                          .db     %01010101
4681   AEAF 26                          .db     %00100110
4682   AEB0 58                          .db     %01011000
4683   AEB1 FC                          .db     %11111100
4684   AEB2             
4685   AEB2 E9                          .db     %11101001
4686   AEB3 39                          .db     %00111001
4687   AEB4 48                          .db     %01001000
4688   AEB5 C4                          .db     %11000100
4689   AEB6 44                          .db     %01000100
4690   AEB7 28                          .db     %00101000
4691   AEB8 14                          .db     %00010100
4692   AEB9 7E                          .db     %01111110
4693   AEBA             
4694   AEBA 00                          .db     %00000000
4695   AEBB 73                          .db     %01110011
4696   AEBC 85                          .db     %10000101
4697   AEBD 45                          .db     %01000101
4698   AEBE 27                          .db     %00100111
4699   AEBF 15                          .db     %00010101
4700   AEC0 15                          .db     %00010101
4701   AEC1 E5                          .db     %11100101
4702   AEC2             
4703   AEC2             _8x8_on:        
4704   AEC2 FF                          .db     %11111111
4705   AEC3 FF                          .db     %11111111
4706   AEC4 FF                          .db     %11111111
4707   AEC5 FF                          .db     %11111111
4708   AEC6 FF                          .db     %11111111
4709   AEC7 FF                          .db     %11111111
4710   AEC8 FF                          .db     %11111111
4711   AEC9 FF                          .db     %11111111
4712   AECA             _8x8_off:
4713   AECA 00                          .db     %00000000
4714   AECB 00                          .db     %00000000
4715   AECC 00                          .db     %00000000
4716   AECD 00                          .db     %00000000
4717   AECE 00                          .db     %00000000
4718   AECF 00                          .db     %00000000
4719   AED0 00                          .db     %00000000
4720   AED1 00                          .db     %00000000
4721   AED2             _8x16_on:
4722   AED2 FF FF                       .db     %11111111,%11111111
4723   AED4 FF FF                       .db     %11111111,%11111111
4724   AED6 FF FF                       .db     %11111111,%11111111
4725   AED8 FF FF                       .db     %11111111,%11111111
4726   AEDA FF FF                       .db     %11111111,%11111111
4727   AEDC FF FF                       .db     %11111111,%11111111
4728   AEDE FF FF                       .db     %11111111,%11111111
4729   AEE0 FF FF                       .db     %11111111,%11111111
4730   AEE2             
4731   AEE2             
4732   AEE2             _10x16_off:  
4733   AEE2 00 00 00 00     .db  $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
4733   AEE6 00 00 00 00 
4733   AEEA 00 00 00 00 
4733   AEEE 00 00 00 00 
4733   AEF2 00 00 00 00 
4734   AEF6             _xxBonusBox:
4735   AEF6             
4736   AEF6             _8x16_off:        
4737   AEF6 00 00                       .db     %00000000,%00000000
4738   AEF8 00 00                       .db     %00000000,%00000000
4739   AEFA 00 00                       .db     %00000000,%00000000
4740   AEFC 00 00                       .db     %00000000,%00000000
4741   AEFE 00 00                       .db     %00000000,%00000000
4742   AF00 00 00                       .db     %00000000,%00000000
4743   AF02 00 00                       .db     %00000000,%00000000
4744   AF04 00 00                       .db     %00000000,%00000000
4745   AF06             
4746   AF06             
4747   AF06             minimap:        
4748   AF06 80 00                       .db     %10000000,%00000000
4749   AF08 80 00                       .db     %10000000,%00000000
4750   AF0A 80 00                       .db     %10000000,%00000000
4751   AF0C FF FF                       .db     %11111111,%11111111
4752   AF0E 80 00                       .db     %10000000,%00000000
4753   AF10 80 00                       .db     %10000000,%00000000
4754   AF12 80 00                       .db     %10000000,%00000000
4755   AF14 FF FF                       .db     %11111111,%11111111
4756   AF16                             
4757   AF16 00 00                       .db     %00000000,%00000000
4758   AF18 7F FF                       .db     %01111111,%11111111
4759   AF1A 00 00                       .db     %00000000,%00000000
4760   AF1C 00 00                       .db     %00000000,%00000000
4761   AF1E 00 00                       .db     %00000000,%00000000
4762   AF20 00 00                       .db     %00000000,%00000000
4763   AF22 00 00                       .db     %00000000,%00000000
4764   AF24 00 00                       .db     %00000000,%00000000
4765   AF26             
4766   AF26 00 00                       .db     %00000000,%00000000
4767   AF28 00 00                       .db     %00000000,%00000000
4768   AF2A 00 00                       .db     %00000000,%00000000
4769   AF2C 00 00                       .db     %00000000,%00000000
4770   AF2E 00 00                       .db     %00000000,%00000000
4771   AF30 7F FF                       .db     %01111111,%11111111
4772   AF32 00 00                       .db     %00000000,%00000000
4773   AF34 00 00                       .db     %00000000,%00000000
4774   AF36             
4775   AF36 00 00                       .db     %00000000,%00000000
4776   AF38 00 00                       .db     %00000000,%00000000
4777   AF3A 20 08                       .db     %00100000,%00001000
4778   AF3C 00 00                       .db     %00000000,%00000000
4779   AF3E 08 20                       .db     %00001000,%00100000
4780   AF40 00 00                       .db     %00000000,%00000000
4781   AF42 02 80                       .db     %00000010,%10000000
4782   AF44 00 00                       .db     %00000000,%00000000
4783   AF46             
4784   AF46 00 00                       .db     %00000000,%00000000
4785   AF48 00 00                       .db     %00000000,%00000000
4786   AF4A 02 80                       .db     %00000010,%10000000
4787   AF4C 00 00                       .db     %00000000,%00000000
4788   AF4E 00 00                       .db     %00000000,%00000000
4789   AF50 00 00                       .db     %00000000,%00000000
4790   AF52 20 08                       .db     %00100000,%00001000
4791   AF54 00 00                       .db     %00000000,%00000000
4792   AF56             
4793   AF56 00 01                       .db     %00000000,%00000001
4794   AF58 03 80                       .db     %00000011,%10000000
4795   AF5A 5C 77                       .db     %01011100,%01110111
4796   AF5C 00 00                       .db     %00000000,%00000000
4797   AF5E 01 00                       .db     %00000001,%00000000
4798   AF60 00 00                       .db     %00000000,%00000000
4799   AF62 00 00                       .db     %00000000,%00000000
4800   AF64 00 00                       .db     %00000000,%00000000
4801   AF66             
4802   AF66 00 00                       .db     %00000000,%00000000
4803   AF68 00 00                       .db     %00000000,%00000000
4804   AF6A 00 00                       .db     %00000000,%00000000
4805   AF6C 00 00                       .db     %00000000,%00000000
4806   AF6E 00 00                       .db     %00000000,%00000000
4807   AF70 01 00                       .db     %00000001,%00000000
4808   AF72 5E F7                       .db     %01011110,%11110111
4809   AF74 00 00                       .db     %00000000,%00000000
4810   AF76             
4811   AF76              
4812   AF76             
4813   AF76 5F 7C                       .db     %01011111,%01111100
4814   AF78 03 80                       .db     %00000011,%10000000
4815   AF7A 10 44                       .db     %00010000,%01000100
4816   AF7C 00 00                       .db     %00000000,%00000000
4817   AF7E 7C F7                       .db     %01111100,%11110111
4818   AF80 01 00                       .db     %00000001,%00000000
4819   AF82 07 90                       .db     %00000111,%10010000
4820   AF84 00 00                       .db     %00000000,%00000000                   
4821   AF86             
4822   AF86 08 20                       .db     %00001000,%00100000
4823   AF88 00 00                       .db     %00000000,%00000000
4824   AF8A 04 10                       .db     %00000100,%00010000
4825   AF8C 00 00                       .db     %00000000,%00000000
4826   AF8E 20 80                       .db     %00100000,%10000000
4827   AF90 00 00                       .db     %00000000,%00000000
4828   AF92 41 04                       .db     %01000001,%00000100
4829   AF94 00 00                       .db     %00000000,%00000000      
4830   AF96             
4831   AF96                             
4832   AF96             win_box:                ;16x10
4833   AF96 FF FF                       .db     $FF, $FF
4834   AF98 FF FF                       .db     $FF, $FF
4835   AF9A FF FF                       .db     $FF, $FF
4836   AF9C FF FF                       .db     $FF, $FF
4837   AF9E FF FF                       .db     $FF, $FF
4838   AFA0 FF FF                       .db     $FF, $FF
4839   AFA2 FF FF                       .db     $FF, $FF
4840   AFA4 FF FF                       .db     $FF, $FF
4841   AFA6 FF FF                       .db     $FF, $FF
4842   AFA8 FF FF                       .db     $FF, $FF
4843   AFAA             
4844   AFAA             misc_sprites: 
4845   AFAA             misc_sprites_arrow:
4846   AFAA 04                          .db    %00000100
4847   AFAB 28                          .db    %00101000
4848   AFAC 30                          .db    %00110000
4849   AFAD 38                          .db    %00111000
4850   AFAE             bonus_enemies:
4851   AFAE             bonus_enemy1:
4852   AFAE 00                          .db     %00000000    
4853   AFAF 28                          .db     %00101000
4854   AFB0 5A                          .db     %01011010
4855   AFB1 A5                          .db     %10100101
4856   AFB2 A9                          .db     %10101001
4857   AFB3 81                          .db     %10000001
4858   AFB4 91                          .db     %10010001
4859   AFB5 83                          .db     %10000011
4860   AFB6             
4861   AFB6             bonus_enemy2:
4862   AFB6 10                          .db     %00010000 
4863   AFB7 38                          .db     %00111000   
4864   AFB8 7C                          .db     %01111100
4865   AFB9 FE                          .db     %11111110
4866   AFBA ED                          .db     %11101101
4867   AFBB CC                          .db     %11001100 
4868   AFBC BF                          .db     %10111111
4869   AFBD BF                          .db     %10111111
4870   AFBE             
4871   AFBE             bonus_enemy3:
4872   AFBE 30                          .db     %00110000
4873   AFBF 58                          .db     %01011000
4874   AFC0 87                          .db     %10000111
4875   AFC1 88                          .db     %10001000
4876   AFC2 87                          .db     %10000111
4877   AFC3 C0                          .db     %11000000
4878   AFC4 FF                          .db     %11111111
4879   AFC5 C7                          .db     %11000111
4880   AFC6             
4881   AFC6             bonus_enemy4:
4882   AFC6 66                          .db     %01100110
4883   AFC7 66                          .db     %01100110
4884   AFC8 66                          .db     %01100110
4885   AFC9 E7                          .db     %11100111
4886   AFCA E7                          .db     %11100111
4887   AFCB 3C                          .db     %00111100
4888   AFCC F8                          .db     %11111000
4889   AFCD DF                          .db     %11011111
4890   AFCE             
4891   AFCE             bonus_enemy5:
4892   AFCE 3C                          .db     %00111100
4893   AFCF 28                          .db     %00101000
4894   AFD0 BD                          .db     %10111101
4895   AFD1 EF                          .db     %11101111
4896   AFD2 FF                          .db     %11111111
4897   AFD3 3C                          .db     %00111100
4898   AFD4 3C                          .db     %00111100
4899   AFD5 3C                          .db     %00111100
4900   AFD6             
4901   AFD6             bonus_enemy6:
4902   AFD6 81                          .db     %10000001
4903   AFD7 FF                          .db     %11111111
4904   AFD8 FF                          .db     %11111111
4905   AFD9 77                          .db     %01110111
4906   AFDA 00                          .db     %00000000
4907   AFDB DD                          .db     %11011101
4908   AFDC AA                          .db     %10101010
4909   AFDD 3E                          .db     %00111110    
4910   AFDE             
4911   AFDE             bonus_enemy_NFT:
4912   AFDE             nft_anim_sprite:
4913   AFDE 7E                          .db     %01111110
4914   AFDF A5                          .db     %10100101
4915   AFE0 DB                          .db     %11011011
4916   AFE1 E7                          .db     %11100111
4917   AFE2 A5                          .db     %10100101
4918   AFE3 5A                          .db     %01011010
4919   AFE4 24                          .db     %00100100
4920   AFE5 18                          .db     %00011000                                
4921   AFE6               
4922   AFE6             
4923   AFE6             bonus_hammer1:   
4924   AFE6 7F FC                       .db     %01111111,%11111100
4925   AFE8 60 14                       .db     %01100000,%00010100
4926   AFEA 60 14                       .db     %01100000,%00010100
4927   AFEC 60 14                       .db     %01100000,%00010100
4928   AFEE 7E FC                       .db     %01111110,%11111100
4929   AFF0 01 80                       .db     %00000001,%10000000
4930   AFF2 01 80                       .db     %00000001,%10000000
4931   AFF4 01 80                       .db     %00000001,%10000000
4932   AFF6 01 80                       .db     %00000001,%10000000
4933   AFF8 01 80                       .db     %00000001,%10000000
4934   AFFA 00 00                       .db     %00000000,%00000000
4935   AFFC 00 00                       .db     %00000000,%00000000
4936   AFFE             bonus_hammer2:   
4937   AFFE 01 00                       .db     %00000001,%00000000
4938   B000 03 80                       .db     %00000011,%10000000
4939   B002 07 C0                       .db     %00000111,%11000000
4940   B004 0C E0                       .db     %00001100,%11100000
4941   B006 18 30                       .db     %00011000,%00110000
4942   B008 08 38                       .db     %00001000,%00111000
4943   B00A 0C 1C                       .db     %00001100,%00011100
4944   B00C 0A 0E                       .db     %00001010,%00001110
4945   B00E 15 17                       .db     %00010101,%00010111
4946   B010 28 A6                       .db     %00101000,%10100110
4947   B012 60 6C                       .db     %01100000,%01101100
4948   B014 C0 30                       .db     %11000000,%00110000 
4949   B016             bonus_hammer3:   
4950   B016 00 00                       .db     %00000000,%00000000
4951   B018 07 FC                       .db     %00000111,%11111100
4952   B01A 03 F8                       .db     %00000011,%11111000
4953   B01C 02 08                       .db     %00000010,%00001000
4954   B01E FE 08                       .db     %11111110,%00001000
4955   B020 FE 08                       .db     %11111110,%00001000
4956   B022 00 08                       .db     %00000000,%00001000
4957   B024 03 F8                       .db     %00000011,%11111000
4958   B026 03 F8                       .db     %00000011,%11111000
4959   B028 07 FC                       .db     %00000111,%11111100
4960   B02A 02 00                       .db     %0000010,%100000000
4961   B02C 0F 98                       .db     %0001111,%010011000
4962   B02E 40 24                       .db     %01000000,%00100100
4963   B030             
4964   B030             bonus_hammer4:
4965   B030 00 00                       .db     %00000000,%00000000
4966   B032 00 00                       .db     %00000000,%00000000
4967   B034 07 FC                       .db     %00000111,%11111100
4968   B036 03 F8                       .db     %00000011,%11111000
4969   B038 02 08                       .db     %00000010,%00001000
4970   B03A FE 08                       .db     %11111110,%00001000
4971   B03C FE 08                       .db     %11111110,%00001000
4972   B03E 00 08                       .db     %00000000,%00001000
4973   B040 83 F9                       .db     %10000011,%11111001
4974   B042 03 F8                       .db     %00000011,%11111000
4975   B044 87 FC                       .db     %10000111,%11111100
4976   B046 22 F1                       .db     %0100010,%111110001
4977   B048 7F FF                       .db     %1111111,%011111111
4978   B04A             
4979   B04A             bonus_hammer5:   
4980   B04A 01 00                       .db     %00000001,%00000000
4981   B04C 03 80                       .db     %00000011,%10000000
4982   B04E 07 C0                       .db     %00000111,%11000000
4983   B050 0C E0                       .db     %00001100,%11100000
4984   B052 18 30                       .db     %00011000,%00110000
4985   B054 08 38                       .db     %00001000,%00111000
4986   B056 0C 1C                       .db     %00001100,%00011100
4987   B058 0A 0E                       .db     %00001010,%00001110
4988   B05A 15 17                       .db     %00010101,%00010111
4989   B05C 28 A6                       .db     %00101000,%10100110
4990   B05E 60 6C                       .db     %01100000,%01101100
4991   B060 C0 30                       .db     %11000000,%00110000 
4992   B062 3F F8                       .db     %00111111,%11111000
4993   B064 FF FF                       .db     %11111111,%11111111
4994   B066             
4995   B066             bonus_hammer6:   
4996   B066 3F FC                       .db     %0111111,%111111100
4997   B068 40 1C                       .db     %01000000,%00011100
4998   B06A 40 1C                       .db     %01000000,%00011100
4999   B06C 40 1C                       .db     %01000000,%00011100
5000   B06E 2F FC                       .db     %0101111,%111111100
5001   B070 7F FC                       .db     %01111111,%11111100
5002   B072 06 00                       .db     %00000110,%00000000
5003   B074 06 00                       .db     %00000110,%00000000
5004   B076 06 00                       .db     %00000110,%00000000
5005   B078 06 00                       .db     %00000110,%00000000
5006   B07A 01 F0                       .db     %00000001,%11110000
5007   B07C 03 FF                       .db     %00000011,%11111111
5008   B07E             
5009   B07E             bonus_hammer7:
5010   B07E 00 00                       .db     %00000000,%00000000
5011   B080 00 00                       .db     %00000000,%00000000
5012   B082 00 00                       .db     %00000000,%00000000
5013   B084 00 00                       .db     %00000000,%00000000
5014   B086 00 00                       .db     %00000000,%00000000
5015   B088 00 00                       .db     %00000000,%00000000
5016   B08A 00 00                       .db     %00000000,%00000000
5017   B08C 00 00                       .db     %00000000,%00000000
5018   B08E 00 00                       .db     %00000000,%00000000
5019   B090 00 00                       .db     %00000000,%00000000
5020   B092 3F FE                       .db     %00111111,%11111110
5021   B094 FF FE                       .db     %11111111,%11111110
5022   B096             bonus_hammer8:
5023   B096 00 00                       .db     %00000000,%00000000
5024   B098 00 00                       .db     %00000000,%00000000
5025   B09A 00 00                       .db     %00000000,%00000000
5026   B09C 00 00                       .db     %00000000,%00000000
5027   B09E 00 00                       .db     %00000000,%00000000
5028   B0A0 00 00                       .db     %00000000,%00000000
5029   B0A2 00 00                       .db     %00000000,%00000000
5030   B0A4 00 00                       .db     %00000000,%00000000
5031   B0A6 00 00                       .db     %00000000,%00000000
5032   B0A8 00 00                       .db     %00000000,%00000000
5033   B0AA 00 00                       .db     %00000000,%00000000
5034   B0AC FF FE                       .db     %11111111,%11111110
5035   B0AE             
5036   B0AE             bonus_splat1:   
5037   B0AE 00 00                       .db     %00000000,%00000000
5038   B0B0 6D 40                       .db     %01101101,%01000000
5039   B0B2 8A 80                       .db     %10001010,%10000000
5040   B0B4 61 80                       .db     %01100001,%10000000
5041   B0B6 9E 80                       .db     %10011110,%10000000
5042   B0B8 5E 40                       .db     %01011110,%01000000
5043   B0BA 5D A0                       .db     %01011101,%10100000
5044   B0BC AB 80                       .db     %10101011,%10000000
5045   B0BE 5E 40                       .db     %01011110,%01000000
5046   B0C0             
5047   B0C0             bonus_splat2:   
5048   B0C0 C0 60                       .db     %11000000,%01100000
5049   B0C2 00 08                       .db     %00000000,%00001000
5050   B0C4 60 A0                       .db     %01100000,%10100000
5051   B0C6 02 50                       .db     %00000010,%01010000
5052   B0C8 8D A8                       .db     %10001101,%10101000
5053   B0CA 99 E0                       .db     %10011001,%11100000
5054   B0CC 4C 30                       .db     %01001100,%00110000
5055   B0CE 07 F0                       .db     %00000111,%11110000
5056   B0D0 0F F8                       .db     %00001111,%11111000
5057   B0D2             
5058   B0D2             bonus_heart_on:    
5059   B0D2 00                          .db     %00000000  
5060   B0D3 6C                          .db     %01101100
5061   B0D4 FA                          .db     %11111010
5062   B0D5 FA                          .db     %11111010
5063   B0D6 FA                          .db     %11111010
5064   B0D7 74                          .db     %01110100
5065   B0D8 38                          .db     %00111000
5066   B0D9 10                          .db     %00010000
5067   B0DA             
5068   B0DA             bonus_heart_off:
5069   B0DA 00                          .db     %00000000  
5070   B0DB 00                          .db     %00000000
5071   B0DC 68                          .db     %01101000
5072   B0DD 78                          .db     %01111000
5073   B0DE 78                          .db     %01111000
5074   B0DF 30                          .db     %00110000
5075   B0E0 10                          .db     %00010000
5076   B0E1 00                          .db     %00000000
5077   B0E2                           
5078   B0E2             
5079   B0E2             spin_anim:           
5080   B0E2 00                          .db     %00000000
5081   B0E3 00                          .db     %00000000
5082   B0E4 7E                          .db     %01111110
5083   B0E5 81                          .db     %10000001
5084   B0E6 81                          .db     %10000001
5085   B0E7 7E                          .db     %01111110
5086   B0E8 00                          .db     %00000000
5087   B0E9 00                          .db     %00000000
5088   B0EA 00                          .db     %00000000
5089   B0EB 66                          .db     %01100110
5090   B0EC 00                          .db     %00000000
5091   B0ED 7E                          .db     %01111110
5092   B0EE 7E                          .db     %01111110
5093   B0EF 24                          .db     %00100100
5094   B0F0 24                          .db     %00100100
5095   B0F1 00                          .db     %00000000
5096   B0F2             
5097   B0F2             ;(4*8)x25
5098   B0F2             tilogo:
5099   B0F2 00 FE 00 00     .db    $00, $FE, $00, $00
5100   B0F6 00 FE 00 00     .db    $00, $FE, $00, $00
5101   B0FA 00 FE 30 00     .db    $00, $FE, $30, $00
5102   B0FE 00 FE 78 00     .db    $00, $FE, $78, $00
5103   B102 00 FF 30 00     .db    $00, $FF, $30, $00
5104   B106 00 FF 07 E0     .db    $00, $FF, $07, $E0
5105   B10A 00 FF 77 E0     .db    $00, $FF, $77, $E0
5106   B10E 00 FF 77 E0     .db    $00, $FF, $77, $E0
5107   B112 00 F8 61 E0     .db    $00, $F8, $61, $E0
5108   B116 1F F8 E3 E0     .db    $1F, $F8, $E3, $E0
5109   B11A 7F F8 E3 F0     .db    $7F, $F8, $E3, $F0
5110   B11E 7F FE EF F0     .db    $7F, $FE, $EF, $F0
5111   B122 3F FE CF F0     .db    $3F, $FE, $CF, $F0
5112   B126 1F FD DF F0     .db    $1F, $FD, $DF, $F0
5113   B12A 0F FD DF F0     .db    $0F, $FD, $DF, $F0
5114   B12E 07 FC 1F F0     .db    $07, $FC, $1F, $F0
5115   B132 07 9C 0F C0     .db    $07, $9C, $0F, $C0
5116   B136 03 0E 0F 00     .db    $03, $0E, $0F, $00
5117   B13A 00 0F FE 00     .db    $00, $0F, $FE, $00
5118   B13E 00 07 F8 00     .db    $00, $07, $F8, $00
5119   B142 00 07 F8 00     .db    $00, $07, $F8, $00
5120   B146 00 03 F0 00     .db    $00, $03, $F0, $00
5121   B14A 00 03 F0 00     .db    $00, $03, $F0, $00
5122   B14E 00 01 F0 00     .db    $00, $01, $F0, $00
5123   B152 00 00 F8 00     .db    $00, $00, $F8, $00
5124   B156             
5125   B156 78          bg_anim_val:    .db     %1111000
5126   B157 01          bg_anim_frame:  .db     01
5127   B158             bg_anim:
5128   B158             bg_anim_run1:      
5129   B158 0C                          .db     %00001100 
5130   B159 1C                          .db     %00011100
5131   B15A 1C                          .db     %00011100
5132   B15B 1C                          .db     %00011100
5133   B15C 09                          .db     %00001001
5134   B15D 1F                          .db     %00011111
5135   B15E 3C                          .db     %00111100
5136   B15F 70                          .db     %01110000
5137   B160 38                          .db     %00111000
5138   B161 68                          .db     %01101000
5139   B162 C8                          .db     %11001000
5140   B163 C0                          .db     %11000000        
5141   B164             bg_anim_run2:      
5142   B164 04                          .db     %00000100 
5143   B165 0C                          .db     %00001100
5144   B166 1C                          .db     %00011100
5145   B167 1D                          .db     %00011101
5146   B168 09                          .db     %00001001
5147   B169 1E                          .db     %00011110
5148   B16A 3C                          .db     %00111100
5149   B16B 50                          .db     %01010000
5150   B16C 28                          .db     %00101000
5151   B16D 44                          .db     %01000100
5152   B16E C2                          .db     %11000010
5153   B16F 00                          .db     %00000000        
5154   B170             bg_anim_run3:      
5155   B170 20                          .db     %00100000 
5156   B171 70                          .db     %01110000
5157   B172 72                          .db     %01110010
5158   B173 62                          .db     %01100010
5159   B174 14                          .db     %00010100
5160   B175 78                          .db     %01111000
5161   B176 B0                          .db     %10110000
5162   B177 30                          .db     %00110000
5163   B178 3C                          .db     %00111100
5164   B179 22                          .db     %00100010
5165   B17A 41                          .db     %01000001
5166   B17B 81                          .db     %10000001                             
5167   B17C             bg_anim_run4:      
5168   B17C 20                          .db     %00100000 
5169   B17D 30                          .db     %00110000
5170   B17E 38                          .db     %00111000
5171   B17F 3A                          .db     %00111010
5172   B180 1C                          .db     %00011100
5173   B181 38                          .db     %00111000
5174   B182 78                          .db     %01111000
5175   B183 B8                          .db     %10111000
5176   B184 38                          .db     %00111000
5177   B185 22                          .db     %00100010
5178   B186 21                          .db     %00100001
5179   B187 41                          .db     %01000001  
5180   B188             bg_anim_run5:      
5181   B188 18                          .db     %00011000 
5182   B189 1C                          .db     %00011100
5183   B18A 1C                          .db     %00011100
5184   B18B 0C                          .db     %00001100
5185   B18C 08                          .db     %00001000
5186   B18D 3C                          .db     %00111100
5187   B18E 3C                          .db     %00111100
5188   B18F 3C                          .db     %00111100
5189   B190 1C                          .db     %00011100
5190   B191 14                          .db     %00010100
5191   B192 34                          .db     %00110100
5192   B193 04                          .db     %00000100 
5193   B194             bg_anim_run6:      
5194   B194             
5195   B194 38                          .db     %00111000
5196   B195 1C                          .db     %00011100
5197   B196 1C                          .db     %00011100
5198   B197 0C                          .db     %00001100
5199   B198 1A                          .db     %00011010
5200   B199 1C                          .db     %00011100
5201   B19A 14                          .db     %00010100
5202   B19B 3C                          .db     %00111100
5203   B19C 18                          .db     %00011000
5204   B19D 18                          .db     %00011000
5205   B19E 08                          .db     %00001000 
5206   B19F 10                          .db     %00010000
5207   B1A0             
5208   B1A0             bg_anim_run7:      
5209   B1A0             
5210   B1A0 08                          .db     %00001000
5211   B1A1 18                          .db     %00011000
5212   B1A2 3C                          .db     %00111100
5213   B1A3 1C                          .db     %00011100
5214   B1A4 08                          .db     %00001000
5215   B1A5 1A                          .db     %00011010
5216   B1A6 1C                          .db     %00011100
5217   B1A7 38                          .db     %00111000
5218   B1A8 18                          .db     %00011000
5219   B1A9 18                          .db     %00011000
5220   B1AA 1C                          .db     %00011100 
5221   B1AB 20                          .db     %00100000
5222   B1AC             
5223   B1AC             
5224   B1AC             bg_anim_1:      
5225   B1AC 18                          .db     %00011000  
5226   B1AD 24                          .db     %00100100
5227   B1AE 5A                          .db     %01011010
5228   B1AF 58                          .db     %01011000
5229   B1B0 24                          .db     %00100100
5230   B1B1 1A                          .db     %00011010
5231   B1B2 5A                          .db     %01011010
5232   B1B3 24                          .db     %00100100
5233   B1B4 18                          .db     %00011000
5234   B1B5             
5235   B1B5             bg_anim_2: 
5236   B1B5 FF                          .db     %11111111  
5237   B1B6 81                          .db     %10000001
5238   B1B7 81                          .db     %10000001
5239   B1B8 81                          .db     %10000001
5240   B1B9 81                          .db     %10000001
5241   B1BA 81                          .db     %10000001
5242   B1BB 81                          .db     %10000001
5243   B1BC 81                          .db     %10000001
5244   B1BD 81                          .db     %10000001
5245   B1BE 81                          .db     %10000001
5246   B1BF FF                          .db     %11111111      
5247   B1C0             bg_anim_3: 
5248   B1C0 30                          .db     %00110000 
5249   B1C1 36                          .db     %00110110
5250   B1C2 B6                          .db     %10110110
5251   B1C3 B6                          .db     %10110110
5252   B1C4 FE                          .db     %11111110
5253   B1C5 FE                          .db     %11111110
5254   B1C6 30                          .db     %00110000
5255   B1C7 30                          .db     %00110000
5256   B1C8 30                          .db     %00110000
5257   B1C9 30                          .db     %00110000
5258   B1CA             bg_anim_4: 
5259   B1CA 7F                          .db     %01111111  
5260   B1CB 82                          .db     %10000010
5261   B1CC 82                          .db     %10000010
5262   B1CD 82                          .db     %10000010
5263   B1CE 82                          .db     %10000010
5264   B1CF FE                          .db     %11111110   
5265   B1D0 10                          .db     %00010000                  
5266   B1D1 10                          .db     %00010000    
5267   B1D2 10                          .db     %00010000    
5268   B1D3 10                          .db     %00010000                   
5269   B1D4 08 05 05 07 draw_one_reel:  .db    $08, $05, $05, $07, $08,    $0F
5269   B1D8 08 0F 
5270   B1DA             
5271   B1DA             
5272   B1DA             
5273   B1DA             slot_fin_reel_state:
5274   B1DA             slot_chk_win_state:
5275   B1DA 02 02 02 02     .db    $02, $02, $02, $02, $02
5275   B1DE 02 
5276   B1DF 02 02 02 02     .db    $02, $02, $02, $02, $02    
5276   B1E3 02 
5277   B1E4 02 02 02 02     .db    $02, $02, $02, $02, $02
5277   B1E8 02 
5278   B1E9 02 02 02 02     .db    $02, $02, $02, $02, $02   
5278   B1ED 02 
5279   B1EE 02 02 02 02     .db    $02, $02, $02, $02, $02,    $0F
5279   B1F2 02 0F 
5280   B1F4             ;Used to retain board state between poweroffs.
5281   B1F4             slot_saved_reel_state:
5282   B1F4 02 02 02 02     .db    $02, $02, $02, $02, $02
5282   B1F8 02 
5283   B1F9 02 02 02 02     .db    $02, $02, $02, $02, $02    
5283   B1FD 02 
5284   B1FE 02 02 02 02     .db    $02, $02, $02, $02, $02
5284   B202 02 
5285   B203 02 02 02 02     .db    $02, $02, $02, $02, $02   
5285   B207 02 
5286   B208 02 02 02 02     .db    $02, $02, $02, $02, $02,    $0F
5286   B20C 02 0F 
5287   B20E             slot_cur_reel_state:
5288   B20E 02 02 02 02     .db    $02, $02, $02, $02, $02
5288   B212 02 
5289   B213 02 02 02 02     .db    $02, $02, $02, $02, $02    
5289   B217 02 
5290   B218 02 02 02 02     .db    $02, $02, $02, $02, $02
5290   B21C 02 
5291   B21D 02 02 02 02     .db    $02, $02, $02, $02, $02   
5291   B221 02 
5292   B222 02 02 02 02     .db    $02, $02, $02, $02, $02,    $0F
5292   B226 02 0F 
5293   B228             win_anim_array:
5294   B228 00 00 00 00     .db    $00, $00, $00, $00, $00
5294   B22C 00 
5295   B22D 00 00 00 00     .db    $00, $00, $00, $00, $00 
5295   B231 00 
5296   B232 00 00 00 00     .db    $00, $00, $00, $00, $00
5296   B236 00 
5297   B237 00 00 00 00     .db    $00, $00, $00, $00, $00   
5297   B23B 00 
5298   B23C 00 00 00 00     .db    $00, $00, $00, $00, $00,    $0F
5298   B240 00 0F 
5299   B242             draw_at_X:
5300   B242 04 04 04 04     .db    $04, $04, $04, $04, $04
5300   B246 04 
5301   B247 14 14 14 14     .db    $14, $14, $14, $14, $14
5301   B24B 14 
5302   B24C 24 24 24 24     .db    $24, $24, $24, $24, $24
5302   B250 24 
5303   B251 34 34 34 34     .db    $34, $34, $34, $34, $34
5303   B255 34 
5304   B256 44 44 44 44     .db    $44, $44, $44, $44, $44,    $0F
5304   B25A 44 0F 
5305   B25C             draw_at_Y:
5306   B25C 03 0D 17 21     .db    $03, $0D, $17, $21, $2B
5306   B260 2B 
5307   B261 03 0D 17 21     .db    $03, $0D, $17, $21, $2B     
5307   B265 2B 
5308   B266 03 0D 17 21     .db    $03, $0D, $17, $21, $2B
5308   B26A 2B 
5309   B26B 03 0D 17 21     .db    $03, $0D, $17, $21, $2B
5309   B26F 2B 
5310   B270 03 0D 17 21     .db    $03, $0D, $17, $21, $2B,    $0F
5310   B274 2B 0F 
5311   B276             
5312   B276             
5313   B276             ;Offsets to get to to the parallel positions from CUR_STATE
5314   B276                                       
5315   B276             ;147AD
5316   B276             ;258BE
5317   B276             ;369CF
5318   B276             draw_w_h:
5319   B276 08 01           .db    $08, $01 
5320   B278             slot_win_states:      
5321   B278                         ;$[ln#, xInArow, symID, winTot8,16],...
5322   B278 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5322   B27C 0F 0F 
5323   B27E 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5323   B282 0F 0F 
5324   B284 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5324   B288 0F 0F 
5325   B28A 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5325   B28E 0F 0F 
5326   B290 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5326   B294 0F 0F 
5327   B296 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5327   B29A 0F 0F 
5328   B29C 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5328   B2A0 0F 0F 
5329   B2A2 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F
5329   B2A6 0F 0F 
5330   B2A8 0F 0F 0F 0F     .db       $0F, $0F, $0F, $0F, $0F, $0F, 0
5330   B2AC 0F 0F 00 
5331   B2AF             
5332   B2AF             ;01,06,0B,10,15
5333   B2AF             ;02,07,0C,11,16
5334   B2AF             ;--------------
5335   B2AF             ;03,08,0D,12,17
5336   B2AF             ;04,09,0E,13,18
5337   B2AF             ;05,0A,0F,14,19
5338   B2AF             
5339   B2AF             ;147AD
5340   B2AF             ;258BE
5341   B2AF             ;369CF
5342   B2AF             ;pay_rules:
5343   B2AF             ;    .db    $04, $09, $0E, $13, $18, $FF       ;(16,26 -> 47,26 -> 27,26)
5344   B2AF             ;    .db    $03, $08, $0D, $12, $17, $FF       ;(16,36 -> 47,36 -> 78,36)
5345   B2AF             ;
5346   B2AF             ;    .db    $05, $0A, $0F, $14, $19, $FF       ;(16,16 -> 47,16 -> 78,16)
5347   B2AF             ;   
5348   B2AF             ;    .db    $03, $09, $0F, $13, $17, $FF       ;(16,36 -> 47,16 -> 78,36)
5349   B2AF             ;    .db    $05, $09, $0D, $13, $19, $FF       ;(16,16 -> 47,38 -> 78,16)
5350   B2AF             ;    
5351   B2AF             ;    .db    $03, $08, $0E, $12, $17, $FF       ;(16,36 -> 31,36 -> 47,26 -> 62,36 -> 78,36)
5352   B2AF             ;    .db    $05, $0A, $0E, $14, $19, $FF       ;(16,16 -> 31,16 -> 47,26 -> 62,16 -> 78,16)
5353   B2AF             ;
5354   B2AF             ;    .db    $03, $0A, $0D, $14, $17, $FF       ;(16,36 -> 31,16 -> 47,36 -> 62,16 -> 78,36)
5355   B2AF             ;    .db    $05, $08, $0F, $12, $19, $EE       ;(16,16 -> 31,36 -> 47,16 -> 62,36 -> 78,16)
5356   B2AF                             ;payline
5357   B2AF             
5358   B2AF             pay_rules:
5359   B2AF 04 09 0E 13     .db    $04, $09, $0E, $13, $18, $FF              ;pay line 1
5359   B2B3 18 FF 
5360   B2B5 03 08 0D 12     .db    $03, $08, $0D, $12, $17, $FF              ;         2-3
5360   B2B9 17 FF 
5361   B2BB             
5362   B2BB 05 0A 0F 14     .db    $05, $0A, $0F, $14, $19, $FF 
5362   B2BF 19 FF 
5363   B2C1                
5364   B2C1 03 09 0F 13     .db    $03, $09, $0F, $13, $17, $FF              ;         3-5
5364   B2C5 17 FF 
5365   B2C7 05 09 0D 13     .db    $05, $09, $0D, $13, $19, $FF 
5365   B2CB 19 FF 
5366   B2CD                 
5367   B2CD 03 08 0E 12     .db    $03, $08, $0E, $12, $17, $FF              ;         5-7
5367   B2D1 17 FF 
5368   B2D3 05 0A 0E 14     .db    $05, $0A, $0E, $14, $19, $FF 
5368   B2D7 19 FF 
5369   B2D9             
5370   B2D9 03 0A 0D 14     .db    $03, $0A, $0D, $14, $17, $FF              ;         8-9
5370   B2DD 17 FF 
5371   B2DF 05 08 0F 12     .db    $05, $08, $0F, $12, $19, $EE 
5371   B2E3 19 EE 
5372   B2E5             bonus_loc:
5373   B2E5 FF FF FF FF     .db       $FF,$FF,$FF,$FF,$FF
5373   B2E9 FF 
5374   B2EA FF FF FF FF     .db       $FF,$FF,$FF,$FF,$FF
5374   B2EE FF 
5375   B2EF FF FF FF FF     .db       $FF,$FF,$FF,$FF,$FF,  $EE
5375   B2F3 FF EE 
5376   B2F5             
5377   B2F5             
5378   B2F5 00 00 00 00 p_callseq:      .db  $00,$00,$00,$00,$00,$00
5378   B2F9 00 00 
5379   B2FB 00          rectMaskB1Mask: .db  $00
5380   B2FC             ;=============================================== 
5381   B2FC             ;Top-Left reel( 0Ch(+16offset),17h(+10offset) )
5382   B2FC             ;===============================================    
5383   B2FC             
5384   B2FC             ;---------------------------------DATA------------------------------------------------------
5385   B2FC             ;--------------------------------GLOBAL-----------------------------------------------------
5386   B2FC             LCD_HEIGHT:         .EQU            64
5387   B2FC             LCD_WIDTH:          .EQU            96
5388   B2FC             
5389   B2FC             ;-----------------------------QR CODE DATA-------------------------------------------------
5390   B2FC             
5391   B2FC             
5392   B2FC 00 00 00 00 QR_29x29_mask7:             .fill    29*29, $00
5392   B300 00 00 00 00 
5392   B304 00 00 00 00 
5392   B308 00 00 00 00 
5392   B30C 00 00 00 00 
5392   B310 00 00 00 00 
5392   B314 00 00 00 00 
5392   B318 00 00 00 00 
5392   B31C 00 00 00 00 
5392   B320 00 00 00 00 
5392   B324 00 00 00 00 
5392   B328 00 00 00 00 
5392   B32C 00 00 00 00 
5392   B330 00 00 00 00 
5392   B334 00 00 00 00 
5392   B338 00 00 00 00 
5392   B33C 00 00 00 00 
5392   B340 00 00 00 00 
5392   B344 00 00 00 00 
5392   B348 00 00 00 00 
5392   B34C 00 00 00 00 
5392   B350 00 00 00 00 
5392   B354 00 00 00 00 
5392   B358 00 00 00 00 
5392   B35C 00 00 00 00 
5392   B360 00 00 00 00 
5392   B364 00 00 00 00 
5392   B368 00 00 00 00 
5392   B36C 00 00 00 00 
5392   B370 00 00 00 00 
5392   B374 00 00 00 00 
5392   B378 00 00 00 00 
5392   B37C 00 00 00 00 
5392   B380 00 00 00 00 
5392   B384 00 00 00 00 
5392   B388 00 00 00 00 
5392   B38C 00 00 00 00 
5392   B390 00 00 00 00 
5392   B394 00 00 00 00 
5392   B398 00 00 00 00 
5392   B39C 00 00 00 00 
5392   B3A0 00 00 00 00 
5392   B3A4 00 00 00 00 
5392   B3A8 00 00 00 00 
5392   B3AC 00 00 00 00 
5392   B3B0 00 00 00 00 
5392   B3B4 00 00 00 00 
5392   B3B8 00 00 00 00 
5392   B3BC 00 00 00 00 
5392   B3C0 00 00 00 00 
5392   B3C4 00 00 00 00 
5392   B3C8 00 00 00 00 
5392   B3CC 00 00 00 00 
5392   B3D0 00 00 00 00 
5392   B3D4 00 00 00 00 
5392   B3D8 00 00 00 00 
5392   B3DC 00 00 00 00 
5392   B3E0 00 00 00 00 
5392   B3E4 00 00 00 00 
5392   B3E8 00 00 00 00 
5392   B3EC 00 00 00 00 
5392   B3F0 00 00 00 00 
5392   B3F4 00 00 00 00 
5392   B3F8 00 00 00 00 
5392   B3FC 00 00 00 00 
5392   B400 00 00 00 00 
5392   B404 00 00 00 00 
5392   B408 00 00 00 00 
5392   B40C 00 00 00 00 
5392   B410 00 00 00 00 
5392   B414 00 00 00 00 
5392   B418 00 00 00 00 
5392   B41C 00 00 00 00 
5392   B420 00 00 00 00 
5392   B424 00 00 00 00 
5392   B428 00 00 00 00 
5392   B42C 00 00 00 00 
5392   B430 00 00 00 00 
5392   B434 00 00 00 00 
5392   B438 00 00 00 00 
5392   B43C 00 00 00 00 
5392   B440 00 00 00 00 
5392   B444 00 00 00 00 
5392   B448 00 00 00 00 
5392   B44C 00 00 00 00 
5392   B450 00 00 00 00 
5392   B454 00 00 00 00 
5392   B458 00 00 00 00 
5392   B45C 00 00 00 00 
5392   B460 00 00 00 00 
5392   B464 00 00 00 00 
5392   B468 00 00 00 00 
5392   B46C 00 00 00 00 
5392   B470 00 00 00 00 
5392   B474 00 00 00 00 
5392   B478 00 00 00 00 
5392   B47C 00 00 00 00 
5392   B480 00 00 00 00 
5392   B484 00 00 00 00 
5392   B488 00 00 00 00 
5392   B48C 00 00 00 00 
5392   B490 00 00 00 00 
5392   B494 00 00 00 00 
5392   B498 00 00 00 00 
5392   B49C 00 00 00 00 
5392   B4A0 00 00 00 00 
5392   B4A4 00 00 00 00 
5392   B4A8 00 00 00 00 
5392   B4AC 00 00 00 00 
5392   B4B0 00 00 00 00 
5392   B4B4 00 00 00 00 
5392   B4B8 00 00 00 00 
5392   B4BC 00 00 00 00 
5392   B4C0 00 00 00 00 
5392   B4C4 00 00 00 00 
5392   B4C8 00 00 00 00 
5392   B4CC 00 00 00 00 
5392   B4D0 00 00 00 00 
5392   B4D4 00 00 00 00 
5392   B4D8 00 00 00 00 
5392   B4DC 00 00 00 00 
5392   B4E0 00 00 00 00 
5392   B4E4 00 00 00 00 
5392   B4E8 00 00 00 00 
5392   B4EC 00 00 00 00 
5392   B4F0 00 00 00 00 
5392   B4F4 00 00 00 00 
5392   B4F8 00 00 00 00 
5392   B4FC 00 00 00 00 
5392   B500 00 00 00 00 
5392   B504 00 00 00 00 
5392   B508 00 00 00 00 
5392   B50C 00 00 00 00 
5392   B510 00 00 00 00 
5392   B514 00 00 00 00 
5392   B518 00 00 00 00 
5392   B51C 00 00 00 00 
5392   B520 00 00 00 00 
5392   B524 00 00 00 00 
5392   B528 00 00 00 00 
5392   B52C 00 00 00 00 
5392   B530 00 00 00 00 
5392   B534 00 00 00 00 
5392   B538 00 00 00 00 
5392   B53C 00 00 00 00 
5392   B540 00 00 00 00 
5392   B544 00 00 00 00 
5392   B548 00 00 00 00 
5392   B54C 00 00 00 00 
5392   B550 00 00 00 00 
5392   B554 00 00 00 00 
5392   B558 00 00 00 00 
5392   B55C 00 00 00 00 
5392   B560 00 00 00 00 
5392   B564 00 00 00 00 
5392   B568 00 00 00 00 
5392   B56C 00 00 00 00 
5392   B570 00 00 00 00 
5392   B574 00 00 00 00 
5392   B578 00 00 00 00 
5392   B57C 00 00 00 00 
5392   B580 00 00 00 00 
5392   B584 00 00 00 00 
5392   B588 00 00 00 00 
5392   B58C 00 00 00 00 
5392   B590 00 00 00 00 
5392   B594 00 00 00 00 
5392   B598 00 00 00 00 
5392   B59C 00 00 00 00 
5392   B5A0 00 00 00 00 
5392   B5A4 00 00 00 00 
5392   B5A8 00 00 00 00 
5392   B5AC 00 00 00 00 
5392   B5B0 00 00 00 00 
5392   B5B4 00 00 00 00 
5392   B5B8 00 00 00 00 
5392   B5BC 00 00 00 00 
5392   B5C0 00 00 00 00 
5392   B5C4 00 00 00 00 
5392   B5C8 00 00 00 00 
5392   B5CC 00 00 00 00 
5392   B5D0 00 00 00 00 
5392   B5D4 00 00 00 00 
5392   B5D8 00 00 00 00 
5392   B5DC 00 00 00 00 
5392   B5E0 00 00 00 00 
5392   B5E4 00 00 00 00 
5392   B5E8 00 00 00 00 
5392   B5EC 00 00 00 00 
5392   B5F0 00 00 00 00 
5392   B5F4 00 00 00 00 
5392   B5F8 00 00 00 00 
5392   B5FC 00 00 00 00 
5392   B600 00 00 00 00 
5392   B604 00 00 00 00 
5392   B608 00 00 00 00 
5392   B60C 00 00 00 00 
5392   B610 00 00 00 00 
5392   B614 00 00 00 00 
5392   B618 00 00 00 00 
5392   B61C 00 00 00 00 
5392   B620 00 00 00 00 
5392   B624 00 00 00 00 
5392   B628 00 00 00 00 
5392   B62C 00 00 00 00 
5392   B630 00 00 00 00 
5392   B634 00 00 00 00 
5392   B638 00 00 00 00 
5392   B63C 00 00 00 00 
5392   B640 00 00 00 00 
5392   B644 00 
5393   B645 AA          r0s0:                 .db         %10101010
5394   B646 1C          r1s0:                 .db         %00011100    
5395   B647 6D          r1f0:                 .db         %01101101 ;cy=1
5396   B648 92          r1_4s0_to_r2_5s0:     .db         %10010010 ;cy=0
5397   B649             
5398   B649             QR_29X29_BYTES:       .EQU        29*4
5399   B649             QR_ROOF:              .EQU          29
5400   B649             QR_V3L_DWORDS:        .EQU          55
5401   B649             QR_v3L_EWORDS:        .EQU          15
5402   B649             
5403   B649             ;msb, right to left, in direction
5404   B649             qr_data:           
5405   B649             ;Modes: (type, length, value)    
5406   B649                         ;4bit type selector;  0100 = Byte - Latin-1, 1 char = 8 bits
5407   B649 04          qr_data_type:         .db          %00000100
5408   B64A             ;           ;length (8bits); count of NABK chars (Num,Alpha,Byte,Kanji) in Data section
5409   B64A 1C          qr_data_len:          .db          %00011100 
5410   B64B 68 74 74 70 qr_data_string:       .db         "https://minzsoft.xyz/dashboard/ti-bonus/801vV15"
5410   B64F 73 3A 2F 2F 
5410   B653 6D 69 6E 7A 
5410   B657 73 6F 66 74 
5410   B65B 2E 78 79 7A 
5410   B65F 2F 64 61 73 
5410   B663 68 62 6F 61 
5410   B667 72 64 2F 74 
5410   B66B 69 2D 62 6F 
5410   B66F 6E 75 73 2F 
5410   B673 38 30 31 76 
5410   B677 56 31 35 
5411   B67A 00          qr_data_transID:      .db          0
5412   B67B 00 00 00 00 qr_data_transactionSPC:   .fill     QR_V3L_DWORDS-5, $00
5412   B67F 00 00 00 00 
5412   B683 00 00 00 00 
5412   B687 00 00 00 00 
5412   B68B 00 00 00 00 
5412   B68F 00 00 00 00 
5412   B693 00 00 00 00 
5412   B697 00 00 00 00 
5412   B69B 00 00 00 00 
5412   B69F 00 00 00 00 
5412   B6A3 00 00 00 00 
5412   B6A7 00 00 00 00 
5412   B6AB 00 00 
5413   B6AD             qr_DSpace_Message:
5414   B6AD             ;0100      0000                                                                                                                  11padding
5415   B6AD             ;42,A4,D7,22,E2,05,76,17,47,36,F6,E2,C2,06,36,F6,D6,52,06,86,57,26,52,02,d2,04,92,07,76,16,E7,42,07,46,f2,07,36,56,52,07,96,f7,52,e0,EC,11,EC,11,EC,11,EC,11,EC,11,EC
5416   B6AD 42 A4 D7 22     .db     $42,$A4,$D7,$22,$E2,$05,$76,$17,$47,$36,$F6,$E2
5416   B6B1 E2 05 76 17 
5416   B6B5 47 36 F6 E2 
5417   B6B9 C2 06 36 F6     .db     $C2,$06,$36,$F6,$D6,$52,$06,$86,$57,$26,$52,$02
5417   B6BD D6 52 06 86 
5417   B6C1 57 26 52 02 
5418   B6C5 D2 04 92 07     .db     $d2,$04,$92,$07,$76,$16,$E7,$42,$07,$46,$f2,$07
5418   B6C9 76 16 E7 42 
5418   B6CD 07 46 F2 07 
5419   B6D1 36 56 52 07     .db     $36,$56,$52,$07,$96,$f7,$52,$e0 ;0 = end
5419   B6D5 96 F7 52 E0 
5420   B6D9 EC 11 EC 11     .db     $EC,$11,$EC,$11,$EC,$11,$EC,$11,$EC,$11,$EC   ;padding 
5420   B6DD EC 11 EC 11 
5420   B6E1 EC 11 EC 
5421   B6E4 00 00 00 00 post_dfinal_0_padding:  .fill     QR_V3L_EWORDS+1, $00
5421   B6E8 00 00 00 00 
5421   B6EC 00 00 00 00 
5421   B6F0 00 00 00 00 
5422   B6F4             
5423   B6F4 00 00 00 00 rs_gen:                 .fill     QR_V3L_EWORDS+1, $00
5423   B6F8 00 00 00 00 
5423   B6FC 00 00 00 00 
5423   B700 00 00 00 00 
5424   B704 00 00 00 00 rs_msg_remainder:       .fill     QR_V3L_DWORDS+QR_V3L_EWORDS+1, $00
5424   B708 00 00 00 00 
5424   B70C 00 00 00 00 
5424   B710 00 00 00 00 
5424   B714 00 00 00 00 
5424   B718 00 00 00 00 
5424   B71C 00 00 00 00 
5424   B720 00 00 00 00 
5424   B724 00 00 00 00 
5424   B728 00 00 00 00 
5424   B72C 00 00 00 00 
5424   B730 00 00 00 00 
5424   B734 00 00 00 00 
5424   B738 00 00 00 00 
5424   B73C 00 00 00 00 
5424   B740 00 00 00 00 
5424   B744 00 00 00 00 
5424   B748 00 00 00 
5425   B74B 00 00 00 00 poly_multL1:            .fill     QR_V3L_DWORDS+QR_V3L_EWORDS, $00
5425   B74F 00 00 00 00 
5425   B753 00 00 00 00 
5425   B757 00 00 00 00 
5425   B75B 00 00 00 00 
5425   B75F 00 00 00 00 
5425   B763 00 00 00 00 
5425   B767 00 00 00 00 
5425   B76B 00 00 00 00 
5425   B76F 00 00 00 00 
5425   B773 00 00 00 00 
5425   B777 00 00 00 00 
5425   B77B 00 00 00 00 
5425   B77F 00 00 00 00 
5425   B783 00 00 00 00 
5425   B787 00 00 00 00 
5425   B78B 00 00 00 00 
5425   B78F 00 00 
5426   B791 01 00       poly_multL2:            .db       01,00;
5427   B793             ;poly_multL2:            .fill     QR_V3L_DWORDS+QR_V3L_EWORDS, $00
5428   B793 00 00 00 00 rs_poly_result:         .fill     QR_V3L_DWORDS+QR_V3L_EWORDS, $00
5428   B797 00 00 00 00 
5428   B79B 00 00 00 00 
5428   B79F 00 00 00 00 
5428   B7A3 00 00 00 00 
5428   B7A7 00 00 00 00 
5428   B7AB 00 00 00 00 
5428   B7AF 00 00 00 00 
5428   B7B3 00 00 00 00 
5428   B7B7 00 00 00 00 
5428   B7BB 00 00 00 00 
5428   B7BF 00 00 00 00 
5428   B7C3 00 00 00 00 
5428   B7C7 00 00 00 00 
5428   B7CB 00 00 00 00 
5428   B7CF 00 00 00 00 
5428   B7D3 00 00 00 00 
5428   B7D7 00 00 
5429   B7D9             
5430   B7D9             
5431   B7D9             qr_copyzone:
5432   B7D9 FF F0 00 FF     .db $FF,$F0,$00,$FF ;0 
5433   B7DD FF F0 00 FF     .db $FF,$F0,$00,$FF ;1
5434   B7E1 FF F0 00 FF     .db $FF,$F0,$00,$FF ;2
5435   B7E5 FF F0 00 FF     .db $FF,$F0,$00,$FF ;3
5436   B7E9 FF F0 00 FF     .db $FF,$F0,$00,$FF ;4
5437   B7ED FF F0 00 FF     .db $FF,$F0,$00,$FF ;5
5438   B7F1 FF FF FF FF     .db $FF,$FF,$FF,$FF ;6
5439   B7F5 FF F0 00 FF     .db $FF,$F0,$00,$FF ;7
5440   B7F9 FF F0 00 FF     .db $FF,$F0,$00,$FF ;8
5441   B7FD F0 00 00 00     .db $F0,$00,$00,$00 ;9
5442   B801 F0 00 00 00     .db $F0,$00,$00,$00;10    
5443   B805 F0 00 00 00     .db $F0,$00,$00,$00;11
5444   B809 F0 00 00 00     .db $F0,$00,$00,$00;12
5445   B80D F0 00 00 00     .db $F0,$00,$00,$00;13
5446   B811 F0 00 00 00     .db $F0,$00,$00,$00;14
5447   B815 F0 00 00 00     .db $F0,$00,$00,$00;15
5448   B819 F0 00 00 00     .db $F0,$00,$00,$00;16
5449   B81D F0 00 00 00     .db $F0,$00,$00,$00;17
5450   B821 F0 00 00 00     .db $F0,$00,$00,$00;18
5451   B825 F0 00 00 00     .db $F0,$00,$00,$00;19
5452   B829 F0 00 01 F0     .db $F0,$00,$01,$F0;20 ;may contain 'remainder bits'. zero them out before masking
5453   B82D FF F0 01 F0     .db $FF,$F0,$01,$F0;21 ;unused format block-(change bit 9 to a 0 before masking)
5454   B831 FF F0 01 F0     .db $FF,$F0,$01,$F0;22
5455   B835 FF F0 01 F0     .db $FF,$F0,$01,$F0;23
5456   B839 FF F0 01 F0     .db $FF,$F0,$01,$F0;24
5457   B83D FF F0 00 00     .db $FF,$F0,$00,$00;25
5458   B841 FF F0 00 00     .db $FF,$F0,$00,$00;26
5459   B845 FF F0 00 00     .db $FF,$F0,$00,$00;27
5460   B849 FF F0 00 00     .db $FF,$F0,$00,$00;28
5461   B84D             
5462   B84D             
5463   B84D             
5464   B84D             gf_exp_table:
5465   B84D 01 02 04 08     .db    1,2,4,8,16,32,64,128,29,58,116,232,205,135,19,38,76,152
5465   B851 10 20 40 80 
5465   B855 1D 3A 74 E8 
5465   B859 CD 87 13 26 
5465   B85D 4C 98 
5466   B85F 2D 5A B4 75     .db    45,90,180,117,234,201,143,3,6,12,24,48,96,192,157,39,78,156
5466   B863 EA C9 8F 03 
5466   B867 06 0C 18 30 
5466   B86B 60 C0 9D 27 
5466   B86F 4E 9C 
5467   B871 25 4A 94 35     .db    37,74,148,53,106,212,181,119,238,193,159,35,70,140,5,10,20,40
5467   B875 6A D4 B5 77 
5467   B879 EE C1 9F 23 
5467   B87D 46 8C 05 0A 
5467   B881 14 28 
5468   B883 50 A0 5D BA     .db    80,160,93,186,105,210,185,111,222,161,95,190,97,194,153,47,94,188
5468   B887 69 D2 B9 6F 
5468   B88B DE A1 5F BE 
5468   B88F 61 C2 99 2F 
5468   B893 5E BC 
5469   B895 65 CA 89 0F     .db    101,202,137,15,30,60,120,240,253,231,211,187,107,214,177,127,254,225
5469   B899 1E 3C 78 F0 
5469   B89D FD E7 D3 BB 
5469   B8A1 6B D6 B1 7F 
5469   B8A5 FE E1 
5470   B8A7 DF A3 5B B6     .db    223,163,91,182,113,226,217,175,67,134,17,34,68,136,13,26,52,104
5470   B8AB 71 E2 D9 AF 
5470   B8AF 43 86 11 22 
5470   B8B3 44 88 0D 1A 
5470   B8B7 34 68 
5471   B8B9 D0 BD 67 CE     .db    208,189,103,206,129,31,62,124,248,237,199,147,59,118,236,197,151,51
5471   B8BD 81 1F 3E 7C 
5471   B8C1 F8 ED C7 93 
5471   B8C5 3B 76 EC C5 
5471   B8C9 97 33 
5472   B8CB 66 CC 85 17     .db    102,204,133,23,46,92,184,109,218,169,79,158,33,66,132,21,42,84
5472   B8CF 2E 5C B8 6D 
5472   B8D3 DA A9 4F 9E 
5472   B8D7 21 42 84 15 
5472   B8DB 2A 54 
5473   B8DD A8 4D 9A 29     .db    168,77,154,41,82,164,85,170,73,146,57,114,228,213,183,115,230,209
5473   B8E1 52 A4 55 AA 
5473   B8E5 49 92 39 72 
5473   B8E9 E4 D5 B7 73 
5473   B8ED E6 D1 
5474   B8EF BF 63 C6 91     .db    191,99,198,145,63,126,252,229,215,179,123,246,241,255,227,219,171,75
5474   B8F3 3F 7E FC E5 
5474   B8F7 D7 B3 7B F6 
5474   B8FB F1 FF E3 DB 
5474   B8FF AB 4B 
5475   B901 96 31 62 C4     .db    150,49,98,196,149,55,110,220,165,87,174,65,130,25,50,100,200,141
5475   B905 95 37 6E DC 
5475   B909 A5 57 AE 41 
5475   B90D 82 19 32 64 
5475   B911 C8 8D 
5476   B913 07 0E 1C 38     .db    7,14,28,56,112,224,221,167,83,166,81,162,89,178,121,242,249,239
5476   B917 70 E0 DD A7 
5476   B91B 53 A6 51 A2 
5476   B91F 59 B2 79 F2 
5476   B923 F9 EF 
5477   B925 C3 9B 2B 56     .db    195,155,43,86,172,69,138,9,18,36,72,144,61,122,244,245,247,243
5477   B929 AC 45 8A 09 
5477   B92D 12 24 48 90 
5477   B931 3D 7A F4 F5 
5477   B935 F7 F3 
5478   B937 FB EB CB 8B     .db    251,235,203,139,11,22,44,88,176,125,250,233,207,131,27,54,108,216
5478   B93B 0B 16 2C 58 
5478   B93F B0 7D FA E9 
5478   B943 CF 83 1B 36 
5478   B947 6C D8 
5479   B949 AD 47 8E 01     .db    173,71,142,1,2,4,8,16,32,64,128,29,58,116,232,205,135,19
5479   B94D 02 04 08 10 
5479   B951 20 40 80 1D 
5479   B955 3A 74 E8 CD 
5479   B959 87 13 
5480   B95B 26 4C 98 2D     .db    38,76,152,45,90,180,117,234,201,143,3,6,12,24,48,96,192,157
5480   B95F 5A B4 75 EA 
5480   B963 C9 8F 03 06 
5480   B967 0C 18 30 60 
5480   B96B C0 9D 
5481   B96D 27 4E 9C 25     .db    39,78,156,37,74,148,53,106,212,181,119,238,193,159,35,70,140,5
5481   B971 4A 94 35 6A 
5481   B975 D4 B5 77 EE 
5481   B979 C1 9F 23 46 
5481   B97D 8C 05 
5482   B97F 0A 14 28 50     .db    10,20,40,80,160,93,186,105,210,185,111,222,161,95,190,97,194,153
5482   B983 A0 5D BA 69 
5482   B987 D2 B9 6F DE 
5482   B98B A1 5F BE 61 
5482   B98F C2 99 
5483   B991 2F 5E BC 65     .db    47,94,188,101,202,137,15,30,60,120,240,253,231,211,187,107,214,177
5483   B995 CA 89 0F 1E 
5483   B999 3C 78 F0 FD 
5483   B99D E7 D3 BB 6B 
5483   B9A1 D6 B1 
5484   B9A3 7F FE E1 DF     .db    127,254,225,223,163,91,182,113,226,217,175,67,134,17,34,68,136,13
5484   B9A7 A3 5B B6 71 
5484   B9AB E2 D9 AF 43 
5484   B9AF 86 11 22 44 
5484   B9B3 88 0D 
5485   B9B5 1A 34 68 D0     .db    26,52,104,208,189,103,206,129,31,62,124,248,237,199,147,59,118,236
5485   B9B9 BD 67 CE 81 
5485   B9BD 1F 3E 7C F8 
5485   B9C1 ED C7 93 3B 
5485   B9C5 76 EC 
5486   B9C7 C5 97 33 66     .db    197,151,51,102,204,133,23,46,92,184,109,218,169,79,158,33,66,132
5486   B9CB CC 85 17 2E 
5486   B9CF 5C B8 6D DA 
5486   B9D3 A9 4F 9E 21 
5486   B9D7 42 84 
5487   B9D9 15 2A 54 A8     .db    21,42,84,168,77,154,41,82,164,85,170,73,146,57,114,228,213,183
5487   B9DD 4D 9A 29 52 
5487   B9E1 A4 55 AA 49 
5487   B9E5 92 39 72 E4 
5487   B9E9 D5 B7 
5488   B9EB 73 E6 D1 BF     .db    115,230,209,191,99,198,145,63,126,252,229,215,179,123,246,241,255,227
5488   B9EF 63 C6 91 3F 
5488   B9F3 7E FC E5 D7 
5488   B9F7 B3 7B F6 F1 
5488   B9FB FF E3 
5489   B9FD DB AB 4B 96     .db    219,171,75,150,49,98,196,149,55,110,220,165,87,174,65,130,25,50
5489   BA01 31 62 C4 95 
5489   BA05 37 6E DC A5 
5489   BA09 57 AE 41 82 
5489   BA0D 19 32 
5490   BA0F 64 C8 8D 07     .db    100,200,141,7,14,28,56,112,224,221,167,83,166,81,162,89,178,121
5490   BA13 0E 1C 38 70 
5490   BA17 E0 DD A7 53 
5490   BA1B A6 51 A2 59 
5490   BA1F B2 79 
5491   BA21 F2 F9 EF C3     .db    242,249,239,195,155,43,86,172,69,138,9,18,36,72,144,61,122,244
5491   BA25 9B 2B 56 AC 
5491   BA29 45 8A 09 12 
5491   BA2D 24 48 90 3D 
5491   BA31 7A F4 
5492   BA33 F5 F7 F3 FB     .db    245,247,243,251,235,203,139,11,22,44,88,176,125,250,233,207,131,27
5492   BA37 EB CB 8B 0B 
5492   BA3B 16 2C 58 B0 
5492   BA3F 7D FA E9 CF 
5492   BA43 83 1B 
5493   BA45 36 6C D8 AD     .db    54,108,216,173,71,142
5493   BA49 47 8E 
5494   BA4B             
5495   BA4B             gf_log_table:
5496   BA4B 00 00 01 19     .db    0,0,1,25,2,50,26,198,3,223,51,238,27,104,199,75
5496   BA4F 02 32 1A C6 
5496   BA53 03 DF 33 EE 
5496   BA57 1B 68 C7 4B 
5497   BA5B 04 64 E0 0E     .db    4,100,224,14,52,141,239,129,28,193,105,248,200,8,76
5497   BA5F 34 8D EF 81 
5497   BA63 1C C1 69 F8 
5497   BA67 C8 08 4C 
5498   BA6A 71 05 8A 65     .db    113,5,138,101,47,225,36,15,33,53,147,142,218,240,18
5498   BA6E 2F E1 24 0F 
5498   BA72 21 35 93 8E 
5498   BA76 DA F0 12 
5499   BA79 82 45 1D B5     .db    130,69,29,181,194,125,106,39,249,185,201,154,9,120,77
5499   BA7D C2 7D 6A 27 
5499   BA81 F9 B9 C9 9A 
5499   BA85 09 78 4D 
5500   BA88 E4 72 A6 06     .db    228,114,166,6,191,139,98,102,221,48,253,226,152,37,179
5500   BA8C BF 8B 62 66 
5500   BA90 DD 30 FD E2 
5500   BA94 98 25 B3 
5501   BA97 10 91 22 88     .db    16,145,34,136,54,208,148,206,143,150,219,189,241,210,19
5501   BA9B 36 D0 94 CE 
5501   BA9F 8F 96 DB BD 
5501   BAA3 F1 D2 13 
5502   BAA6 5C 83 38 46     .db    92,131,56,70,64,30,66,182,163,195,72,126,110,107,58
5502   BAAA 40 1E 42 B6 
5502   BAAE A3 C3 48 7E 
5502   BAB2 6E 6B 3A 
5503   BAB5 28 54 FA 85     .db    40,84,250,133,186,61,202,94,155,159,10,21,121,43,78
5503   BAB9 BA 3D CA 5E 
5503   BABD 9B 9F 0A 15 
5503   BAC1 79 2B 4E 
5504   BAC4 D4 E5 AC 73     .db    212,229,172,115,243,167,87,7,112,192,247,140,128,99,13
5504   BAC8 F3 A7 57 07 
5504   BACC 70 C0 F7 8C 
5504   BAD0 80 63 0D 
5505   BAD3 67 4A DE ED     .db    103,74,222,237,49,197,254,24,227,165,153,119,38,184,180
5505   BAD7 31 C5 FE 18 
5505   BADB E3 A5 99 77 
5505   BADF 26 B8 B4 
5506   BAE2 7C 11 44 92     .db    124,17,68,146,217,35,32,137,46,55,63,209,91,149,188
5506   BAE6 D9 23 20 89 
5506   BAEA 2E 37 3F D1 
5506   BAEE 5B 95 BC 
5507   BAF1 CF CD 90 87     .db    207,205,144,135,151,178,220,252,190,97,242,86,211,171,20
5507   BAF5 97 B2 DC FC 
5507   BAF9 BE 61 F2 56 
5507   BAFD D3 AB 14 
5508   BB00 2A 5D 9E 84     .db    42,93,158,132,60,57,83,71,109,65,162,31,45,67,216
5508   BB04 3C 39 53 47 
5508   BB08 6D 41 A2 1F 
5508   BB0C 2D 43 D8 
5509   BB0F B7 7B A4 76     .db    183,123,164,118,196,23,73,236,127,12,111,246,108,161,59
5509   BB13 C4 17 49 EC 
5509   BB17 7F 0C 6F F6 
5509   BB1B 6C A1 3B 
5510   BB1E 52 29 9D 55     .db    82,41,157,85,170,251,96,134,177,187,204,62,90,203,89
5510   BB22 AA FB 60 86 
5510   BB26 B1 BB CC 3E 
5510   BB2A 5A CB 59 
5511   BB2D 5F B0 9C A9     .db    95,176,156,169,160,81,11,245,22,235,122,117,44,215,79
5511   BB31 A0 51 0B F5 
5511   BB35 16 EB 7A 75 
5511   BB39 2C D7 4F 
5512   BB3C AE D5 E9 E6     .db    174,213,233,230,231,173,232,116,214,244,234,168,80,88,175   
5512   BB40 E7 AD E8 74 
5512   BB44 D6 F4 EA A8 
5512   BB48 50 58 AF 
5513   BB4B             
5514   BB4B 00 00       rs_p1:       .db         $00,$00
5515   BB4D 00 00       rs_p2:       .db         $00,$00   ;enc pointers
5516   BB4F 00 00       rs_p1s:      .db         $00,$00
5517   BB51 00 00       rs_p2s:      .db         $00,$00
5518   BB53 00 00       rs_pr:       .db         $00,$00
5519   BB55 00          p1len:       .db         $00
5520   BB56 00          p2len:       .db         $00
5521   BB57 00          pResLen:     .db         $00
5522   BB58 00 00       pMultRes_p:  .db         $00,00
5523   BB5A 00 00       rs_gen_poly_p:  .db        $00,$00
5524   BB5C 00 00       msg_p:           .db        $00,$00
5525   BB5E 00 00       pdiv_res_p:         .db         $00,$00
5526   BB60 00 00       pdiv_divisor_p:     .db         $00,$00
5527   BB62 00          rs_msglen:              .db     $00
5528   BB63 00 00       pdiv_remainder_p:   .db         $00,$00
5529   BB65 00 00       pdiv_coeff:         .db         $00,$00
5530   BB67 00 00       pdiv_divisorLen:    .db         $00,$00
5531   BB69 00 00       rs_remainder_p:     .db         $00,$00
5532   BB6B 00          rs_coeff:           .db         %00
5533   BB6C 00          qr_data_len_backup  .db         $00
5534   BB6D 00          qr_wc:              .db         $00
5535   BB6E A6 E0       generator_polynomial:  .db     %10100110, %11100000
5536   BB70 12 A8       qr_v3_BCHmask:         .db     %00010010, %10101000
5537   BB72 64 BC       qr_v3_BCHcode:         .db     %01100100, %10111100 ;bit0 = lsb
5538   BB74 78 00       qr_v3format_string:    .db     %01111000, %00000000 ;EDClvl + maskb + 10 0's
5539   BB76             ;                               ...43210   14...98   ;15 bits
5540   BB76 76 69       qr_v3_BCHfinal:        .db     %01110110, %01101001
5541   BB78 00          qr_x:               .db     $00
5542   BB79 00          qr_y:               .db     $00
5543   BB7A             
5544   BB7A 07          winBtm:             .db     $07
5545   BB7B             
5546   BB7B             .end
5547   BB7B             ENDtasm: Number of errors = 0
